using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System.IO;
using Excel = Microsoft.Office.Interop.Excel;
using System.Reflection;
using ClosedXML.Excel;
using Microsoft.Reporting.WinForms;
using System.Threading;
namespace SalesProject
{
    /// <summary>
    /// Interaction logic for FrmManagerMain.xaml
    /// </summary>
    /// 
    public delegate void UCFrmManagerMainEvent();
    public partial class UCFrmManagerMain : UserControl
    {
        public static RoutedCommand MyMinimize = new RoutedCommand();
        public event UCFrmManagerMainEvent UCFrmManagerMainEvent_Finished;
        public void btnMinimizeMethod(Object sender, ExecutedRoutedEventArgs e)
        {
            // WindowState = WindowState.Minimized;
        }
        public UCFrmManagerMain()
        {
            try
            {
                InitializeComponent();
                funConnectionStateCheck();
                MyMinimize.InputGestures.Add(new KeyGesture(Key.F12, ModifierKeys.None));
                Uccommission.uccommission_click += new DUCCommission(Uccommission_uccommission_click);
                Uccommission.ucgroupcommission_click += new DUCCommission(Uccommission_ucgroupcommission_click);
                if (dt_griddiaplay.Columns.Count == 0)
                {
                    dt_griddiaplay.Columns.Add("ItemName", typeof(string));
                    dt_griddiaplay.Columns.Add("Qty", typeof(string));
                    dt_griddiaplay.Columns.Add("Rate1", typeof(string));
                    dt_griddiaplay.Columns.Add("Amount", typeof(string));
                }
                if (dt_griddiaplay1.Columns.Count == 0)
                {
                    dt_griddiaplay1.Columns.Add("Particular", typeof(string));
                    dt_griddiaplay1.Columns.Add("Amount", typeof(string));
                }
                if (dtReportEnd.Columns.Count == 0)
                {
                    dtReportEnd.Columns.Add("Coin/Cash", typeof(string));
                    dtReportEnd.Columns.Add("Count", typeof(string));
                    dtReportEnd.Columns.Add("Amount", typeof(string));
                }
                if (dt_selecttable.Columns.Count == 0)
                {
                    dt_selecttable.Columns.Add("ItemName", typeof(string));
                    dt_selecttable.Columns.Add("Qty", typeof(string));
                    dt_selecttable.Columns.Add("Rate", typeof(string));
                    dt_selecttable.Columns.Add("Amount", typeof(string));
                }
                if (dtGroupReport.Columns.Count == 0)
                {
                    dtGroupReport.Columns.Add("GroupName", typeof(string));
                    dtGroupReport.Columns.Add("Qty", typeof(string));
                    dtGroupReport.Columns.Add("Rate", typeof(string));
                    dtGroupReport.Columns.Add("Amount", typeof(string));
                }
                if (dt_addgroupvalues.Columns.Count == 0)
                {
                    dt_addgroupvalues.Columns.Add("ItemNames", typeof(string));
                    dt_addgroupvalues.Columns.Add("Qty", typeof(string));
                    dt_addgroupvalues.Columns.Add("ItemCost", typeof(string));
                    dt_addgroupvalues.Columns.Add("SalesPrice", typeof(string));
                    dt_addgroupvalues.Columns.Add("Profit", typeof(string));
                }
                if (dtItemProfit.Columns.Count == 0)
                {
                    dtItemProfit.Columns.Add("ItemNames", typeof(string));
                    dtItemProfit.Columns.Add("Qty", typeof(string));
                    dtItemProfit.Columns.Add("ItemCost", typeof(string));
                    dtItemProfit.Columns.Add("SalesPrice", typeof(string));
                    dtItemProfit.Columns.Add("Profit", typeof(string));
                }
                if (dtGroupPrintNew.Columns.Count == 0)
                {
                    dtGroupPrintNew.Columns.Add("ItemNames", typeof(string));
                    dtGroupPrintNew.Columns.Add("Qty", typeof(string));
                    dtGroupPrintNew.Columns.Add("Profit", typeof(string));
                }
                if (dtCash.Columns.Count == 0)
                {
                    dtCash.Columns.Add("BillNo", typeof(string));
                    dtCash.Columns.Add("Time", typeof(string));
                    dtCash.Columns.Add("Amount", typeof(string));
                }
                if (dtSalesmen.Columns.Count == 0)
                {
                    dtSalesmen.Columns.Add("BillNo", typeof(string));
                    dtSalesmen.Columns.Add("Salesmen", typeof(string));
                    dtSalesmen.Columns.Add("Amount", typeof(string));
                }
                if (dtNETS.Columns.Count == 0)
                {
                    dtNETS.Columns.Add("BillNo", typeof(string));
                    dtNETS.Columns.Add("Time", typeof(string));
                    dtNETS.Columns.Add("Amount", typeof(string));
                }
                if (dtHACPayment.Columns.Count == 0)
                {

                    dtHACPayment.Columns.Add("Mode", typeof(string));
                    dtHACPayment.Columns.Add("Date", typeof(string));
                    dtHACPayment.Columns.Add("Amount", typeof(string));
                }
                if (dtPDF.Columns.Count == 0)
                {
                    dtPDF.Columns.Add("ItemCode", typeof(string));
                    dtPDF.Columns.Add("ItemName", typeof(string));
                    dtPDF.Columns.Add("SalesQty", typeof(string));
                    dtPDF.Columns.Add("Cost", typeof(string));
                    dtPDF.Columns.Add("Rate", typeof(string));
                    dtPDF.Columns.Add("Stock", typeof(string));
                }
                if (dtCNHReport.Columns.Count == 0)
                {
                    dtCNHReport.Columns.Add("BillNo", typeof(string));
                    dtCNHReport.Columns.Add("DateTime", typeof(string));
                    dtCNHReport.Columns.Add("Amount", typeof(string));
                }

                if (dtPayment.Columns.Count == 0)
                {
                    dtPayment.Columns.Add("Name", typeof(string));
                    dtPayment.Columns.Add("Sales Amount", typeof(string));
                    dtPayment.Columns.Add("Paid Amount", typeof(string));
                    dtPayment.Columns.Add("Balance Amount", typeof(string));
                }

                if (dtGroupCommission.Columns.Count == 0)
                {
                    dtGroupCommission.Columns.Add("Particulars", typeof(string));
                    dtGroupCommission.Columns.Add("Amount", typeof(string));
                }
                if (dtItemCommission.Columns.Count == 0)
                {
                    dtItemCommission.Columns.Add("Particulars", typeof(string));
                    dtItemCommission.Columns.Add("Amount", typeof(string));
                }

                gridItemsManager.DataSource = dt_griddiaplay.DefaultView;
                gridItemsManager.ColumnHeadersVisible = false;
                gridItemsManager.ReadOnly = true;
                //   funConnectionStateCheck();
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmdLastReset = new SqlCommand("sp_SalesCreationSelectAll", con);
                cmdLastReset.CommandType = CommandType.StoredProcedure;
                cmdLastReset.Parameters.AddWithValue("@tActionType", "ENDOFDAY");
                dr = cmdLastReset.ExecuteReader();
                dtNew.Load(dr);
                bool isChk1 = false;
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    isChk1 = true;
                    DateTime tDate = DateTime.Parse(dtNew.Rows[mn][0].ToString());
                    lblLastReset.Content = dtNew.Rows[mn][0].ToString();
                    tEndOfDayDate = tDate;
                    currentDate = tDate.AddDays(1);
                }
                if (isChk1 == false)
                {
                    DateTime tDate = DateTime.Now;
                    lblLastReset.Content = tDate.AddDays(-1).ToString();
                    currentDate = tDate;
                }

                dpFrom.SelectedDate = DateTime.Now.Date;
                dpTo.SelectedDate = DateTime.Now.Date;

                dtpFrom.SelectedDate = DateTime.Now.Date;
                dtpTo.SelectedDate = DateTime.Now.Date;
                if (dtCreditcard1.Columns.Count == 0)
                {
                    dtCreditcard1.Columns.Add("Bill No");
                    dtCreditcard1.Columns.Add("bill Date");
                    dtCreditcard1.Columns.Add("Card Name");
                    dtCreditcard1.Columns.Add("Rec Amt");
                }
                if (dtDebitCredit.Columns.Count == 0)
                {
                    dtDebitCredit.Columns.Add("Particular");
                    dtDebitCredit.Columns.Add("Debit");
                    dtDebitCredit.Columns.Add("Credit");
                }
                if (dtCashDrawer.Columns.Count == 0)
                {
                    dtCashDrawer.Columns.Add("Cash/Coin");
                    dtCashDrawer.Columns.Add("Count");
                    dtCashDrawer.Columns.Add("Amount");
                }
                if (dtTaxReport.Columns.Count == 0)
                {
                    dtTaxReport.Columns.Add("BillNo");
                    // dtTaxReport.Columns.Add("Amount");
                    dtTaxReport.Columns.Add("Tax_Amt");
                    //dtTaxReport.Columns.Add("Total");
                }
                if (dtNameTaxReport.Columns.Count == 0)
                {
                    dtNameTaxReport.Columns.Add("Name");
                    dtNameTaxReport.Columns.Add("TaxAmount");
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }
        DataTable dt_griddiaplay = new DataTable();
        DataTable dt_griddiaplay1 = new DataTable();
        DataTable dtCash = new DataTable();
        DataTable dtPayment = new DataTable();
        DataTable dtNETS = new DataTable();
        DateTime tEndOfDayDate = new DateTime();
        DataTable dtPDF = new DataTable();
        DataTable dtHACPayment = new DataTable();
        DataTable dtDebitCredit = new DataTable();
        DataTable dtTaxReport = new DataTable();
        DataTable dtCNHReport = new DataTable();
        DataTable dtCashDrawer = new DataTable();
        public void funConnectionStateCheck()
        {
            try
            {
                con.Close();
                if (con.State != ConnectionState.Open)
                {
                    con.Open();
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }
        string charPerLine, lineBelowLogo, topLine1, topLine2, topLine3, topLine4, topLine5;
        string mainStr;
        double findCenterPosition;
        public double tTotal1 = 0.00;
        public double tTotal2 = 0.00;
        public double tTotal3 = 0.00;
        public double gtot = 0.00;
        DataTable dtPrint = new DataTable();
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["POS"].ConnectionString.ToString());
        SqlDataReader dr = null;
        public string txtCountValue;
        public string tCountValue
        {
            get { return txtCountValue; }
            set { txtCountValue = value; }
        }
        public void funLoadManagerMain(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_Class.clsVariables.tViewReport == true)
                {
                    cmbCounterName.IsEnabled = true;
                }
                else
                {
                    cmbCounterName.IsEnabled = false;
                }
                funConnectionStateCheck();
                ds.Tables.Clear();
                DataTable dtCounter = new DataTable();
                dtCounter.Rows.Clear();
                SqlCommand cmdCounter = new SqlCommand("Select ctr_name from Counter_table", con);
                SqlDataAdapter adpCounter = new SqlDataAdapter(cmdCounter);
                adpCounter.Fill(dtCounter);
                cmbCounterName.Items.Clear();
                ComboCounter.Items.Clear();
                for (int i = 0; i < dtCounter.Rows.Count; i++)
                {
                    cmbCounterName.Items.Add(dtCounter.Rows[i]["ctr_name"]);
                    ComboCounter.Items.Add(dtCounter.Rows[i]["ctr_name"]);
                }
                cmbCounterName.Items.Add("All Counter");
                ComboCounter.Items.Add("All Counter");
                cmbCounterName.Text = _Class.clsVariables.tCounterName;
                ComboCounter.Text = _Class.clsVariables.tCounterName;
                //btnCreditCardRpt.Visibility = Visibility.Hidden;


                // Single Procedure modification for Speed-start

                //////DataTable dtNew = new DataTable();
                //////dtNew.Rows.Clear();
                //////SqlCommand cmdLastReset = new SqlCommand("sp_SalesCreationSelectSingle", con);
                //////cmdLastReset.CommandType = CommandType.StoredProcedure;
                //////cmdLastReset.Parameters.AddWithValue("@tActionType", "BEGINDRAWERCHECK");
                //////cmdLastReset.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
                //////SqlDataAdapter adp = new SqlDataAdapter(cmdLastReset);
                //////adp.Fill(dtNew);
                ////////dr = cmdLastReset.ExecuteReader();
                ////////dtNew.Load(dr);
                //////////SqlDataAdapter cmdRowChk = new SqlDataAdapter("Select * from EndOFDay_table", con);
                //////////cmdRowChk.Fill(ds, "ADP1");
                //////if (dtNew.Rows.Count == 0)
                //////{
                //////    SqlCommand cmdInsertEOD = new SqlCommand("sp_updateFirstEndOfday", con);
                //////    cmdInsertEOD.CommandType = CommandType.StoredProcedure;
                //////    cmdInsertEOD.Parameters.AddWithValue("@tUserno", _Class.clsVariables.tUserNo);
                //////    cmdInsertEOD.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                //////    cmdInsertEOD.ExecuteNonQuery();
                //////}
                //////dtPrint.Columns.Add("Describ", typeof(string));
                //////dtPrint.Columns.Add("Property", typeof(string));
                //////dtPrint.Rows.Clear();
                //////SqlCommand cmd = new SqlCommand("sp_SalesCreationSelectAll", con);
                //////cmd.CommandType = CommandType.StoredProcedure;
                //////cmd.Parameters.AddWithValue("@tActionType", "GSET");
                //////dr = cmd.ExecuteReader();
                //////dtPrint.Load(dr);

                //////DataTable dtPrinter = new DataTable();
                //////dtPrinter.Rows.Clear();
                //////SqlCommand cmdPrinter = new SqlCommand("Select * from ReceiptPrintSettings_table where Counter=@tCounter", con);
                //////cmdPrinter.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                //////SqlDataAdapter adpPrinter = new SqlDataAdapter(cmdPrinter);
                //////adpPrinter.Fill(dtPrinter);
                //////if (dtPrinter.Rows.Count > 0)
                //////{
                //////    for (int mn = 0; mn < dtPrint.Rows.Count; mn++)
                //////    {
                //////        if (dtPrint.Rows[mn][0].ToString() == "Enable This Device*")
                //////        {
                //////            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Enable_This_Device"].ToString();
                //////        }
                //////        if (dtPrint.Rows[mn][0].ToString() == "Printer Name*")
                //////        {
                //////            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Printer_Name"].ToString();
                //////        }
                //////        if (dtPrint.Rows[mn][0].ToString() == "Printer Type*")
                //////        {
                //////            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Printer_Type"].ToString();
                //////        }
                //////        if (dtPrint.Rows[mn][0].ToString() == "Print Copies*")
                //////        {
                //////            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Print_Copies"].ToString();
                //////        }
                //////        if (dtPrint.Rows[mn][0].ToString() == "Characters Per Line*")
                //////        {
                //////            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Characters_Per_Line"].ToString();
                //////        }

                //////    }

                //////}


                //////SqlCommand cmd13 = new SqlCommand("sp_SalesCreationSelectAll", con);
                //////cmd13.CommandType = CommandType.StoredProcedure;
                //////cmd13.Parameters.AddWithValue("@tActionType", "RPTSET");
                //////dr = cmd13.ExecuteReader();
                //////dtPrint.Load(dr);
                //////SqlCommand cmd2 = new SqlCommand("sp_SalesCreationSelectAll", con);
                //////cmd2.CommandType = CommandType.StoredProcedure;
                //////cmd2.Parameters.AddWithValue("@tActionType", "CUSTOMTEXT");
                //////dr = cmd2.ExecuteReader();
                //////dtPrint.Load(dr);

                // Single Procedure modification for Speed-End
                if (dtPrint.Columns.Count == 0)
                {
                    dtPrint.Columns.Add("Describ", typeof(string));
                    dtPrint.Columns.Add("Property", typeof(string));
                }
                dtPrint.Rows.Clear();
                SqlCommand cmd = new SqlCommand("sp_ManagerLoad", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                cmd.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                dr = cmd.ExecuteReader();
                dtPrint.Load(dr);
                DataTable dtPrinter = new DataTable();
                dtPrinter.Rows.Clear();
                SqlCommand cmdPrinter = new SqlCommand("Select * from ReceiptPrintSettings_table where Counter=@tCounter", con);
                cmdPrinter.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                SqlDataAdapter adpPrinter = new SqlDataAdapter(cmdPrinter);
                adpPrinter.Fill(dtPrinter);
                if (dtPrinter.Rows.Count > 0)
                {
                    for (int mn = 0; mn < dtPrint.Rows.Count; mn++)
                    {
                        if (dtPrint.Rows[mn][0].ToString() == "Enable This Device*")
                        {
                            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Enable_This_Device"].ToString();
                        }
                        if (dtPrint.Rows[mn][0].ToString() == "Printer Name*")
                        {
                            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Printer_Name"].ToString();
                        }
                        if (dtPrint.Rows[mn][0].ToString() == "Printer Type*")
                        {
                            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Printer_Type"].ToString();
                        }
                        if (dtPrint.Rows[mn][0].ToString() == "Print Copies*")
                        {
                            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Print_Copies"].ToString();
                        }
                        if (dtPrint.Rows[mn][0].ToString() == "Characters Per Line*")
                        {
                            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Characters_Per_Line"].ToString();
                        }
                    }
                }
                btnCashDrawer_Click(sender, e);
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

            Uccommission.Visibility = Visibility.Hidden;
            funLoadManagerMain(sender, e);
            //try
            //{
            //    if (_Class.clsVariables.tViewReport == true)
            //    {
            //        cmbCounterName.IsEnabled = true;
            //    }
            //    else
            //    {
            //        cmbCounterName.IsEnabled = false;
            //    }
            //    funConnectionStateCheck();
            //    ds.Tables.Clear();
            //    DataTable dtCounter = new DataTable();
            //    dtCounter.Rows.Clear();
            //    SqlCommand cmdCounter = new SqlCommand("Select ctr_name from Counter_table", con);
            //    SqlDataAdapter adpCounter = new SqlDataAdapter(cmdCounter);
            //    adpCounter.Fill(dtCounter);

            //    for (int i = 0; i < dtCounter.Rows.Count; i++)
            //    {
            //        cmbCounterName.Items.Add(dtCounter.Rows[i]["ctr_name"]);
            //    }
            //    cmbCounterName.Items.Add("All Counter");
            //    cmbCounterName.Text = _Class.clsVariables.tCounterName;
            //    //btnCreditCardRpt.Visibility = Visibility.Hidden;


            //    // Single Procedure modification for Speed-start

            //    //////DataTable dtNew = new DataTable();
            //    //////dtNew.Rows.Clear();
            //    //////SqlCommand cmdLastReset = new SqlCommand("sp_SalesCreationSelectSingle", con);
            //    //////cmdLastReset.CommandType = CommandType.StoredProcedure;
            //    //////cmdLastReset.Parameters.AddWithValue("@tActionType", "BEGINDRAWERCHECK");
            //    //////cmdLastReset.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
            //    //////SqlDataAdapter adp = new SqlDataAdapter(cmdLastReset);
            //    //////adp.Fill(dtNew);
            //    ////////dr = cmdLastReset.ExecuteReader();
            //    ////////dtNew.Load(dr);
            //    //////////SqlDataAdapter cmdRowChk = new SqlDataAdapter("Select * from EndOFDay_table", con);
            //    //////////cmdRowChk.Fill(ds, "ADP1");
            //    //////if (dtNew.Rows.Count == 0)
            //    //////{
            //    //////    SqlCommand cmdInsertEOD = new SqlCommand("sp_updateFirstEndOfday", con);
            //    //////    cmdInsertEOD.CommandType = CommandType.StoredProcedure;
            //    //////    cmdInsertEOD.Parameters.AddWithValue("@tUserno", _Class.clsVariables.tUserNo);
            //    //////    cmdInsertEOD.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
            //    //////    cmdInsertEOD.ExecuteNonQuery();
            //    //////}
            //    //////dtPrint.Columns.Add("Describ", typeof(string));
            //    //////dtPrint.Columns.Add("Property", typeof(string));
            //    //////dtPrint.Rows.Clear();
            //    //////SqlCommand cmd = new SqlCommand("sp_SalesCreationSelectAll", con);
            //    //////cmd.CommandType = CommandType.StoredProcedure;
            //    //////cmd.Parameters.AddWithValue("@tActionType", "GSET");
            //    //////dr = cmd.ExecuteReader();
            //    //////dtPrint.Load(dr);

            //    //////DataTable dtPrinter = new DataTable();
            //    //////dtPrinter.Rows.Clear();
            //    //////SqlCommand cmdPrinter = new SqlCommand("Select * from ReceiptPrintSettings_table where Counter=@tCounter", con);
            //    //////cmdPrinter.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
            //    //////SqlDataAdapter adpPrinter = new SqlDataAdapter(cmdPrinter);
            //    //////adpPrinter.Fill(dtPrinter);
            //    //////if (dtPrinter.Rows.Count > 0)
            //    //////{
            //    //////    for (int mn = 0; mn < dtPrint.Rows.Count; mn++)
            //    //////    {
            //    //////        if (dtPrint.Rows[mn][0].ToString() == "Enable This Device*")
            //    //////        {
            //    //////            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Enable_This_Device"].ToString();
            //    //////        }
            //    //////        if (dtPrint.Rows[mn][0].ToString() == "Printer Name*")
            //    //////        {
            //    //////            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Printer_Name"].ToString();
            //    //////        }
            //    //////        if (dtPrint.Rows[mn][0].ToString() == "Printer Type*")
            //    //////        {
            //    //////            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Printer_Type"].ToString();
            //    //////        }
            //    //////        if (dtPrint.Rows[mn][0].ToString() == "Print Copies*")
            //    //////        {
            //    //////            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Print_Copies"].ToString();
            //    //////        }
            //    //////        if (dtPrint.Rows[mn][0].ToString() == "Characters Per Line*")
            //    //////        {
            //    //////            dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Characters_Per_Line"].ToString();
            //    //////        }

            //    //////    }

            //    //////}


            //    //////SqlCommand cmd13 = new SqlCommand("sp_SalesCreationSelectAll", con);
            //    //////cmd13.CommandType = CommandType.StoredProcedure;
            //    //////cmd13.Parameters.AddWithValue("@tActionType", "RPTSET");
            //    //////dr = cmd13.ExecuteReader();
            //    //////dtPrint.Load(dr);
            //    //////SqlCommand cmd2 = new SqlCommand("sp_SalesCreationSelectAll", con);
            //    //////cmd2.CommandType = CommandType.StoredProcedure;
            //    //////cmd2.Parameters.AddWithValue("@tActionType", "CUSTOMTEXT");
            //    //////dr = cmd2.ExecuteReader();
            //    //////dtPrint.Load(dr);

            //    // Single Procedure modification for Speed-End

            //    dtPrint.Columns.Add("Describ", typeof(string));
            //    dtPrint.Columns.Add("Property", typeof(string));
            //    dtPrint.Rows.Clear();
            //    SqlCommand cmd = new SqlCommand("sp_ManagerLoad", con);
            //    cmd.CommandType = CommandType.StoredProcedure;
            //    cmd.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
            //    cmd.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
            //    dr = cmd.ExecuteReader();
            //    dtPrint.Load(dr);
            //    DataTable dtPrinter = new DataTable();
            //    dtPrinter.Rows.Clear();
            //    SqlCommand cmdPrinter = new SqlCommand("Select * from ReceiptPrintSettings_table where Counter=@tCounter", con);
            //    cmdPrinter.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
            //    SqlDataAdapter adpPrinter = new SqlDataAdapter(cmdPrinter);
            //    adpPrinter.Fill(dtPrinter);
            //    if (dtPrinter.Rows.Count > 0)
            //    {
            //        for (int mn = 0; mn < dtPrint.Rows.Count; mn++)
            //        {
            //            if (dtPrint.Rows[mn][0].ToString() == "Enable This Device*")
            //            {
            //                dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Enable_This_Device"].ToString();
            //            }
            //            if (dtPrint.Rows[mn][0].ToString() == "Printer Name*")
            //            {
            //                dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Printer_Name"].ToString();
            //            }
            //            if (dtPrint.Rows[mn][0].ToString() == "Printer Type*")
            //            {
            //                dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Printer_Type"].ToString();
            //            }
            //            if (dtPrint.Rows[mn][0].ToString() == "Print Copies*")
            //            {
            //                dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Print_Copies"].ToString();
            //            }
            //            if (dtPrint.Rows[mn][0].ToString() == "Characters Per Line*")
            //            {
            //                dtPrint.Rows[mn][1] = dtPrinter.Rows[0]["Characters_Per_Line"].ToString();
            //            }
            //        }
            //    }


            //    //dtNew.Rows.Clear();
            //    //SqlCommand cmdActive = new SqlCommand("sp_SalesCreationSelectSingle", con);
            //    //cmdActive.CommandType = CommandType.StoredProcedure;
            //    //cmdActive.Parameters.AddWithValue("@tActionType", "ACTIVENEW");
            //    //cmdActive.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
            //    //SqlDataAdapter adp10 = new SqlDataAdapter(cmdActive);
            //    //adp10.Fill(dtNew);
            //    ////dr = cmdActive.ExecuteReader();
            //    ////dtNew.Load(dr);
            //    //if (dtNew.Rows.Count > 0)
            //    //{
            //    //    if (dtNew.Rows[0][0].ToString() == "1")
            //    //    {
            //    //        btnBeginCashDrawer.IsEnabled = true;
            //    //        btnResetDrawer.IsEnabled = false;
            //    //       /// btnEndOfDayDrawer.IsEnabled = false;
            //    //        btnCounterSettle.IsEnabled = false;
            //    //    }
            //    //    else
            //    //    {
            //    //        btnBeginCashDrawer.IsEnabled = false;
            //    //        btnResetDrawer.IsEnabled = true;
            //    //        btnEndOfDayDrawer.IsEnabled = true;
            //    //        btnCounterSettle.IsEnabled = true;
            //    //    }
            //    //}
            //    btnCashDrawer_Click(sender, e);
            //}
            //catch (Exception ex)
            //{
            //    MyMessageBox.ShowBox(ex.ToString(), "Warning");
            //}
        }
        private void btnCashReport_Click(object sender, RoutedEventArgs e)
        {
            // if (_Class.clsVariables.tViewCash == true)
            {
                try
                {
                    mainStr = "";
                    tPrintingType = "";
                    listDisplay.Items.Clear();
                    gridItemsManager.DataSource = null; dtCash.Rows.Clear();
                    gridItemsManager.ColumnHeadersVisible = true;

                    //Return Item Values
                    DataTable dtVoid = new DataTable();
                    dtVoid.Rows.Clear();
                    //SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=@tCounter and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno, party_no", con);
                    //cmdVoid.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                    string tCmdVoid = "";
                    if (cmbCounterName.Text == "All Counter")
                    {
                        tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where  Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno, party_no";
                    }
                    else
                    {
                        tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno, party_no";
                        //tCmdVoid = "select party_no, convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno, party_no";
                    }
                    SqlCommand cmdVoid = new SqlCommand(tCmdVoid, con);
                    cmdVoid.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                    // cmdVoid.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    cmdVoid.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);

                    SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                    adpVoid.Fill(dtVoid);
                    double tCashReturnValue = 0.00;
                    double tNETSReturnValue = 0.00;
                    for (int i = 0; i < dtVoid.Rows.Count; i++)
                    {
                        if (dtVoid.Rows[i]["party_no"].ToString() == "2")
                        {
                            tCashReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());

                        }
                        else if (dtVoid.Rows[i]["party_no"].ToString() == "14")
                        {
                            tNETSReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());

                        }
                    }

                    //parthi Coding--
                    // SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),smas_NetAmount) as Amount from salmas_table where smas_rtno=0 and smas_name='Cash Sales' and smas_billdate=(SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table where Id=(select EndOfDayId from NumberTable))", con);
                    //Anbu Change Coding:
                    // SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where smas_rtno=0  and smas_Cancel<>1 and smas_billdate=(SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt", con);

                    string tCmd = "";
                    if (cmbCounterName.Text == "All Counter")
                    {
                        tCmd = "select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where  smas_rtno=0  and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt";
                    }
                    else
                    {
                        // tCmd = "select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_rtno=0  and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt";
                        tCmd = "select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_rtno=0  and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt";
                    }
                    SqlCommand cmd = new SqlCommand(tCmd, con);
                    cmd.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);

                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtCash);
                    gridItemsManager.DataSource = dtCash.DefaultView;
                    double tTotal = 0.00;
                    for (int i = 0; i < dtCash.Rows.Count; i++)
                    {
                        tTotal += (dtCash.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCash.Rows[i]["Amount"].ToString());
                    }
                    dtCash.Rows.Add("", "", "");
                    dtCash.Rows.Add("Total ", "", string.Format("{0:0.00}", tTotal));

                    if (tCashReturnValue > 0)
                    {
                        //  dtCash.Rows.Add("", "", "");
                        dtCash.Rows.Add("Return Item Amount(-)", "", string.Format("{0:0.00}", tCashReturnValue));
                        dtCash.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal - tCashReturnValue)));
                    }

                    if (cmbCounterName.Text == "All Counter")
                    {
                        tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where  smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                    }
                    else
                    {
                        tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                    }
                    DataTable dtDiscountAmt = new DataTable();
                    dtDiscountAmt.Rows.Clear();
                    SqlCommand cmdDiscount = new SqlCommand(tCmd, con);
                    cmdDiscount.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    cmdDiscount.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                    SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                    adpDiscount.Fill(dtDiscountAmt);
                    double tDiscountAmt = 0.00;
                    //if (dtDiscountAmt.Rows.Count > 0)
                    //{
                    //    tDiscountAmt = (string.IsNullOrEmpty(Convert.ToString(dtDiscountAmt.Rows[0]["DiscountAmt"])) == true) ? 0 : Convert.ToDouble(Convert.ToString(dtDiscountAmt.Rows[0]["DiscountAmt"]));
                    //    dtCash.Rows.Add("Discount Amount", "", string.Format("{0:0.00}", tDiscountAmt));
                    //    // dtCash.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal - tCashReturnValue)-tDiscountAmt));
                    //}
                    gridItemsManager.Columns[0].Width = 150;
                    gridItemsManager.Columns[1].Width = 120;
                    gridItemsManager.Columns[2].Width = 120;
                    this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

                    funPrintHeaderPart();
                    charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                    topLine1 = "CASH SALES REPORT";
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }
                    //break;
                    //    }



                    //}

                    //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                    //{
                    //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                    topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }

                    //}

                    //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                    //{
                    //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                    topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }

                    topLine1 = "Report Counter : " + cmbCounterName.Text;
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }

                    //}

                    ////Print Line Below Header
                    //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                    //{
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    //    }

                    //    // print lint below logo
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    //    {
                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    //dtPrint.Rows[i4]["Property"].ToString();
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }
                    //}

                    ////receipt No  double location = 0.00;
                    //for (int i5 = 0; i5 < dtPrint.Rows.Count - 1; i5++)
                    //{
                    //    if (dtPrint.Rows[i5]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i5]["Property"].ToString();
                    //    }

                    ////   double location = 0.00;
                    string tempStr = null;
                    //if (dtPrint.Rows[i5]["Describ"].ToString() == "Print Qunatity and Rate")
                    //{
                    string tQtyHeading = "";
                    tQtyHeading = "BillNo";
                    //  mainStr += tQtyHeading;
                    double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 18));
                    for (int j = 0; j < chkCount; j++)
                    {
                        tQtyHeading += " ";
                    }
                    tQtyHeading += " Time  ";
                    // tQtyHeading += "U/Rate ";
                    tQtyHeading += "   Amount";
                    mainStr += tQtyHeading;
                    mainStr += "\n";
                    //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                    //{
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    //    }

                    //    // print lint below logo
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    //    {
                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    //dtPrint.Rows[i4]["Property"].ToString();
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }
                    //}
                    for (int mn = 0; mn < dtCash.Rows.Count; mn++)
                    //foreach (DataRow row in dgsales.Rows)
                    {
                        // object[] array = dgsales.Rows[mn].;
                        bool isChk = false;
                        //for (int z = 0; z < 4; z++)
                        //{
                        //    if (dtItemProfit.Rows[mn][z].ToString().Trim() == "")
                        //    {
                        //        isChk = true;
                        //        break;
                        //    }
                        //}
                        if (isChk == false)
                        {
                            for (int i = 0; i < 3; i++)
                            {
                                tempStr = dtCash.Rows[mn][i].ToString();
                                //  MessageBox.Show(tempStr.Length.ToString());
                                findCenterPosition = (double.Parse(charPerLine) - 20);
                                if (i == 0)
                                {
                                    if (tempStr.Length <= (int)findCenterPosition)
                                    {
                                        mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                    }
                                    else
                                    {
                                        string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                        //    MessageBox.Show(temp);
                                        int chkSpace = temp.LastIndexOf(" ");
                                        int loc = (temp.Length - temp.LastIndexOf(" "));
                                        //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                        if (chkSpace != -1)
                                        {
                                            mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                            //   MessageBox.Show(mainStr.ToString());
                                            for (int j = 0; j < loc + 20; j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += "\n";
                                            string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                            // mainStr += temp1;
                                            if (temp1.Length <= (int)findCenterPosition)
                                            {
                                                mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                            }
                                        }
                                        else
                                        {
                                            mainStr += temp.ToString();
                                        }

                                    }
                                }

                                if (i == 1)
                                {
                                    if (tempStr.Length < 11)
                                    {
                                        mainStr += tempStr.PadRight(10, ' ');
                                    }
                                }
                                if (i == 10)
                                {
                                    // mainStr += tempStr.PadRight(7, ' ');
                                    if (tempStr.Length <= 7)
                                    {
                                        mainStr += tempStr.PadLeft(7, ' ');
                                    }
                                }
                                if (i == 2)
                                {
                                    if (tempStr.Length <= 10)
                                    {
                                        mainStr += tempStr.PadLeft(10, ' ');
                                    }
                                }
                                // tPrintText += tempStr;
                            }
                            mainStr += "\n";
                        }
                    }
                    //    }
                    //}



                    //// lblPrint.Content = mainStr;
                    ////Print Line Below Header
                    //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                    //{
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    //    }

                    //    // print lint below logo
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    //    {
                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    //dtPrint.Rows[i4]["Property"].ToString();
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }
                    //}
                    //listDisplay.Items.Add(mainStr);
                }
                catch (Exception ex)
                {
                    MyMessageBox.ShowBox(ex.ToString(), "Warning");
                    //_Class.clsVariables.funException(ex);
                }
            }
            //else
            //{
            //    MyMessageBox.ShowBox("You are not having permission","Message");
            //}
        }

        private void btnNETSReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                mainStr = "";
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                gridItemsManager.ColumnHeadersVisible = true;
                // DataTable dtNew = new DataTable();
                dtNETS.Rows.Clear();

                //Return Item Values
                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();
                //SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=@tCounter and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno, party_no", con);
                //cmdVoid.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);

                string tCmdVoid = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where  Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno, party_no";
                }
                else
                {
                    tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno, party_no";
                }
                SqlCommand cmdVoid = new SqlCommand(tCmdVoid, con);
                cmdVoid.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                cmdVoid.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);
                double tCashReturnValue = 0.00;
                double tNETSReturnValue = 0.00;
                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    if (dtVoid.Rows[i]["party_no"].ToString() == "2")
                    {
                        tCashReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                    else if (dtVoid.Rows[i]["party_no"].ToString() == "14")
                    {
                        tNETSReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                }


                //Parthi Write Coding
                //SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),smas_NetAmount) as Amount from salmas_table where smas_rtno=0 and smas_name='NETS' and smas_billdate=(SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table where Id=(select EndOfDayId from NumberTable))", con);

                //Anbu Write Coding:
                //SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where smas_rtno=0 and smas_Cancel<>1 and smas_billdate=(SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,SalRecv_Amt,salmas_table.smas_billtime ", con);
                string tCmd = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmd = "select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where smas_rtno=0 and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,SalRecv_Amt,salmas_table.smas_billtime ";
                }
                else
                {
                    tCmd = "select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_rtno=0 and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,SalRecv_Amt,salmas_table.smas_billtime ";
                }
                SqlCommand cmd = new SqlCommand(tCmd, con);
                cmd.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtNETS);
                gridItemsManager.DataSource = dtNETS.DefaultView;
                double tTotal = 0.00;
                for (int i = 0; i < dtNETS.Rows.Count; i++)
                {
                    tTotal += (dtNETS.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtNETS.Rows[i]["Amount"].ToString());
                    //tTotal += (dtNETS.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtNETS.Rows[i]["Amount"].ToString());
                }
                dtNETS.Rows.Add("", "", "");
                dtNETS.Rows.Add("Total", "", string.Format("{0:0.00}", tTotal));

                if (tNETSReturnValue > 0)
                {
                    //  dtCash.Rows.Add("", "", "");
                    dtNETS.Rows.Add("Return Item Amount", "", string.Format("{0:0.00}", tNETSReturnValue));
                    dtNETS.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal - tNETSReturnValue)));
                }

                if (cmbCounterName.Text == "All Counter")
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where  smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                }
                else
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                }
                DataTable dtDiscountAmt = new DataTable();
                dtDiscountAmt.Rows.Clear();
                SqlCommand cmdDiscount = new SqlCommand(tCmd, con);
                cmdDiscount.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                adpDiscount.Fill(dtDiscountAmt);
                double tDiscountAmt = 0.00;
                //if (dtDiscountAmt.Rows.Count > 0)
                //{
                //    tDiscountAmt = (string.IsNullOrEmpty(Convert.ToString(dtDiscountAmt.Rows[0]["DiscountAmt"])) == true) ? 0 : Convert.ToDouble(Convert.ToString(dtDiscountAmt.Rows[0]["DiscountAmt"]));
                //    dtNETS.Rows.Add("Discount Amount", "", string.Format("{0:0.00}", tDiscountAmt));
                //    //         dtCash.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal - tNETSReturnValue) - tDiscountAmt));
                //}
                gridItemsManager.Columns[0].Width = 150;
                gridItemsManager.Columns[1].Width = 120;
                gridItemsManager.Columns[2].Width = 120;
                this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;


                //for (int i1 = 0; i1 < dtPrint.Rows.Count - 1; i1++)
                //{
                //    if (dtPrint.Rows[i1]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i1]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i1]["Describ"].ToString() == "Print Line Below Logo")
                //    {
                //        lineBelowLogo = dtPrint.Rows[i1]["Property"].ToString();
                //        if (lineBelowLogo == "No Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += " ";
                //            }
                //            mainStr += "\n";
                //        }
                //        if (lineBelowLogo == "Single Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += "-";
                //            }
                //            mainStr += "\n";
                //        }
                //        else if (lineBelowLogo == "Double Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += "=";
                //            }
                //            mainStr += "\n";
                //        }
                //        break;
                //    }
                //}

                ////top design start
                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                //    }

                //    // Top Line1
                //    //  topLine1="";
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 1")
                //    {
                //        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                //        {
                //            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                //            {
                //                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line1")
                //                {
                //                    topLine1 = dtPrint.Rows[k]["Property"].ToString();
                //                    if (topLine1.Length <= double.Parse(charPerLine))
                //                    {
                //                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                //                        if (findCenterPosition % 2 == 0)
                //                        {
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine1;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine1;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        mainStr += "\n";
                //                    }
                //                    break;
                //                }
                //            }
                //        }

                //    }

                //    // Top Line2
                //    // topLine1="";
                //    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 2")
                //    {
                //        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                //        {
                //            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                //            {
                //                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line2")
                //                {
                //                    topLine2 = dtPrint.Rows[k]["Property"].ToString();
                //                    if (topLine2.Length <= double.Parse(charPerLine))
                //                    {
                //                        findCenterPosition = (double.Parse(charPerLine) - topLine2.Length);
                //                        if (findCenterPosition % 2 == 0)
                //                        {
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine2;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine2;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        mainStr += "\n";
                //                    }
                //                    break;
                //                }
                //            }
                //        }
                //    }

                //    // Top Line3
                //    // topLine1 = "";
                //    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 3")
                //    {
                //        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                //        {
                //            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                //            {
                //                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line3")
                //                {
                //                    topLine3 = dtPrint.Rows[k]["Property"].ToString();
                //                    if (topLine3.Length <= double.Parse(charPerLine))
                //                    {
                //                        findCenterPosition = (double.Parse(charPerLine) - topLine3.Length);
                //                        if (findCenterPosition % 2 == 0)
                //                        {
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine3;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine3;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        mainStr += "\n";
                //                    }
                //                    break;
                //                }
                //            }
                //        }
                //    }


                //    // Top Line4
                //    //topLine1 = "";
                //    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 4")
                //    {
                //        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                //        {
                //            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                //            {
                //                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line4")
                //                {
                //                    topLine4 = dtPrint.Rows[k]["Property"].ToString();
                //                    if (topLine4.Length <= double.Parse(charPerLine))
                //                    {
                //                        findCenterPosition = (double.Parse(charPerLine) - topLine4.Length);
                //                        if (findCenterPosition % 2 == 0)
                //                        {
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine4;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine4;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        mainStr += "\n";
                //                    }
                //                    break;
                //                }
                //            }
                //        }
                //    }

                //   // Top Line5
                //    // topLine1 = "";
                //    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 5")
                //    {
                //        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                //        {
                //            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                //            {
                //                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line5")
                //                {
                //                    topLine5 = dtPrint.Rows[k]["Property"].ToString();
                //                    if (topLine5.Length <= double.Parse(charPerLine))
                //                    {
                //                        findCenterPosition = (double.Parse(charPerLine) - topLine5.Length);
                //                        if (findCenterPosition % 2 == 0)
                //                        {
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine5;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine5;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        mainStr += "\n";
                //                    }
                //                    break;
                //                }
                //            }
                //        }
                //    }



                //}
                ////header design start
                //for (int i2 = 0; i2 < dtPrint.Rows.Count - 1; i2++)
                //{
                //    if (dtPrint.Rows[i2]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i2]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i2]["Describ"].ToString() == "Print Line Below Header")
                //    {
                //        lineBelowLogo = dtPrint.Rows[i2]["Property"].ToString();
                //        if (lineBelowLogo == "No Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += " ";
                //            }
                //            mainStr += "\n";
                //        }
                //        if (lineBelowLogo == "Single Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += "-";
                //            }
                //            mainStr += "\n";
                //        }
                //        else if (lineBelowLogo == "Double Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += "=";
                //            }
                //            mainStr += "\n";
                //        }
                //        break;
                //    }
                //}
                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();

                funPrintHeaderPart();
                charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                topLine1 = "NETS SALES AMOUNT REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}

                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();

                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}

                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}


                ////Print Line Below Header
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}
                ////receipt No 
                //// double location = 0.00;
                string tempStr = null;
                //for (int i5 = 0; i5 < dtPrint.Rows.Count - 1; i5++)
                //{
                //    if (dtPrint.Rows[i5]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i5]["Property"].ToString();
                //    }
                //    if (dtPrint.Rows[i5]["Describ"].ToString() == "Print Qunatity and Rate")
                //    {
                string tQtyHeading = "";
                tQtyHeading = "BillNo";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 18));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += " Time  ";
                // tQtyHeading += "U/Rate ";
                tQtyHeading += "   Amount";
                mainStr += tQtyHeading;
                mainStr += "\n";
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                for (int mn = 0; mn < dtNETS.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;
                    //for (int z = 0; z < 4; z++)
                    //{
                    //    if (dtItemProfit.Rows[mn][z].ToString().Trim() == "")
                    //    {
                    //        isChk = true;
                    //        break;
                    //    }
                    //}
                    if (isChk == false)
                    {
                        for (int i = 0; i < 3; i++)
                        {
                            tempStr = dtNETS.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 20);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 20; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 11)
                                {
                                    mainStr += tempStr.PadRight(10, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 2)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }
                //    }
                //}

                //// lblPrint.Content = mainStr;
                ////Print Line Below Header
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";

                }
                //        break;
                //    }
                //}
                ////  listDisplay.Items.Add(mainStr);
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
                //_Class.clsVariables.funException(ex);

            }
        }
        DataTable dt_selecttable = new DataTable();
        DataTable dtGroupReport = new DataTable();
        private void btnItemReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                gridItemsManager.ColumnHeadersVisible = true;
                gridItemsManager.DataSource = null;
                dt_selecttable.Rows.Clear();
                dt_griddiaplay.Rows.Clear();
                mainStr = "";
                listDisplay.Items.Clear();
                //   SqlCommand cmd_selectquery = new SqlCommand(@"SELECT   dbo.Item_table.Item_name as ItemName, Sum(dbo.stktrn_table.nt_qty)  as Qty,convert(numeric(18,2),(dbo.stktrn_table.Rate)) as Rate, 
                //         convert(numeric(18,2),sum(dbo.stktrn_table.Rate * dbo.stktrn_table.nt_qty)) as Amount FROM         dbo.Item_table INNER JOIN
                //         dbo.stktrn_table ON dbo.Item_table.Item_no = dbo.stktrn_table.item_no
                //         where stktrn_table.strn_type='1' and stktrn_table.strn_date=(select convert(date,DATEADD(DAY,1,EndOfDay),103) from Endofday_table where Strn_Cancel<>1 and id=(select MAX(Id) from EndOfDay_Table)) group By dbo.Item_table.Item_name,dbo.stktrn_table.Rate", con);

                string tCmd_SelectQuery = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmd_SelectQuery = @"SELECT   dbo.Item_table.Item_name as ItemName, Sum(stktrn_table.nt_qty- stktrn_table.rnt_qty)  as Qty,convert(numeric(18,2),(dbo.stktrn_table.Rate)) as Rate, 
                      convert(numeric(18,2),sum((Amount/nt_Qty)*(stktrn_table.nt_qty-rnt_Qty))) as Amount FROM         dbo.Item_table INNER JOIN
                      dbo.stktrn_table ON dbo.Item_table.Item_no = dbo.stktrn_table.item_no
                      where stktrn_table.strn_type='1' and stktrn_table.Strn_Cancel=0 and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_rtno=0 and stktrn_table.strn_date=@tDate group By dbo.Item_table.Item_name,dbo.stktrn_table.Rate";
                }
                else
                {
                    tCmd_SelectQuery = @"SELECT   dbo.Item_table.Item_name as ItemName, Sum(stktrn_table.nt_qty- stktrn_table.rnt_qty)  as Qty,convert(numeric(18,2),(dbo.stktrn_table.Rate)) as Rate, 
                      convert(numeric(18,2),sum((Amount/nt_Qty)*(stktrn_table.nt_qty-rnt_Qty))) as Amount FROM         dbo.Item_table INNER JOIN
                      dbo.stktrn_table ON dbo.Item_table.Item_no = dbo.stktrn_table.item_no
                      where stktrn_table.Ctr_no=(Select ctr_no from counter_table where ctr_name=@tCounter) and stktrn_table.strn_type='1' and stktrn_table.Strn_Cancel=0 and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_rtno=0 and stktrn_table.strn_date=@tDate group By dbo.Item_table.Item_name,dbo.stktrn_table.Rate";
                }
                SqlCommand cmd_selectquery = new SqlCommand(tCmd_SelectQuery, con);
                cmd_selectquery.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmd_selectquery.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);

                //               SqlCommand cmd_selectquery = new SqlCommand(@"                      
                //                      select item_table.Item_name As ItemName,Convert(numeric(18,2),sum(stktrn_table.nt_qty)) As Qty,Convert(Numeric(18,2),Avg(stktrn_table.Rate)) As Rate,Convert(Numeric(18,2),((sum(stktrn_table.nt_qty))*Avg(stktrn_table.Rate))) As Amount from 
                //                      stktrn_table,Item_table where Item_table.Item_no=stktrn_table.item_no  and 
                //                      stktrn_table.strn_date=(select convert(date,DATEADD(DAY,1,EndOfDay),103) from Endofday_table where id=(select MAX(Id) from EndOfDay_Table)) group by stktrn_table.item_no,Item_table.Item_name ORDER BY Item_table.item_name ASC", con);
                SqlDataAdapter adp_select = new SqlDataAdapter(cmd_selectquery);

                adp_select.Fill(dt_selecttable);
                if (dt_selecttable.Rows.Count > 0)
                {
                    double tTotQty = 0, tTotProfit = 0, tTotRate = 0;
                    for (int i = 0; i < dt_selecttable.Rows.Count; i++)
                    {
                        if (dt_selecttable.Rows[i]["Qty"].ToString() != "")
                        {
                            tTotQty += (dt_selecttable.Rows[i]["Qty"].ToString() == "") ? 0.00 : double.Parse(dt_selecttable.Rows[i]["Qty"].ToString());
                            tTotRate += (dt_selecttable.Rows[i]["Rate"].ToString() == "") ? 0.00 : double.Parse(dt_selecttable.Rows[i]["Rate"].ToString());
                            tTotProfit += (dt_selecttable.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dt_selecttable.Rows[i]["Amount"].ToString());
                        }
                    }
                    dt_selecttable.Rows.Add("", "", "", "");
                    dt_selecttable.Rows.Add("Total", tTotQty, string.Format("{0:0.00}", tTotRate), string.Format("{0:0.00}", tTotProfit));

                    string tCmd = "";
                    if (cmbCounterName.Text == "All Counter")
                    {
                        tCmd = @"select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as DiscountAmt from 
(Select SUM(disc_amt+Othdisc_Amt+spl_discamt) as Disc from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date =@tDate ) as Disc1,
(Select SUM(disc_amt+Othdisc_Amt+spl_discamt) as RDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date =@tDate ) as Disc2";
                    }
                    else
                    {
                        //   tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_Cancel<>1 and smas_billdate=@tDate )";
                        tCmd = @"select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as DiscountAmt from 
(Select SUM(disc_amt+Othdisc_Amt+spl_discamt) as Disc from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date =@tDate and ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter)) as Disc1,
(Select SUM(disc_amt+Othdisc_Amt+spl_discamt) as RDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date =@tDate and ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter)) as Disc2";
                    }
                    DataTable dtDiscountAmt = new DataTable();
                    dtDiscountAmt.Rows.Clear();
                    SqlCommand cmdDiscount = new SqlCommand(tCmd, con);
                    cmdDiscount.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    cmdDiscount.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                    //cmdDiscount.Parameters.AddWithValue("@tCounter", null);
                    SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                    adpDiscount.Fill(dtDiscountAmt);
                    //double tDiscountAmt = 0.00;
                    //if (dtDiscountAmt.Rows.Count > 0)
                    //{
                    //    tDiscountAmt = (string.IsNullOrEmpty(Convert.ToString(dtDiscountAmt.Rows[0]["DiscountAmt"])) == true) ? 0 : Convert.ToDouble(Convert.ToString(dtDiscountAmt.Rows[0]["DiscountAmt"]));
                    //    dt_selecttable.Rows.Add("Discount Amount(-)", "", "", string.Format("{0:0.00}", tDiscountAmt));
                    //    dt_selecttable.Rows.Add("Total Amount", "", "", string.Format("{0:0.00}", tTotProfit - tDiscountAmt));
                    //}

                    gridItemsManager.DataSource = dt_selecttable.DefaultView;
                    gridItemsManager.Columns[0].Width = 210;
                    gridItemsManager.Columns[1].Width = 60;
                    gridItemsManager.Columns[2].Width = 60;
                    gridItemsManager.Columns[3].Width = 60;
                    this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                    this.gridItemsManager.Columns[3].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                    //dt_griddiaplay.Rows.Clear();
                    //for (int i = 0; i < dt_selecttable.Rows.Count; i++)
                    //{
                    //    //gridItems.Rows.Add();
                    //    //gridItems.Rows[i].Cells["Column1"].Value=dt_selecttable.Rows[i][0].ToString();
                    //    //gridItems.Rows[i].Cells["Column2"].Value=dt_selecttable.Rows[i][1].ToString();
                    //    //gridItems.Rows[i].Cells["Column3"].Value =dt_selecttable.Rows[i][2].ToString();
                    //}
                }


                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                funPrintHeaderPart();
                charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                topLine1 = "ITEMS SALES STOCK REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}

                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}
                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}

                ////Print Line Below Header
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                //// ds.Tables.Clear();
                //// double location = 0.00;
                string tempStr = null;
                //for (int i1 = 0; i1 < dtPrint.Rows.Count - 1; i1++)
                //{
                //    if (dtPrint.Rows[i1]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i1]["Property"].ToString();
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 22));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += "  Qty  ";
                tQtyHeading += "U/Rate ";
                tQtyHeading += " Amount";
                mainStr += tQtyHeading;
                mainStr += "\n";
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}

                for (int mn = 0; mn < dt_selecttable.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;
                    for (int z = 0; z < 4; z++)
                    {
                        if (dt_selecttable.Rows[mn][z].ToString().Trim() == "")
                        {
                            isChk = true;
                            break;
                        }
                    }
                    if (isChk == false)
                    {
                        for (int i = 0; i < 4; i++)
                        {
                            tempStr = dt_selecttable.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 22);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)double.Parse(charPerLine)) < tempStr.Length) ? (int)(double.Parse(charPerLine)) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                        else
                                        {
                                            mainStr += temp1.Substring(0, (int)findCenterPosition);
                                        }
                                    }
                                    else
                                    {
                                        //Without Space Prev Code
                                        mainStr += temp.ToString();
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.Length), ((tempStr.Length - temp.Length) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                        else
                                        {
                                            mainStr += temp1.Substring(0, (int)findCenterPosition);
                                        }
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadRight(7, ' ');
                                }
                            }
                            if (i == 2)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 3)
                            {
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }
                //      }
                //   }
                //string tQtyHeading = "";
                //tQtyHeading = "Particulars";
                ////  mainStr += tQtyHeading;
                //double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 22));
                //for (int j = 0; j < chkCount; j++)
                //{
                //    tQtyHeading += " ";
                //}
                //tQtyHeading += "  Qty  ";
                //tQtyHeading += "U/Rate ";
                //tQtyHeading += " Amount";
                //mainStr += tQtyHeading;
                //mainStr += "\n";
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                //        lineBelowLogo = dtPrint.Rows[i4]["Property"].ToString();
                //        if (lineBelowLogo == "No Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += " ";
                //            }
                //            mainStr += "\n";
                //        }
                //        if (lineBelowLogo == "Single Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += "-";
                //            }
                //            mainStr += "\n";
                //        }
                //        else if (lineBelowLogo == "Double Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += "=";
                //            }
                //            mainStr += "\n";
                //        }
                //    }
                //}

                //for (int mn = 0; mn < dt_selecttable.Rows.Count; mn++)
                ////foreach (DataRow row in dgsales.Rows)
                //{
                //    // object[] array = dgsales.Rows[mn].;
                //    bool isChk = false;
                //    if (isChk == false)
                //    {
                //        for (int i = 0; i < 4; i++)
                //        {
                //            tempStr = dt_selecttable.Rows[mn][i].ToString();
                //            //  MessageBox.Show(tempStr.Length.ToString());
                //            findCenterPosition = (double.Parse(charPerLine) - 22);
                //            if (i == 0)
                //            {
                //                if (tempStr.Length <= (int)findCenterPosition)
                //                {
                //                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                //                }
                //                else
                //                {
                //                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                //                    //    MessageBox.Show(temp);
                //                    int chkSpace = temp.LastIndexOf(" ");
                //                    int loc = (temp.Length - temp.LastIndexOf(" "));
                //                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                //                    if (chkSpace != -1)
                //                    {
                //                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                //                        //   MessageBox.Show(mainStr.ToString());
                //                        for (int j = 0; j < loc + 18; j++)
                //                        {
                //                            mainStr += " ";
                //                        }
                //                        mainStr += "\n";
                //                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                //                        // mainStr += temp1;
                //                        if (temp1.Length <= (int)findCenterPosition)
                //                        {
                //                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                //                        }
                //                    }
                //                    else
                //                    {
                //                        mainStr += temp.ToString();
                //                    }

                //                }
                //            }

                //            if (i == 1)
                //            {
                //                if (tempStr.Length < 8)
                //                {
                //                    mainStr += tempStr.PadRight(7, ' ');
                //                }
                //            }
                //            if (i == 2)
                //            {
                //                // mainStr += tempStr.PadRight(7, ' ');
                //                if (tempStr.Length <= 7)
                //                {
                //                    mainStr += tempStr.PadLeft(7, ' ');
                //                }
                //            }
                //            if (i == 3)
                //            {
                //                if (tempStr.Length <= 8)
                //                {
                //                    mainStr += tempStr.PadLeft(8, ' ');
                //                }
                //            }
                //            // tPrintText += tempStr;
                //        }
                //        mainStr += "\n";
                //    }
                //}








                // lblPrint.Content = mainStr;
                //Print Line Below Header
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                // listDisplay.Items.Add(mainStr);

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
                // _Class.clsVariables.funException(ex);
            }
        }
        DataSet ds = new DataSet();

        private void btnFinished_Click(object sender, RoutedEventArgs e)
        {
            //FrmMain frm = new FrmMain();
            ////this.Hide();
            //frm.Show();
            if (UCFrmManagerMainEvent_Finished != null)
            {
                UCFrmManagerMainEvent_Finished();
            }
        }

        private void btnReport_Click(object sender, RoutedEventArgs e)
        {
            //dt_selecttable.Rows.Clear();
            if (_Class.clsVariables.tViewCash == true)
            {
                tPrintingType = "";
                lblTitle.Content = "ALL MINI REPORTS";

                pnlCommon.Visibility = Visibility.Visible;
                pnlCounterBtn.Visibility = Visibility.Hidden;
                pnlPaymentReport.Visibility = Visibility.Hidden;

                pnlCounterBtn.Visibility = Visibility.Hidden;
                pnlCommon.Visibility = Visibility.Visible;
                pnlCashDrawer.Visibility = Visibility.Collapsed;
                pnlProfitReport.Visibility = Visibility.Collapsed;
                pnlEndOfDay.Visibility = Visibility.Collapsed;
                pnlReport.Visibility = Visibility.Visible;
                Uccommission.Visibility = Visibility.Hidden;
                // pnlGroupCommissionReport.Visibility = Visibility.Visible;
            }
            else
            {
                MyMessageBox.ShowBox("You are not have permission", "Message");
            }

        }

        string strUsr;
        public void funPrintHeaderPart()
        {
            mainStr = "";
            charPerLine = _Class.clsVariables.tempGCharactersPerLine;
            lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowLogo;

            if (lineBelowLogo == "No Line")
            {
                mainStr += "".PadLeft(Convert.ToInt16(double.Parse(charPerLine)), ' ');
                mainStr += "\n";
                // break;
            }
            if (lineBelowLogo == "Single Line")
            {
                mainStr += "".PadLeft(Convert.ToInt16(double.Parse(charPerLine)), '-');
                mainStr += "\n";
                // break;
            }
            else if (lineBelowLogo == "Double Line")
            {
                mainStr += "".PadLeft(Convert.ToInt16(double.Parse(charPerLine)), '=');
                mainStr += "\n";
                // break;
            }
            if (_Class.clsVariables.tempGPrintTopLine1 == "Yes")
            {

                topLine1 = _Class.clsVariables.tempGTopLine1;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                        mainStr += topLine1;
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                    }
                    else
                    {
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2) + 1), ' ');
                        mainStr += topLine1;
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                    }
                    mainStr += "\n";
                }
                // break;

            }

            if (_Class.clsVariables.tempGPrintTopLine2 == "Yes")
            {
                topLine2 = _Class.clsVariables.tempGTopLine2;
                if (topLine2.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine2.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                        mainStr += topLine2;
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                    }
                    else
                    {
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2) + 1), ' ');
                        mainStr += topLine2;
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                    }
                    mainStr += "\n";
                }
                //  break;
            }

            if (_Class.clsVariables.tempGPrintTopLine3 == "Yes")
            {

                topLine3 = _Class.clsVariables.tempGTopLine3;
                if (topLine3.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine3.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                        mainStr += topLine3;
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                    }
                    else
                    {
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2) + 1), ' ');
                        mainStr += topLine3;
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                    }
                    mainStr += "\n";
                    //  break;
                }
            }

            if (_Class.clsVariables.tempGPrintTopLine4 == "Yes")
            {

                topLine4 = _Class.clsVariables.tempGTopLine4;
                if (topLine4.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine4.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                        mainStr += topLine4;
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                    }
                    else
                    {
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2) + 1), ' ');
                        mainStr += topLine4;
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                    }
                    mainStr += "\n";
                    //  break;
                }
            }
            if (_Class.clsVariables.tempGPrintTopLine5 == "Yes")
            {
                topLine5 = _Class.clsVariables.tempGTopLine5;
                if (topLine5.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine5.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                        mainStr += topLine5;
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                    }
                    else
                    {
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2) + 1), ' ');
                        mainStr += topLine5;
                        mainStr += "".PadLeft(Convert.ToInt16((findCenterPosition / 2)), ' ');
                    }
                    mainStr += "\n";
                }

            }

            // print lint below logo

            lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
            if (lineBelowLogo == "No Line")
            {
                mainStr += "".PadLeft(Convert.ToInt16(double.Parse(charPerLine)), ' ');
                mainStr += "\n";
            }
            if (lineBelowLogo == "Single Line")
            {
                mainStr += "".PadLeft(Convert.ToInt16(double.Parse(charPerLine)), '-');
                mainStr += "\n";
            }
            else if (lineBelowLogo == "Double Line")
            {
                mainStr += "".PadLeft(Convert.ToInt16(double.Parse(charPerLine)), '=');
                mainStr += "\n";
            }

        }
        DateTime currentDate;
        // string mainStrSub = "";
        private void btnCashDrawer_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                dpBillDate.SelectedDate = currentDate;
                dpBillDate.DisplayDateStart = new DateTime(2014, 09, 18);
                dpBillDate.DisplayDateEnd = currentDate;
                gridItemsManager.ColumnHeadersVisible = false;
                dt_griddiaplay.Rows.Clear();
                dt_selecttable.Rows.Clear();
                // funConnectionStateCheck();
                ds.Tables.Clear();
                lblTitle.Content = "CASH DRAWER";

                pnlCommon.Visibility = Visibility.Visible;
                pnlCounterBtn.Visibility = Visibility.Hidden;
                pnlPaymentReport.Visibility = Visibility.Hidden;

                pnlReport.Visibility = Visibility.Collapsed;
                pnlProfitReport.Visibility = Visibility.Collapsed;
                pnlEndOfDay.Visibility = Visibility.Collapsed;
                pnlCounterBtn.Visibility = Visibility.Hidden;
                pnlCommon.Visibility = Visibility.Visible;
                pnlCashDrawer.Visibility = Visibility.Visible;
                pnlProfitReport.Visibility = Visibility.Collapsed;
                Uccommission.Visibility = Visibility.Hidden;

                DataTable dtNewList1 = new DataTable();
                dtNewList1.Rows.Clear();
                // funConnectionStateCheck();
                SqlCommand cmdEnableReset1 = new SqlCommand("Select * from BeginCashDrawer_table where Ctr_no=(Select Ctr_no from User_table where User_no=@tValue) and  Date=(Select CONVERT(date,Dateadd(day,1,EndOfDay),103) from EndOfDay_Table where Id=(Select EndOfDayId from NumberTable))", con);
                //cmdEnableReset1.CommandType = CommandType.StoredProcedure;
                //cmdEnableReset1.Parameters.AddWithValue("@tActionType", "ACTIVENEWMAIN");
                cmdEnableReset1.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);

                SqlDataAdapter adp1112 = new SqlDataAdapter(cmdEnableReset1);
                adp1112.Fill(dtNewList1);

                if (dtNewList1.Rows.Count > 0)
                {

                    DataTable dtNewList = new DataTable();
                    dtNewList.Rows.Clear();
                    // funConnectionStateCheck();
                    SqlCommand cmdEnableReset = new SqlCommand("Select * from beginCashDrawerActive_table where Ctr_no=(select Ctr_no from User_table where User_no=@tValue)", con);
                    //cmdEnableReset.CommandType = CommandType.StoredProcedure;
                    //cmdEnableReset.Parameters.AddWithValue("@tActionType", "ACTIVENEW");
                    cmdEnableReset.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);

                    SqlDataAdapter adp = new SqlDataAdapter(cmdEnableReset);
                    adp.Fill(dtNewList);

                    for (int mn = 0; mn < dtNewList.Rows.Count; mn++)
                    {
                        if (dtNewList.Rows[mn][0].ToString() == "1")
                        {
                            btnBeginCashDrawer.IsEnabled = true;
                            //munies
                            //btnResetDrawer.IsEnabled = false;
                            // btnEndOfDayDrawer.IsEnabled = false;
                            btnCounterSettle.IsEnabled = false;
                        }
                        else
                        {
                            btnBeginCashDrawer.IsEnabled = false;
                            //munies
                            //btnResetDrawer.IsEnabled = true;
                            btnEndOfDayDrawer.IsEnabled = true;
                            btnCounterSettle.IsEnabled = true;
                            break;
                        }
                    }
                    if (dtNewList.Rows.Count == 0)
                    {
                        btnBeginCashDrawer.IsEnabled = true;
                        //munies
                        //btnResetDrawer.IsEnabled = false;
                        /// btnEndOfDayDrawer.IsEnabled = false;
                        btnCounterSettle.IsEnabled = false;
                    }
                }
                else
                {
                    btnBeginCashDrawer.IsEnabled = true;
                    //munies
                    //btnResetDrawer.IsEnabled = false;
                    // btnEndOfDayDrawer.IsEnabled = false;
                    btnCounterSettle.IsEnabled = false;
                }



                //Single Procedure code start

                // con.Close(); con.Open();
                DataTable dtNew1 = new DataTable();
                dtNew1.Rows.Clear();
                SqlCommand cmdEnd = new SqlCommand("sp_SalesCreationSelectSingle", con);
                cmdEnd.CommandType = CommandType.StoredProcedure;
                cmdEnd.Parameters.AddWithValue("@tActionType", "lblStartAmt");
                cmdEnd.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
                SqlDataAdapter adp1 = new SqlDataAdapter(cmdEnd);
                adp1.Fill(dtNew1);
                bool isChk = false;
                lblStartAmt.Content = "0.00";
                for (int mn = 0; mn < dtNew1.Rows.Count; mn++)
                {
                    isChk = true;
                    lblStartAmt.Content = String.Format("{0:0.00}", double.Parse(dtNew1.Rows[mn]["CoinTot_Amount"].ToString()));
                }
                if (isChk == false)
                {
                    lblStartAmt.Content = String.Format("{0:0.00}", double.Parse(lblStartAmt.Content.ToString()));
                }


                //con.Close(); con.Open();           
                //DataTable dtNew1 = new DataTable();
                //SqlCommand cmdEnd = new SqlCommand("sp_SalesCreationSelectSingle", con);
                //cmdEnd.CommandType = CommandType.StoredProcedure;
                //cmdEnd.Parameters.AddWithValue("@tActionType", "lblStartAmt");
                //cmdEnd.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
                //dr10 = cmdEnd.ExecuteReader();
                //dtNew1.Rows.Clear();
                //dtNew1.Load(dr10);
                //bool isChk = false;
                //for (int mn = 0; mn < dtNew1.Rows.Count; mn++)
                //{
                //    isChk = true;
                //    lblStartAmt.Content = String.Format("{0:0.00}", double.Parse(dtNew1.Rows[mn]["CoinTot_Amount"].ToString()));
                //}
                //if (isChk == false)
                //{
                //    lblStartAmt.Content = String.Format("{0:0.00}", double.Parse(lblStartAmt.Content.ToString()));
                //}

                DataTable dtNew2 = new DataTable();
                SqlCommand cmdLastReset = new SqlCommand("sp_SalesCreationSelectAll", con);
                cmdLastReset.CommandType = CommandType.StoredProcedure;
                cmdLastReset.Parameters.AddWithValue("@tActionType", "ENDOFDAY");
                SqlDataAdapter adp2 = new SqlDataAdapter(cmdLastReset);

                dtNew2.Rows.Clear();
                adp2.Fill(dtNew2);
                bool isChk1 = false;
                for (int mn = 0; mn < dtNew2.Rows.Count; mn++)
                {
                    isChk1 = true;
                    DateTime tDate = DateTime.Parse(dtNew2.Rows[mn][0].ToString());
                    lblLastReset.Content = dtNew2.Rows[mn][0].ToString();
                    currentDate = tDate.AddDays(1);
                }
                if (isChk1 == false)
                {
                    DateTime tDate = DateTime.Now;
                    lblLastReset.Content = tDate.AddDays(-1).ToString();
                    currentDate = tDate;
                }



                string date;
                //, year, month;
                //date  = currentDate.ToString().Substring(0, 2);
                //month  =currentDate.ToString().Substring(3, 2);
                //year = currentDate.ToString().Substring(6, 4);
                date = currentDate.ToString("yyyy-MM-dd");

                DataTable dtNew3 = new DataTable();
                SqlCommand adp31 = new SqlCommand("[sp_SalesCreationSelectSingle]", con);
                adp31.CommandType = CommandType.StoredProcedure;
                adp31.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
                adp31.Parameters.AddWithValue("@tActionType", "lblCashSalesTotal");
                SqlDataAdapter adp10 = new SqlDataAdapter(adp31);

                dtNew3.Rows.Clear();
                adp10.Fill(dtNew3);
                //   SqlCommand adp2 = new SqlCommand("Select sum(smas_netAmount) as Amt from SalMas_Table where party_no='2' and smas_billdate like '" + date  + "%'", con);


                lblCCashSalesTotal.Content = "0.00";
                if (dtNew3.Rows.Count > 0)
                {
                    if (dtNew3.Rows[0]["Amt"].ToString() != "")
                    {
                        double temp = double.Parse(dtNew3.Rows[0]["Amt"].ToString());
                        lblCCashSalesTotal.Content = String.Format("{0:0.00}", temp);
                    }

                    if (lblCCashSalesTotal.Content.ToString().Trim() == "")
                    {
                        lblCCashSalesTotal.Content = "0.00";
                    }
                }


                //Return Item Values
                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();
                SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=@tCounter and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno, party_no", con);
                cmdVoid.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);
                double tCashReturnValue = 0.00;
                double tNETSReturnValue = 0.00;
                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    if (dtVoid.Rows[i]["party_no"].ToString() == "2")
                    {
                        tCashReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                    else if (dtVoid.Rows[i]["party_no"].ToString() == "14")
                    {
                        tNETSReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                }




                double tPrevValue = 0;
                DataTable dtNew41 = new DataTable();
                SqlCommand adp311 = new SqlCommand("[sp_SalesCreationSelectSingle]", con);
                adp311.CommandType = CommandType.StoredProcedure;
                adp311.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
                adp311.Parameters.AddWithValue("@tActionType", "CashInDrawer");
                // dr = adp3.ExecuteReader();
                dtNew41.Rows.Clear();
                SqlDataAdapter adp111 = new SqlDataAdapter(adp311);
                adp111.Fill(dtNew41);
                if (dtNew41.Rows.Count > 0)
                {
                    if (string.IsNullOrEmpty(Convert.ToString(dtNew41.Rows[0]["PreviousDrawerCash"])))
                    {
                        tPrevValue = 0;
                    }
                    else
                    {
                        tPrevValue = double.Parse(dtNew41.Rows[0]["PreviousDrawerCash"].ToString());
                    }
                }
                lblCashInDrawer.Content = String.Format("{0:0.00}", (double.Parse(lblStartAmt.Content.ToString()) + (double.Parse(lblCCashSalesTotal.Content.ToString()) - (tPrevValue + tCashReturnValue))));
                DataTable dtNew4 = new DataTable();
                //Parthi Codeing
                ////SqlCommand adp3 = new SqlCommand("[sp_SalesCreationSelectSingle]", con);
                //adp3.CommandType = CommandType.StoredProcedure;
                //adp3.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
                //adp3.Parameters.AddWithValue("@tActionType", "lblNETSSalesTotal");
                // dr = adp3.ExecuteReader();

                //this is  Aanbucoding:
                SqlCommand adp3 = new SqlCommand("[sp_SalesCreationSelectSingle]", con);
                adp3.CommandType = CommandType.StoredProcedure;
                adp3.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
                adp3.Parameters.AddWithValue("@tActionType", "lblNETSSalesTotal");
                //SqlCommand adp3 = new SqlCommand("select Distinct (Strn_no) from stktrn_table,salmas_table where  stktrn_table.strn_rtno<>1 and  stktrn_table.strn_no=salmas_table.smas_no and stktrn_table.strn_date=(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable))", con);
                dtNew4.Rows.Clear();
                SqlDataAdapter adp11 = new SqlDataAdapter(adp3);
                adp11.Fill(dtNew4);
                // SqlCommand adp3 = new SqlCommand("Select sum(smas_netAmount) as Amt from SalMas_Table where party_no='14' and smas_billdate like '" + date  + "%'", con);
                lblCNETSSalesTotal.Content = "0.00";
                if (dtNew4.Rows.Count > 0)
                {
                    //PrathiCoding:
                    //if (dtNew4.Rows[0][0].ToString() != "")
                    //{
                    //    lblNETSSalesTotal.Content = String.Format("{0:0.00}", double.Parse(dtNew4.Rows[0][0].ToString()));
                    //}
                    //if (lblNETSSalesTotal.Content == "")
                    //{
                    //    lblNETSSalesTotal.Content = "0.00";
                    //}
                    //Anbu Coding Here:
                    double CashAmt = 0.00, NetsAmt = 0.00;
                    //  for (int i = 0; i < dtNew4.Rows.Count; i++)
                    {
                        //   SqlCommand cmd = new SqlCommand(@"select (Case When SalRecv_table.SalRecv_Led=14  Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) as NETs, (Case When SalRecv_table.SalRecv_Led=5 Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) As Cash from salmas_table,SalRecv_table  where smas_Cancel<>1 and smas_billdate =(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                        SqlCommand cmd = new SqlCommand(@"select (Case When SalRecv_table.SalRecv_Led=14  Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) as NETs, (Case When SalRecv_table.SalRecv_Led=5 Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) As Cash from salmas_table,SalRecv_table  where salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.ctr_no=(Select ctr_no from User_table where user_no=@tUserNo) and smas_Cancel<>1 and smas_billdate =(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                        cmd.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                        // lblNETSSalesTotal.Content = String.Format("{0:0.00}", double.Parse(dtNew4.Rows[0][0].ToString()));  
                        SqlDataAdapter aadp = new SqlDataAdapter(cmd);
                        DataTable SelNetsAndCash = new DataTable();
                        SelNetsAndCash.Rows.Clear();
                        aadp.Fill(SelNetsAndCash);
                        if (SelNetsAndCash.Rows.Count > 0)
                        {
                            for (int j = 0; j < SelNetsAndCash.Rows.Count; j++)
                            {
                                if (SelNetsAndCash.Rows[j]["Cash"].ToString().Trim() != "" && SelNetsAndCash.Rows[j]["Cash"].ToString().Trim() != null)
                                {
                                    CashAmt += Convert.ToDouble(SelNetsAndCash.Rows[j]["Cash"]);
                                }
                                if (SelNetsAndCash.Rows.Count > 1)
                                {
                                    if (SelNetsAndCash.Rows[j]["NETs"].ToString().Trim() != "" && SelNetsAndCash.Rows[j]["NETs"].ToString().Trim() != null)
                                    {
                                        NetsAmt += Convert.ToDouble(SelNetsAndCash.Rows[j]["NETs"]);
                                    }
                                }
                            }
                        }
                    }
                    //munies code


                    if (_Class.clsVariables.tViewCash == true)
                    {
                        lblCCashSalesTotal.Content = (CashAmt - tCashReturnValue).ToString("0.00");

                    }
                    else
                    {
                        lblCCashSalesTotal.Content = "0.00";
                        lblCashInDrawer.Content = "0.00";
                        lblLastReset.Content = "0.00";
                        lblCNETSSalesTotal.Content = "0.00";
                        lblCCreditCardSalesTotal.Content = "0.00";
                        lblCHouseACSalesTotal.Content = "0.00";
                        lblCVoucherSalesTotal.Content = "0.00";
                        lblCSalesmenTotal.Content = "0.00";
                    }

                    //lblCCashSalesTotal.Content = (CashAmt - tCashReturnValue).ToString("0.00");
                    if (_Class.clsVariables.tViewCash == true)
                        lblCNETSSalesTotal.Content = (NetsAmt - tNETSReturnValue).ToString("0.00");
                    else
                        lblCNETSSalesTotal.Content = "0.00";
                    double StamountTotal = 0.00;
                    StamountTotal = lblStartAmt.Content == "" ? 0.00 : (Convert.ToDouble(lblStartAmt.Content));
                    // lblCashInDrawer.Content =  Convert.ToDouble(StamountTotal+CashAmt-tCashReturnValue).ToString("0.00");
                    if (lblCNETSSalesTotal.Content == "")
                    {
                        lblCNETSSalesTotal.Content = "0.00";
                    }
                }
                //CreditCard Total Amount:
                //SqlCommand cmd1 = new SqlCommand("SP_SelectQuery", con);
                //cmd1.CommandType = CommandType.StoredProcedure;
                //cmd1.Parameters.AddWithValue("@ActionType", "CreditCardSe");
                //cmd1.Parameters.AddWithValue("@ItemName", "");
                //cmd1.Parameters.AddWithValue("@ItemCode", "");
                SqlCommand cmd1 = new SqlCommand("select SalRecv_Amt as [Rec Amt] from SalRecv_table,Ledger_table where SalRecv_Led= Ledger_no and Ledger_groupno=5 and Ledger_no<>14", con);
                SqlDataAdapter aadp1 = new SqlDataAdapter(cmd1);
                dtCreditcard1.Rows.Clear();
                // dt_griddiaplay1.Rows.Clear();
                aadp1.Fill(dtCreditcard1);
                double totamount = 0.00;
                dtGroupReport.Rows.Clear();
                if (dtCreditcard1.Rows.Count > 0)
                {
                    //gridItems.DataSource = dtCreditcard1.DefaultView;
                    for (int i = 0; i < dtCreditcard1.Rows.Count; i++)
                    {
                        totamount += Convert.ToDouble(dtCreditcard1.Rows[i]["Rec Amt"].ToString());
                    }
                    lblCreditCardSalesTotal.Content = totamount.ToString("0.00");
                }
                else
                {
                    lblCreditCardSalesTotal.Content = "0.00";
                }


                //Single Procedure code End-3 time


                ////////  double tCashReturnValue = 0.00;
                ////// // double tNETSReturnValue = 0.00;
                //////  SqlCommand cmdApril = new SqlCommand("sp_ManagerbtnCashDrawer", con);
                //////  cmdApril.CommandType = CommandType.StoredProcedure;
                //////  cmdApril.Parameters.AddWithValue("@tUserno", _Class.clsVariables.tUserNo);
                //////  cmdApril.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);

                //////  SqlParameter temptlblStartAmt = new SqlParameter("@tlblStartAmt", SqlDbType.Float);
                //////  temptlblStartAmt.Direction = ParameterDirection.Output;
                //////  cmdApril.Parameters.Add(temptlblStartAmt);
                //////  SqlParameter temptlblLastReset = new SqlParameter("@tlblLastReset", SqlDbType.Date);
                //////  temptlblLastReset.Direction = ParameterDirection.Output;
                //////  cmdApril.Parameters.Add(temptlblLastReset);
                //////  SqlParameter temptcurrentDate= new SqlParameter("@tcurrentDate", SqlDbType.Date);
                //////  temptcurrentDate.Direction = ParameterDirection.Output;
                //////  cmdApril.Parameters.Add(temptcurrentDate);
                //////  SqlParameter temptlblCCashSalesTotal = new SqlParameter("@tlblCCashSalesTotal", SqlDbType.Float);
                //////  temptlblCCashSalesTotal.Direction = ParameterDirection.Output;
                //////  cmdApril.Parameters.Add(temptlblCCashSalesTotal);
                //////  SqlParameter temptCashReturnValue = new SqlParameter("@tCashReturnValue", SqlDbType.Float);
                //////  temptCashReturnValue.Direction = ParameterDirection.Output;
                //////  cmdApril.Parameters.Add(temptCashReturnValue);
                //////  SqlParameter temptNETSReturnValue = new SqlParameter("@tNETSReturnValue", SqlDbType.Float);
                //////  temptNETSReturnValue.Direction = ParameterDirection.Output;
                //////  cmdApril.Parameters.Add(temptNETSReturnValue);
                //////  SqlParameter temptlblCashInDrawer = new SqlParameter("@tlblCashInDrawer", SqlDbType.Float);
                //////  temptlblCashInDrawer.Direction = ParameterDirection.Output;
                //////  cmdApril.Parameters.Add(temptlblCashInDrawer);
                //////  SqlParameter temptlblCNETSSalesTotal = new SqlParameter("@tlblCNETSSalesTotal", SqlDbType.Float);
                //////  temptlblCNETSSalesTotal.Direction = ParameterDirection.Output;
                //////  cmdApril.Parameters.Add(temptlblCNETSSalesTotal);
                //////  SqlParameter temptlblCreditCardSalesTotal = new SqlParameter("@tlblCreditCardSalesTotal", SqlDbType.Float);
                //////  temptlblCreditCardSalesTotal.Direction = ParameterDirection.Output;
                //////  cmdApril.Parameters.Add(temptlblCreditCardSalesTotal);             

                //////  cmdApril.ExecuteNonQuery();

                //////  lblStartAmt.Content =string.Format("{0:0.00}",(temptlblStartAmt.Value.ToString().Trim() == "") ? 0 : double.Parse(temptlblStartAmt.Value.ToString()));
                //////  lblLastReset.Content = Convert.ToString(temptlblLastReset.Value);
                //////  currentDate =Convert.ToDateTime(temptcurrentDate.Value);
                //////  lblCCashSalesTotal.Content = string.Format("{0:0.00}", (temptlblCCashSalesTotal.Value.ToString().Trim() == "") ? 0 : double.Parse(temptlblCCashSalesTotal.Value.ToString()));
                //////  tCashReturnValue = (temptCashReturnValue.Value.ToString().Trim() == "") ? 0 : double.Parse(temptCashReturnValue.Value.ToString());
                //////  tNETSReturnValue = (temptNETSReturnValue.Value.ToString().Trim() == "") ? 0 : double.Parse(temptNETSReturnValue.Value.ToString());
                //////  lblCashInDrawer.Content = string.Format("{0:0.00}", (temptlblCashInDrawer.Value.ToString().Trim() == "") ? 0 : double.Parse(temptlblCashInDrawer.Value.ToString()));
                //////  lblCNETSSalesTotal.Content = string.Format("{0:0.00}", (temptlblCNETSSalesTotal.Value.ToString().Trim() == "") ? 0 : double.Parse(temptlblCNETSSalesTotal.Value.ToString()));
                //////  lblCreditCardSalesTotal.Content = string.Format("{0:0.00}", (temptlblCreditCardSalesTotal.Value.ToString().Trim() == "") ? 0 : double.Parse(temptlblCreditCardSalesTotal.Value.ToString()));



                DataTable dtLedgerNo = new DataTable();
                dtLedgerNo.Rows.Clear();
                DataTable dtHAC = new DataTable();


                SqlCommand cmdLedger = new SqlCommand("Select * from Ledger_table where Ledger_groupno=32 and Ledger_no<>2", con);
                SqlDataAdapter adpLedger = new SqlDataAdapter(cmdLedger);
                adpLedger.Fill(dtLedgerNo);
                double totamountHAC = 0.00;
                lblCHouseACSalesTotal.Content = "0.00";
                for (int mn = 0; mn < dtLedgerNo.Rows.Count; mn++)
                {
                    dtHAC.Rows.Clear();
                    SqlCommand cmdHAC1 = new SqlCommand(@"select Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount  from salmas_table,SalRecv_table  where SalRecv_table.SalRecv_Led=@tPartyNo and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.ctr_no=(Select ctr_no from User_table where user_no=@tUserNo) and smas_Cancel<>1 and smas_billdate =(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    cmdHAC1.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                    cmdHAC1.Parameters.AddWithValue("@tPartyNo", dtLedgerNo.Rows[mn]["Ledger_no"].ToString());
                    SqlDataAdapter aadpHAC1 = new SqlDataAdapter(cmdHAC1);
                    dtCreditcard1.Rows.Clear();
                    // dt_griddiaplay1.Rows.Clear();
                    aadpHAC1.Fill(dtCreditcard1);

                    dtGroupReport.Rows.Clear();
                    if (dtCreditcard1.Rows.Count > 0)
                    {
                        //gridItems.DataSource = dtCreditcard1.DefaultView;
                        for (int i = 0; i < dtCreditcard1.Rows.Count; i++)
                        {
                            totamountHAC += Convert.ToDouble(dtCreditcard1.Rows[i]["Amount"].ToString());
                        }
                    }
                }

                if (_Class.clsVariables.tViewCash == true)
                    lblCHouseACSalesTotal.Content = totamountHAC.ToString("0.00");
                else
                    lblCHouseACSalesTotal.Content = "0.00";

                //salesmen Total
                DataTable dtSLedgerNo = new DataTable();
                dtSLedgerNo.Rows.Clear();
                DataTable dtSalesmen = new DataTable();

                DataTable dtsales1 = new DataTable();

                SqlCommand cmdSLedger = new SqlCommand("Select * from Ledger_table where Ledger_groupno=51 ", con);
                SqlDataAdapter adpSLedger = new SqlDataAdapter(cmdSLedger);
                adpSLedger.Fill(dtSLedgerNo);
                double totSalesmenAmt = 0.00;
                lblCSalesmenTotal.Content = "0.00";
                //for (int mn = 0; mn < dtSLedgerNo.Rows.Count; mn++)
                if (dtSLedgerNo.Rows.Count > 0)
                {
                    dtSalesmen.Rows.Clear();
                    SqlCommand cmdSLedger1 = new SqlCommand(@"select Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount  from salmas_table,SalRecv_table  where SalRecv_table.SalRecv_Led=6 and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.ctr_no=(Select ctr_no from User_table where user_no=@tUserNo) and smas_Cancel<>1 and smas_billdate =(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    cmdSLedger1.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                    //cmdSLedger1.Parameters.AddWithValue("@tPartyNo", dtSLedgerNo.Rows[mn]["Ledger_no"].ToString());
                    SqlDataAdapter adpSLedger1 = new SqlDataAdapter(cmdSLedger1);
                    dtsales1.Rows.Clear();
                    // dt_griddiaplay1.Rows.Clear();
                    adpSLedger1.Fill(dtsales1);

                    dtGroupReport.Rows.Clear();
                    if (dtsales1.Rows.Count > 0)
                    {
                        //gridItems.DataSource = dtCreditcard1.DefaultView;
                        for (int i = 0; i < dtsales1.Rows.Count; i++)
                        {
                            totSalesmenAmt += Convert.ToDouble(dtsales1.Rows[i]["Amount"].ToString());
                        }
                    }
                }
                lblCSalesmenTotal.Content = totSalesmenAmt.ToString("0.00");


                DataTable dtLedgerNoCredit = new DataTable();
                dtLedgerNoCredit.Rows.Clear();
                DataTable dtCredit = new DataTable();


                SqlCommand cmdLedgerCredit = new SqlCommand("Select * from Ledger_table where Ledger_groupno=5 and Ledger_no<>14", con);
                SqlDataAdapter adpLedgerCredit = new SqlDataAdapter(cmdLedgerCredit);
                adpLedgerCredit.Fill(dtLedgerNoCredit);
                double totamountCredit = 0.00;
                lblCCreditCardSalesTotal.Content = "0.00";
                for (int mn = 0; mn < dtLedgerNoCredit.Rows.Count; mn++)
                {
                    dtHAC.Rows.Clear();
                    SqlCommand cmdHAC1 = new SqlCommand(@"select Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount  from salmas_table,SalRecv_table  where SalRecv_table.SalRecv_Led=@tPartyNo and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.ctr_no=(Select ctr_no from User_table where user_no=@tUserNo) and smas_Cancel<>1 and smas_billdate =(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    cmdHAC1.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                    cmdHAC1.Parameters.AddWithValue("@tPartyNo", dtLedgerNoCredit.Rows[mn]["Ledger_no"].ToString());
                    SqlDataAdapter aadpHAC1 = new SqlDataAdapter(cmdHAC1);
                    dtCreditcard1.Rows.Clear();
                    // dt_griddiaplay1.Rows.Clear();
                    aadpHAC1.Fill(dtCreditcard1);

                    dtGroupReport.Rows.Clear();
                    if (dtCreditcard1.Rows.Count > 0)
                    {
                        //gridItems.DataSource = dtCreditcard1.DefaultView;
                        for (int i = 0; i < dtCreditcard1.Rows.Count; i++)
                        {
                            totamountCredit += Convert.ToDouble(dtCreditcard1.Rows[i]["Amount"].ToString());
                        }
                    }
                }
                lblCCreditCardSalesTotal.Content = totamountCredit.ToString("0.00");

                mainStr = "";
                listDisplay.Items.Clear();

                funPrintHeaderPart();



                topLine1 = "DRAWER REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Counter : " + _Class.clsVariables.tCounterName;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //Print Line Below Header
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

                ds.Tables.Clear();
                // mainStrSub = "";
                dt_griddiaplay.Rows.Clear();
                string amount_string = "0.00";

                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "DRAWER START";
                string rate = lblStartAmt.Content.ToString().Trim();
                amount_string = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";

                dt_griddiaplay.Rows.Add("DRAWER START", amount_string, "", "");

                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "CASH";
                if (_Class.clsVariables.tViewCash == true)
                    rate = String.Format("{0:0.00}", (double.Parse(lblCashInDrawer.Content.ToString()) - double.Parse(lblStartAmt.Content.ToString())));
                else
                    rate = "0.00";
                amount_string = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";

                if (_Class.clsVariables.tViewCash == true)
                    dt_griddiaplay.Rows.Add("CASH", String.Format("{0:0.00}", (double.Parse(lblCashInDrawer.Content.ToString()) - double.Parse(lblStartAmt.Content.ToString()))), "", "");
                else
                    dt_griddiaplay.Rows.Add("CASH", String.Format("{0:0.00}", (double.Parse((0.00).ToString()))), "", "");

                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "CASH IN DRAWER";
                rate = lblCashInDrawer.Content.ToString().Trim();
                amount_string = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                //break;

                dt_griddiaplay.Rows.Add("CASH IN DRAWER", amount_string, "", "");

                dt_griddiaplay.Rows.Add("", "", "", "");

                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += " ";
                }
                mainStr += "\n";

                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "CASH";
                if (_Class.clsVariables.tViewCash == true)
                    rate = String.Format("{0:0.00}", (double.Parse(lblCashInDrawer.Content.ToString()) - double.Parse(lblStartAmt.Content.ToString())));
                else
                    rate = "0.00";
                amount_string = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                if (_Class.clsVariables.tViewCash == true)
                    dt_griddiaplay.Rows.Add("CASH", String.Format("{0:0.00}", (double.Parse(lblCashInDrawer.Content.ToString()) - double.Parse(lblStartAmt.Content.ToString()))), "", "");
                else
                    dt_griddiaplay.Rows.Add("CASH", "0.00", "", "");
                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "NETS";
                rate = String.Format("{0:0.00}", (double.Parse(Convert.ToString(lblCNETSSalesTotal.Content))));
                amount_string = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";

                dt_griddiaplay.Rows.Add("NETS", String.Format("{0:0.00}", (double.Parse(Convert.ToString(lblCNETSSalesTotal.Content)))), "", "");

                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "CREDIT CARD";
                rate = String.Format("{0:0.00}", (double.Parse(Convert.ToString(lblCCreditCardSalesTotal.Content))));
                amount_string = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";

                dt_griddiaplay.Rows.Add("CREDIT CARD", String.Format("{0:0.00}", (double.Parse(Convert.ToString(lblCCreditCardSalesTotal.Content)))), "", "");

                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "HOUSE ACCOUNT";
                rate = String.Format("{0:0.00}", (double.Parse(Convert.ToString(lblCHouseACSalesTotal.Content))));
                amount_string = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";

                dt_griddiaplay.Rows.Add("HOUSE ACCOUNT", String.Format("{0:0.00}", (double.Parse(Convert.ToString(lblCHouseACSalesTotal.Content)))), "", "");


                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "SALESMEN";
                rate = String.Format("{0:0.00}", (double.Parse(Convert.ToString(lblCSalesmenTotal.Content))));
                amount_string = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";

                dt_griddiaplay.Rows.Add("SALESMEN", String.Format("{0:0.00}", (double.Parse(Convert.ToString(lblCSalesmenTotal.Content)))), "", "");
                double cashn = 0.00;
                if (_Class.clsVariables.tViewCash == true)
                    cashn = ((double.Parse(lblCashInDrawer.Content.ToString()) - double.Parse(lblStartAmt.Content.ToString())));

                double Ntesn = Convert.ToDouble(lblCNETSSalesTotal.Content);
                double CreditCardn = Convert.ToDouble(lblCCreditCardSalesTotal.Content);
                double houseaccountn = Convert.ToDouble(lblCHouseACSalesTotal.Content);
                double salesmentot = Convert.ToDouble(lblCSalesmenTotal.Content);
                double totn = (cashn + Ntesn + CreditCardn + houseaccountn + salesmentot);
                dt_griddiaplay.Rows.Add("", "", "", "");
                dt_griddiaplay.Rows.Add("TOTAL SALES", String.Format("{0:0.00}", (double.Parse(totn.ToString()))));


                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += " ";
                }
                mainStr += "\n";

                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "TOTAL SALES";
                rate = String.Format("{0:0.00}", (double.Parse(totn.ToString())));
                amount_string = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";

                for (int mn = 0; mn < 5; mn++)
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                // lblPrint.Content = mainStr;
                //Print Line Below Header

                // print lint below logo

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

                //listDisplay.Items.Add(mainStr);
                gridItemsManager.DataSource = null;
                gridItemsManager.DataSource = dt_griddiaplay.DefaultView;

                gridItemsManager.Columns[0].Width = 280;
                gridItemsManager.Columns[1].Width = 60;
                this.gridItemsManager.Columns[1].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }

        private void funCreditCardTotal()
        {
            try
            {
                DataTable dtCard = new DataTable();
                dtCard.Rows.Clear();
                SqlCommand cmdSelect = new SqlCommand("Select Ledger_Name as Card_Name from Ledger_Table where Ledger_groupno=5 and Ledger_no<>14 order by Ledger_No asc", con);
                SqlDataAdapter adpSelect = new SqlDataAdapter(cmdSelect);
                adpSelect.Fill(dtCard);
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                for (int ij = 0; ij < dtCard.Rows.Count; ij++)
                {
                    // SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,smas_billDate as Date,CONVERT(time,smas_billtime,108) as Time,smas_name as Type,convert(numeric(18,2),smas_NetAmount) as NetAmount,smas_cancel as Cancel from salmas_table where smas_rtno=0 and smas_name='Cash Sales' and smas_billdate=(SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table where Id=(select EndOfDayId from NumberTable)) order by smas_billno DESC", con);
                    SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,Convert(date,smas_billDate,103) as Date,CONVERT(time,smas_billtime,108) as Time,smas_name as Type,convert(numeric(18,2),smas_NetAmount) as NetAmount,smas_cancel as Cancel from salmas_table where smas_cancel=0 and smas_rtno=0 and smas_name=@tCardName and smas_billdate =@tFromDate  order by smas_billno DESC", con);
                    cmd.Parameters.AddWithValue("@tFromDate", currentDate);
                    //cmd.Parameters.AddWithValue("@tToDate", dtpTo.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tCardName", dtCard.Rows[ij]["Card_Name"].ToString());
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtNew);
                    DataTable dtReturnVal = new DataTable();

                    for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                    {
                        dtReturnVal.Rows.Clear();
                        SqlCommand cmdReturn = new SqlCommand("select SUM(smas_NetAmount) as returnAmt from salmas_table where smas_rtno=(select smas_no from SalMas_table where smas_billno=@tBillNo and smas_rtno=0) and smas_rtno<>0 ", con);
                        cmdReturn.Parameters.AddWithValue("@tBillNo", dtNew.Rows[mn]["BillNo"].ToString());
                        SqlDataAdapter adpReturn = new SqlDataAdapter(cmdReturn);
                        adpReturn.Fill(dtReturnVal);
                        double tRetValue = 0.0, tNtAmt = 0.0;
                        if (dtReturnVal.Rows.Count > 0)
                        {
                            if (dtReturnVal.Rows[0]["returnAmt"].ToString() != "")
                            {
                                tRetValue = (dtReturnVal.Rows[0]["returnAmt"].ToString() == "") ? 0 : double.Parse(dtReturnVal.Rows[0]["returnAmt"].ToString());
                            }
                        }
                        tNtAmt = (dtNew.Rows[mn]["NetAmount"].ToString() == "") ? 0 : double.Parse(dtNew.Rows[mn]["NetAmount"].ToString());
                        dtNew.Rows[mn]["NetAmount"] = string.Format("{0:0.00}", (tNtAmt - tRetValue));
                    }
                }
                double tCreditCardTot = 0.0, tCountTot = 0;
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    tCountTot = tCountTot + 1;
                    tCreditCardTot += (dtNew.Rows[mn]["NetAmount"].ToString().Trim() == "") ? 0.00 : double.Parse(dtNew.Rows[mn]["NetAmount"].ToString().Trim());
                }
                lblCreditCardSalesTotal.Content = string.Format("{0:0.00}", tCreditCardTot);
                lblCreditCardSalesCount.Content = tCountTot;
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }

        }

        private void funHouseAcTot()
        {
            try
            {
                DataTable dtHAC = new DataTable();
                dtHAC.Rows.Clear();

                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmdHAC = new SqlCommand("select Ledger_name  from Ledger_table where  Ledger_groupno=32 and Ledger_no<>2 order by Ledger_name ASC", con);
                SqlDataAdapter adpHAC = new SqlDataAdapter(cmdHAC);
                adpHAC.Fill(dtHAC);
                for (int ij = 0; ij < dtHAC.Rows.Count; ij++)
                {
                    // SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,smas_billDate as Date,CONVERT(time,smas_billtime,108) as Time,smas_name as Type,convert(numeric(18,2),smas_NetAmount) as NetAmount,smas_cancel as Cancel from salmas_table where smas_rtno=0 and smas_name='Cash Sales' and smas_billdate=(SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table where Id=(select EndOfDayId from NumberTable)) order by smas_billno DESC", con);
                    SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,Convert(date,smas_billDate,103) as Date,CONVERT(time,smas_billtime,108) as Time,smas_name as Type,convert(numeric(18,2),smas_NetAmount) as NetAmount,smas_cancel as Cancel from salmas_table where smas_cancel=0 and smas_rtno=0 and smas_name=@tCashName and smas_billdate between @tFromDate AND @tToDate order by smas_billno DESC", con);
                    cmd.Parameters.AddWithValue("@tFromDate", currentDate);
                    cmd.Parameters.AddWithValue("@tToDate", currentDate);
                    cmd.Parameters.AddWithValue("@tCashName", dtHAC.Rows[ij]["Ledger_name"].ToString().Trim());
                    //cmd.Parameters.AddWithValue("@tDate",(DateTime)result.Value.ToString();
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtNew);
                    DataTable dtReturnVal = new DataTable();

                    for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                    {
                        dtReturnVal.Rows.Clear();
                        SqlCommand cmdReturn = new SqlCommand("select SUM(smas_NetAmount) as returnAmt from salmas_table where smas_rtno=(select smas_no from SalMas_table where smas_billno=@tBillNo and smas_rtno=0) and smas_rtno<>0 and  smas_name='Cash Sales'", con);
                        cmdReturn.Parameters.AddWithValue("@tBillNo", dtNew.Rows[mn]["BillNo"].ToString());
                        SqlDataAdapter adpReturn = new SqlDataAdapter(cmdReturn);
                        adpReturn.Fill(dtReturnVal);
                        double tRetValue = 0.0, tNtAmt = 0.0;
                        if (dtReturnVal.Rows.Count > 0)
                        {
                            if (dtReturnVal.Rows[0]["returnAmt"].ToString() != "")
                            {
                                tRetValue = (dtReturnVal.Rows[0]["returnAmt"].ToString() == "") ? 0 : double.Parse(dtReturnVal.Rows[0]["returnAmt"].ToString());
                            }
                        }
                        tNtAmt = (dtNew.Rows[mn]["NetAmount"].ToString() == "") ? 0 : double.Parse(dtNew.Rows[mn]["NetAmount"].ToString());
                        dtNew.Rows[mn]["NetAmount"] = string.Format("{0:0.00}", (tNtAmt - tRetValue));
                    }
                }
                double tHouseACTot = 0.0, tHouseACCountTot = 0;
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    tHouseACCountTot = tHouseACCountTot + 1;
                    tHouseACTot += (dtNew.Rows[mn]["NetAmount"].ToString().Trim() == "") ? 0.00 : double.Parse(dtNew.Rows[mn]["NetAmount"].ToString().Trim());
                }
                lblHouseACSalesTotal.Content = string.Format("{0:0.00}", tHouseACTot);
                lblHouseACSalesCount.Content = tHouseACCountTot;
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void funSalesmenTot()
        {
            try
            {
                DataTable dtSalemen = new DataTable();
                dtSalemen.Rows.Clear();

                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmdHAC = new SqlCommand("select Ledger_no  from Ledger_table where  Ledger_groupno=51 and Ledger_no<>2 order by Ledger_name ASC", con);
                SqlDataAdapter adpHAC = new SqlDataAdapter(cmdHAC);
                adpHAC.Fill(dtSalemen);
                for (int ij = 0; ij < dtSalemen.Rows.Count; ij++)
                {
                    //SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,Convert(date,smas_billDate,103) as Date,CONVERT(time,smas_billtime,108) as Time,smas_name as Type,convert(numeric(18,2),smas_NetAmount) as NetAmount,smas_cancel as Cancel from salmas_table where smas_cancel=0 and smas_rtno=0 and smas_name=@tCashName and smas_billdate between @tFromDate AND @tToDate order by smas_billno DESC", con);
                    SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,Convert(date,smas_billDate,103) as Date,CONVERT(time,smas_billtime,108) as Time,smas_name as Type,convert(numeric(18,2),smas_NetAmount) as NetAmount,smas_cancel as Cancel from salmas_table where smas_cancel=0 and smas_rtno=0 and party_no=@tLedgerno and smas_billdate between @tFromDate AND @tToDate order by smas_billno DESC", con);
                    cmd.Parameters.AddWithValue("@tFromDate", currentDate);
                    cmd.Parameters.AddWithValue("@tToDate", currentDate);
                    cmd.Parameters.AddWithValue("@tLedgerno", dtSalemen.Rows[ij]["Ledger_no"].ToString().Trim());
                    //cmd.Parameters.AddWithValue("@tDate",(DateTime)result.Value.ToString();
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtNew);
                    DataTable dtReturnVal = new DataTable();

                    for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                    {
                        dtReturnVal.Rows.Clear();
                        SqlCommand cmdReturn = new SqlCommand("select SUM(smas_NetAmount) as returnAmt from salmas_table where smas_rtno=(select smas_no from SalMas_table where smas_billno=@tBillNo and smas_rtno=0) and smas_rtno<>0 and  smas_name='salesmen'", con);
                        cmdReturn.Parameters.AddWithValue("@tBillNo", dtNew.Rows[mn]["BillNo"].ToString());
                        SqlDataAdapter adpReturn = new SqlDataAdapter(cmdReturn);
                        adpReturn.Fill(dtReturnVal);
                        double tRetValue = 0.0, tNtAmt = 0.0;
                        if (dtReturnVal.Rows.Count > 0)
                        {
                            if (dtReturnVal.Rows[0]["returnAmt"].ToString() != "")
                            {
                                tRetValue = (dtReturnVal.Rows[0]["returnAmt"].ToString() == "") ? 0 : double.Parse(dtReturnVal.Rows[0]["returnAmt"].ToString());
                            }
                        }
                        tNtAmt = (dtNew.Rows[mn]["NetAmount"].ToString() == "") ? 0 : double.Parse(dtNew.Rows[mn]["NetAmount"].ToString());
                        dtNew.Rows[mn]["NetAmount"] = string.Format("{0:0.00}", (tNtAmt - tRetValue));
                    }
                }
                double tSalesmenTot = 0.0, tSalesmenCountTot = 0;
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    tSalesmenCountTot = tSalesmenCountTot + 1;
                    tSalesmenTot += (dtNew.Rows[mn]["NetAmount"].ToString().Trim() == "") ? 0.00 : double.Parse(dtNew.Rows[mn]["NetAmount"].ToString().Trim());
                }
                lblSalesmenTotal.Content = string.Format("{0:0.00}", tSalesmenTot);
                lblSalesmenCount.Content = tSalesmenCountTot;
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnEndOfDay_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                lblSalesTotal.Content = "0.00";
                lblNetSalesTotal.Content = "0.00";
                lblNetSalesCount.Content = "0";
                lblSalesCount.Content = "0";
                lblSubTot.Content = "0.00";
                lblGrandTot.Content = "0.00";
                lblHouseACSalesCount.Content = "0";
                lblHouseACSalesTotal.Content = "0.00";
                lblCreditCardSalesCount.Content = "0";
                lblCreditCardSalesTotal.Content = "0.00";
                lblSalesmenCount.Content = "0";
                lblSalesmenTotal.Content = "0.00";

                pnlProfitReport.Visibility = Visibility.Collapsed;
                gridItemsManager.ColumnHeadersVisible = false;
                gridItemsManager.DataSource = null;
                dt_selecttable.Rows.Clear();
                dt_addgroupvalues.Rows.Clear();
                dt_griddiaplay.Rows.Clear();
                // funConnectionStateCheck();
                lblTitle.Content = "END OF DAY";

                pnlCommon.Visibility = Visibility.Visible;
                pnlCounterBtn.Visibility = Visibility.Hidden;
                pnlPaymentReport.Visibility = Visibility.Hidden;

                pnlCounterBtn.Visibility = Visibility.Hidden;
                pnlCommon.Visibility = Visibility.Visible;
                pnlCashDrawer.Visibility = Visibility.Collapsed;
                pnlReport.Visibility = Visibility.Collapsed;
                pnlEndOfDay.Visibility = Visibility.Visible;
                Uccommission.Visibility = Visibility.Hidden;
                DataTable dtNewNew = new DataTable();
                dtNewNew.Rows.Clear();
                SqlCommand cmdActive = new SqlCommand("sp_SalesCreationSelectSingle", con);
                cmdActive.CommandType = CommandType.StoredProcedure;
                cmdActive.Parameters.AddWithValue("@tActionType", "ACTIVENEW");
                cmdActive.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmdActive);
                adp.Fill(dtNewNew);
                //dtNewNew.Load(dr);
                if (dtNewNew.Rows.Count > 0)
                {
                    if (dtNewNew.Rows[0][0].ToString() == "1")
                    {
                        btnBeginCashDrawer.IsEnabled = true;
                        //munies
                        // btnResetDrawer.IsEnabled = false;
                        // btnEndOfDayDrawer.IsEnabled = false;
                        btnCounterSettle.IsEnabled = false;
                    }
                    else
                    {
                        btnBeginCashDrawer.IsEnabled = false;
                        //munies
                        //  btnResetDrawer.IsEnabled = true;
                        btnEndOfDayDrawer.IsEnabled = true;
                        btnCounterSettle.IsEnabled = true;
                    }
                }
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmdLastReset = new SqlCommand("sp_SalesCreationSelectAll", con);
                cmdLastReset.CommandType = CommandType.StoredProcedure;
                cmdLastReset.Parameters.AddWithValue("@tActionType", "ENDOFDAY");
                // SqlDataAdapter achk = new SqlDataAdapter(cmdLastReset);
                // achk.Fill(dtNew);
                dr = cmdLastReset.ExecuteReader();
                dtNew.Load(dr);
                bool isChk1 = false;
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    isChk1 = true;
                    DateTime tDate = DateTime.Parse(dtNew.Rows[mn][0].ToString());
                    lblLastEndOfDay.Content = dtNew.Rows[mn][0].ToString();
                    currentDate = tDate.AddDays(1);
                }
                if (isChk1 == false)
                {
                    DateTime tDate = DateTime.Now;
                    lblLastEndOfDay.Content = tDate.AddDays(-1).ToString();
                    currentDate = tDate;
                }
                string date;
                //, year, month;
                // date = currentDate.ToString().Substring(0, 2);
                // month = currentDate.ToString().Substring(3, 2);
                //  year = currentDate.ToString().Substring(6, 4);
                date = currentDate.ToString("yyyy-MM-dd");
                //Parthi Coding Only here This Coding Now Changed:
                //DataTable dtNew1 = new DataTable();
                //dtNew1.Rows.Clear();
                //SqlCommand adp2 = new SqlCommand("sp_SalesCreationSelectSingle", con);
                //adp2.CommandType = CommandType.StoredProcedure;
                //adp2.Parameters.AddWithValue("@tValue", date);
                //adp2.Parameters.AddWithValue("@tActionType", "TOTCASHSALES");
                //dr = adp2.ExecuteReader();
                //dtNew1.Load(dr);
                //lblCashSalesTotal.Content = "0.00";
                //if (dtNew1.Rows.Count > 0)
                //{
                //    if (dtNew1.Rows[0][0].ToString() != "")
                //    {
                //        lblSalesTotal.Content = String.Format("{0:0.00}", double.Parse(dtNew1.Rows[0][0].ToString()));
                //    }
                //    if (dtNew1.Rows[0][1].ToString() != "")
                //    {
                //        lblSalesCount.Content = dtNew1.Rows[0][1].ToString();
                //    }
                //}




                //Return Item Values
                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();
                SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where  Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno, party_no", con);
                //  cmdVoid.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);
                double tCashReturnValue = 0.00;
                double tNETSReturnValue = 0.00;
                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    if (dtVoid.Rows[i]["party_no"].ToString() == "2")
                    {
                        tCashReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                    else if (dtVoid.Rows[i]["party_no"].ToString() == "14")
                    {
                        tNETSReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                }

                //Her Coding Changed Here by Anbu:
                int NetSCount = 0, CashSCount = 0;

                SqlCommand adp31 = new SqlCommand("[sp_SalesCreationSelectSingle]", con);
                adp31.CommandType = CommandType.StoredProcedure;
                adp31.Parameters.AddWithValue("@tValue", _Class.clsVariables.tUserNo);
                adp31.Parameters.AddWithValue("@tActionType", "lblNETSSalesTotal");
                DataTable dtNew1 = new DataTable();
                dtNew1.Rows.Clear();
                SqlDataAdapter adp11 = new SqlDataAdapter(adp31);
                adp11.Fill(dtNew1);
                lblCNETSSalesTotal.Content = "0.00";
                if (dtNew1.Rows.Count > 0)
                {
                    double CashAmt = 0.00, NetsAmt = 0.00;
                    // for (int i = 0; i < dtNew1.Rows.Count; i++)
                    {
                        //SqlCommand cmd = new SqlCommand(@"select (Case When SalRecv_table.SalRecv_Led=14  Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) as NETs, (Case When SalRecv_table.SalRecv_Led=5 Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) As Cash from salmas_table,SalRecv_table  where SalMas_Table.Smas_cancel='0' and  SalRecv_table.SalRecv_Salno='" + dtNew1.Rows[i]["Strn_no"].ToString() + "' and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led ", con);
                        SqlCommand cmd = new SqlCommand(@"select (Case When SalRecv_table.SalRecv_Led=14  Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) as NETs, (Case When SalRecv_table.SalRecv_Led=5 Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) As Cash from salmas_table,SalRecv_table  where SalMas_Table.Smas_cancel='0' and SalMas_Table.smas_rtno=0 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno and smas_billdate =(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_rtno<>1  group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                        SqlDataAdapter aadp1 = new SqlDataAdapter(cmd);
                        DataTable SelNetsAndCash = new DataTable();
                        SelNetsAndCash.Rows.Clear();
                        aadp1.Fill(SelNetsAndCash);
                        if (SelNetsAndCash.Rows.Count > 0)
                        {
                            for (int j = 0; j < SelNetsAndCash.Rows.Count; j++)
                            {
                                if (SelNetsAndCash.Rows[j]["Cash"].ToString().Trim() != "" && SelNetsAndCash.Rows[j]["Cash"].ToString().Trim() != null)
                                {
                                    CashAmt += Convert.ToDouble(SelNetsAndCash.Rows[j]["Cash"].ToString());
                                    CashSCount = ++CashSCount;
                                }
                                //  if (SelNetsAndCash.Rows.Count > 1)
                                {

                                    if (SelNetsAndCash.Rows[j]["NETs"].ToString().Trim() != "" && SelNetsAndCash.Rows[j]["NETs"].ToString().Trim() != null)
                                    {
                                        NetsAmt += Convert.ToDouble(SelNetsAndCash.Rows[j]["NETs"].ToString());
                                        NetSCount = ++NetSCount;
                                    }
                                }
                            }
                        }
                    }
                    // double TotalSalesAmt = 0.00;
                    lblSalesTotal.Content = (CashAmt - tCashReturnValue).ToString("0.00");
                    lblNetSalesTotal.Content = (NetsAmt - tNETSReturnValue).ToString("0.00");
                    lblNetSalesCount.Content = NetSCount.ToString();
                    lblSalesCount.Content = CashSCount.ToString();
                }
                funCreditCardTotal();
                funHouseAcTot();
                funSalesmenTot();
                DataTable dtNew2 = new DataTable();
                dtNew2.Rows.Clear();
                SqlCommand adp3 = new SqlCommand("sp_SalesCreationSelectSingle", con);
                adp3.CommandType = CommandType.StoredProcedure;
                adp3.Parameters.AddWithValue("@tValue", date);
                adp3.Parameters.AddWithValue("@tActionType", "TOTNETSSALES");
                dr = adp3.ExecuteReader();
                dtNew2.Load(dr);

                // SqlCommand adp3 = new SqlCommand("Select sum(smas_netAmount) as Amt,Count(*) from SalMas_Table where party_no='14' and smas_billdate like '" + date + "%'", con);

                lblCNETSSalesTotal.Content = "0.00";
                if (dtNew2.Rows.Count > 0)
                {
                    //Anbu  Putting Command Line Here This Three Lines:
                    //if (dtNew2.Rows[0][0].ToString() != "")
                    //{
                    //    lblNetSalesTotal.Content = String.Format("{0:0.00}", double.Parse(dtNew2.Rows[0][0].ToString()));
                    //}
                    //if (dtNew2.Rows[0][1].ToString() != "")
                    //{
                    //    lblNetSalesCount.Content = dtNew2.Rows[0][1].ToString();
                    //}
                }
                //lblTransCount.Content = string.Format("{0:0.00}", (double.Parse(lblNetSalesCount.Content.ToString()) + double.Parse(lblNetSalesCount.Content.ToString()) + double.Parse(lblCreditCardSalesCount.Content.ToString()) + double.Parse(lblHouseACSalesCount.Content.ToString()) + double.Parse(lblVoucherSalesCount.Content.ToString())));

                DataTable dtTransCount = new DataTable();
                dtTransCount.Rows.Clear();
                SqlCommand cmdTransCount = new SqlCommand("Select count(*) count from salmas_table where smas_rtno=0 and smas_Cancel=0 and smas_billdate=@tBillDate", con);
                cmdTransCount.Parameters.AddWithValue("@tBillDate", currentDate);
                SqlDataAdapter adpTransCount = new SqlDataAdapter(cmdTransCount);
                adpTransCount.Fill(dtTransCount);
                lblTransCount.Content = "0";
                if (dtTransCount.Rows.Count > 0)
                {
                    lblTransCount.Content = dtTransCount.Rows[0]["count"].ToString();
                }
                //    SqlCommand cmd = new SqlCommand("select * from EndOfDay_table where EndOfDay='"+DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff")+"'", con);
                //       con.Close();
                //       con.Open();
                //       dr = cmd.ExecuteReader();
                //       //  bool isChk = false;
                //       if (dr.Read())
                //       {
                //           btnEndOfDayDrawer.IsEnabled = false;
                //       }
                //       btnEndOfDayDrawer.IsEnabled = true;
                //       con.Close();
                // SqlDataAdapter adp10 = new SqlDataAdapter("select * from EndOfDay_table where id=(select max(id) from EndOfDay_table)", con);
                // adp10.Fill(ds, "ADP10");
                // for (int i = 0; i < ds.Tables["ADP10"].Rows.Count; i++)
                // {
                //     lblLastEndOfDay.Content = ds.Tables["ADP10"].Rows[i]["EndOfDay"].ToString();
                // }





                DataTable dtNew3 = new DataTable();
                dtNew3.Rows.Clear();
                SqlCommand adp111 = new SqlCommand("sp_SalesCreationSelectSingle", con);
                adp111.CommandType = CommandType.StoredProcedure;
                adp111.Parameters.AddWithValue("@tValue", date);
                adp111.Parameters.AddWithValue("@tActionType", "TOTAMT");
                dr = adp111.ExecuteReader();
                dtNew3.Load(dr);
                //    "select count(tot_Amt) as Count,sum(tot_Amt) as Grand,sum(Amount) as SubTot,sum(Disc_Amt) as Discount from stktrn_table  where  strn_Date like '" + date  + "%'", con);

                if (dtNew3.Rows.Count > 0)
                {
                    //  lblSalesCount.Content = ds.Tables["ADP11"].Rows[0]["Count"].ToString().ToString();
                    if (dtNew3.Rows[0]["SubTot"].ToString() != "")
                    {
                        double tTotalCash = 0.00, tTotalNets = 0.00, tTotalCredit = 0.00, tTotalHouseAC = 0.00, tTotalVoucher = 0.00, tTotalSalesmen = 0.00;
                        if (lblSalesTotal.Content.ToString().Trim() != "")
                        {
                            tTotalCash = (lblSalesTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblSalesTotal.Content.ToString().Trim());
                        }
                        if (lblNetSalesTotal.Content.ToString().Trim() != "")
                        {
                            tTotalNets = (lblNetSalesTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblNetSalesTotal.Content.ToString().Trim());
                        }
                        if (lblCreditCardSalesTotal.Content.ToString().Trim() != "")
                        {
                            tTotalCredit = (lblCreditCardSalesTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblCreditCardSalesTotal.Content.ToString().Trim());
                        }
                        if (lblHouseACSalesTotal.Content.ToString().Trim() != "")
                        {
                            tTotalHouseAC = (lblHouseACSalesTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblHouseACSalesTotal.Content.ToString().Trim());
                        }

                        if (lblVoucherSalesTotal.Content.ToString().Trim() != "")
                        {
                            tTotalVoucher = (lblVoucherSalesTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblVoucherSalesTotal.Content.ToString().Trim());
                        }
                        if (lblSalesmenTotal.Content.ToString().Trim() != "")
                        {
                            tTotalSalesmen = (lblSalesmenTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblSalesmenTotal.Content.ToString().Trim());
                        }
                        //  lblSubTot.Content = String.Format("{0:0.00}", double.Parse(dtNew3.Rows[0]["SubTot"].ToString()) - (tCashReturnValue + tNETSReturnValue));
                        lblSubTot.Content = String.Format("{0:0.00}", (tTotalCash + tTotalNets + tTotalCredit + tTotalHouseAC + tTotalVoucher + tTotalSalesmen));
                    }


                    DataTable dtNewDiscount = new DataTable();
                    dtNewDiscount.Rows.Clear();
                    SqlCommand adpDiscount = new SqlCommand(@"select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as Disc,convert(numeric(18,2), (Disc1.OthDisc-Disc2.ROthDisc)) as OthDisc,convert(numeric(18,2), (Disc1.SDisc-Disc2.RSDisc)) as SDisc,convert(numeric(18,2), (Disc1.TotDisc-Disc2.RTotDisc)) as DiscountAmt from 
(Select (case when SUM(disc_Amt) is null then 0 else SUM(disc_Amt) end) as Disc,(case when SUM(Othdisc_Amt) is null then 0 else SUM(Othdisc_Amt) end) as OthDisc,(case when SUM(spl_discamt) is null then 0 else SUM(spl_discamt) end) as SDisc, (case when SUM(Disc_Amt+Othdisc_Amt+spl_discamt) is null then 0 else SUM(Disc_Amt+Othdisc_Amt+spl_discamt) end) as TotDisc  from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date =(Select CONVERT(date,DATEADD(day,1,EndOfDay)) from EndOfDay_Table where Id=(Select MAX(EndofDayId) from NumberTable))) as Disc1,
(Select (case when SUM(disc_Amt) is null then 0 else SUM(disc_Amt) end) as RDisc,(case when SUM(Othdisc_Amt) is null then 0 else SUM(Othdisc_Amt) end) as ROthDisc,(case when SUM(spl_discamt) is null then 0 else SUM(spl_discamt) end) as RSDisc,(case when SUM(Disc_Amt+Othdisc_Amt+spl_discamt) is null then 0 else SUM(Disc_Amt+Othdisc_Amt+spl_discamt) end) as RTotDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date= (Select CONVERT(date,DATEADD(day,1,EndOfDay)) from EndOfDay_Table where Id=(Select MAX(EndofDayId) from NumberTable))) as Disc2", con);
                    //@"Select sum(Amount) as DiscountAmount from DiscountDetail_table where Date=(Select CONVERT(date,DATEADD(day,1,EndOfDay)) from EndOfDay_Table where Id=(Select MAX(EndofDayId) from NumberTable))", con);
                    SqlDataAdapter adpDiscountFill = new SqlDataAdapter(adpDiscount);
                    adpDiscountFill.Fill(dtNewDiscount);




                    //  if (dtNewDiscount.Rows[0]["DiscountAmount"].ToString() != "")
                    if (dtNewDiscount.Rows.Count > 0)
                    {
                        lblDiscount.Content = String.Format("{0:0.00}", (dtNewDiscount.Rows[0]["DiscountAmt"].ToString().Trim() == "") ? 0.00 : double.Parse(dtNewDiscount.Rows[0]["DiscountAmt"].ToString()));
                    }
                    else
                    {
                        lblDiscount.Content = "0.00";
                    }
                    // lblSalesTotal.Content =String.Format("{0:0.00}",double.Parse(ds.Tables["ADP11"].Rows[0]["Grand"].ToString()));
                    double dis, sTot;
                    if (lblDiscount.Content.ToString() == null || lblDiscount.Content.ToString() == "")
                    {
                        dis = 0.00;
                    }
                    else
                    {
                        dis = double.Parse(lblDiscount.Content.ToString());
                    }
                    if (lblSubTot.Content.ToString() == null || lblSubTot.Content.ToString() == "")
                    {
                        sTot = 0.00;
                    }
                    else
                    {
                        sTot = double.Parse(lblSubTot.Content.ToString());
                    }


                    //lblGrandTot.Content = String.Format("{0:0.00}", (sTot));

                    //munies code

                    if (_Class.clsVariables.tViewCash == true)
                    {

                        lblGrandTot.Content = String.Format("{0:0.00}", (sTot));
                    }
                    else
                    {
                        lblGrandTot.Content = "0.00";
                        lblSubTot.Content = "0.00";
                        lblSalesTotal.Content = "0.00";
                        lblSalesCount.Content = "0.00";

                        lblNetSalesCount.Content = "0.00";
                        lblNetSalesTotal.Content = "0.00";
                        lblCreditCardSalesCount.Content = "0.00";
                        lblCreditCardSalesTotal.Content = "0.00";
                        lblHouseACSalesCount.Content = "0.00";
                        lblHouseACSalesTotal.Content = "0.00";
                        lblVoucherSalesCount.Content = "0.00";
                        lblVoucherSalesTotal.Content = "0.00";
                        lblSalesmenCount.Content = "0.00";
                        lblSalesmenTotal.Content = "0.00";
                        lblTransCount.Content = "0.00";
                        lblSubTot.Content = "0.00";
                        lblDiscount.Content = "0.00";
                        lblGrandTot.Content = "0.00";
                    }
                }


                tPrintingType = "";
                mainStr = "";
                listDisplay.Items.Clear();



                funPrintHeaderPart();
                charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                topLine1 = "END OF DAY REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}

                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Counter : " + _Class.clsVariables.tCounterName;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                string Amound_2Chk = "0.00";
                //Print Line Below Header
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }
                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                ds.Tables.Clear();
                //mainStrSub = "";
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "CASH SALES";
                string rate = lblSalesTotal.Content.ToString();
                Amound_2Chk = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                //        break;
                //    }

                //}
                dt_griddiaplay.Rows.Clear();
                if (_Class.clsVariables.tViewCash == true)
                    dt_griddiaplay.Rows.Add("CASH SALES", Amound_2Chk, "", "");
                else
                    dt_griddiaplay.Rows.Add("CASH SALES", "0.00", "", "");
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "NETS SALES";
                rate = lblNetSalesTotal.Content.ToString();
                Amound_2Chk = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                //        break;
                //    }
                //}
                dt_griddiaplay.Rows.Add("NETS SALES", Amound_2Chk, "", "");
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "CREDIT CARD SALES";
                rate = lblCreditCardSalesTotal.Content.ToString();
                Amound_2Chk = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                //        break;
                //    }
                //}
                dt_griddiaplay.Rows.Add("CREDIT CARD SALES", Amound_2Chk, "", "");


                DataTable dtPayment = new DataTable();
                dtPayment.Rows.Clear();
                //SqlCommand cmdPayment = new SqlCommand("Select Ledger_name,SUM(SalRecv_Amt) as Amt from SalRecv_table,salmas_table, Ledger_table where Ledger_table.Ledger_no=SalRecv_table.SalRecv_Led and SalRecv_table.SalRecv_Led=salmas_table.smas_billno and Ledger_table.Ledger_groupno=5  and Ledger_no <> 14 and smas_billdate=@tBillDate group by SalRecv_table.SalRecv_Led, Ledger_name", con);
                SqlCommand cmdPayment = new SqlCommand("Select Ledger_name,SUM(SalRecv_Amt) as Amt from SalRecv_table,salmas_table, Ledger_table where  salmas_table.smas_rtno=0 and Ledger_table.Ledger_no=SalRecv_table.SalRecv_Led and  SalRecv_Salno=smas_billno and Ledger_table.Ledger_groupno=5  and Ledger_no <> 14 and smas_billdate=@tBillDate group by Ledger_name", con);
                cmdPayment.Parameters.AddWithValue("@tBillDate", currentDate);
                SqlDataAdapter adpPayment = new SqlDataAdapter(cmdPayment);
                adpPayment.Fill(dtPayment);
                DataTable dtReturnValue = new DataTable();
                double tReturnValueAmt = 0.00;
                for (int mn = 0; mn < dtPayment.Rows.Count; mn++)
                {
                    //dt_griddiaplay.Rows.Add( " >"+dtPayment.Rows[mn]["Ledger_name"].ToString().Trim(), string.Format("{0:0.00}", (dtPayment.Rows[mn]["Amt"].ToString().Trim() == "" ? 0.00 : double.Parse(dtPayment.Rows[mn]["Amt"].ToString().Trim()))), "", "");
                    //string temp1 = " >" + dtPayment.Rows[mn]["Ledger_name"].ToString().Trim();
                    //mainStr += ((temp1.Length < (double.Parse(charPerLine) - 12)) ? temp1 : temp1.Substring(0, (int)(double.Parse(charPerLine) - 13))) + " : " + string.Format("{0:0.00}", (dtPayment.Rows[mn]["Amt"].ToString().Trim() == "" ? 0.00 : double.Parse(dtPayment.Rows[mn]["Amt"].ToString().Trim())));
                    //for (int j = 0; j < (double.Parse(charPerLine) - temp1.Length); j++)
                    //{
                    //    mainStr += " ";
                    //}
                    //mainStr += "\n";

                    dtReturnValue.Rows.Clear();
                    SqlCommand cmdReturnValue = new SqlCommand("select convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where Smas_Cancel<>1 and smas_rtno<>0 and party_no=(Select Ledger_no from Ledger_table where Ledger_name=@tLedgerName) and smas_billdate=@tBillDate", con);
                    cmdReturnValue.Parameters.AddWithValue("@tLedgerName", dtPayment.Rows[mn]["Ledger_name"].ToString().Trim());
                    cmdReturnValue.Parameters.AddWithValue("@tBillDate", currentDate);
                    SqlDataAdapter adpReturnValue = new SqlDataAdapter(cmdReturnValue);
                    adpReturnValue.Fill(dtReturnValue);
                    tReturnValueAmt = 0.00;
                    if (dtReturnValue.Rows.Count > 0)
                    {
                        tReturnValueAmt = (dtReturnValue.Rows[0]["Amount"].ToString().Trim() == "") ? 0.00 : double.Parse(dtReturnValue.Rows[0]["Amount"].ToString().Trim());
                    }
                    if (_Class.clsVariables.tViewCash == true)
                        dt_griddiaplay.Rows.Add(" >" + dtPayment.Rows[mn]["Ledger_name"].ToString().Trim(), string.Format("{0:0.00}", (dtPayment.Rows[mn]["Amt"].ToString().Trim() == "" ? 0.00 : (double.Parse(dtPayment.Rows[mn]["Amt"].ToString().Trim()) - tReturnValueAmt))), "", "");
                    else
                        dt_griddiaplay.Rows.Add(" >" + dtPayment.Rows[mn]["Ledger_name"].ToString().Trim(), "0.00", "", "");
                    string temp1 = " >" + dtPayment.Rows[mn]["Ledger_name"].ToString().Trim();
                    if (_Class.clsVariables.tViewCash == true)
                        mainStr += ((temp1.Length < (double.Parse(charPerLine) - 12)) ? temp1 : temp1.Substring(0, (int)(double.Parse(charPerLine) - 13))) + " : " + string.Format("{0:0.00}", (dtPayment.Rows[mn]["Amt"].ToString().Trim() == "" ? 0.00 : (double.Parse(dtPayment.Rows[mn]["Amt"].ToString().Trim()) - tReturnValueAmt)));
                    else
                        mainStr += ((temp1.Length < (double.Parse(charPerLine) - 12)) ? temp1 : temp1.Substring(0, (int)(double.Parse(charPerLine) - 13))) + " : " + string.Format("{0:0.00}", ("0.00"));
                    for (int j = 0; j < (double.Parse(charPerLine) - temp1.Length); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }

                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "HOUSE ACCOUNT SALES";
                rate = lblHouseACSalesTotal.Content.ToString();
                Amound_2Chk = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                //        break;
                //    }
                //}
                dt_griddiaplay.Rows.Add("HOUSE ACCOUNT SALES", Amound_2Chk, "", "");


                DataTable dtPayment1 = new DataTable();
                dtPayment1.Rows.Clear();
                // SqlCommand cmdPayment1 = new SqlCommand("Select Ledger_name,SUM(SalRecv_Amt) as Amt from SalRecv_table,salmas_table, Ledger_table where  salmas_table.smas_rtno=0 and Ledger_table.Ledger_no=SalRecv_table.SalRecv_Led and SalRecv_table.SalRecv_Led=salmas_table.smas_billno and Ledger_table.Ledger_groupno=32  and Ledger_no <> 2 and smas_billdate=@tBillDate group by SalRecv_table.SalRecv_Led, Ledger_name", con);
                SqlCommand cmdPayment1 = new SqlCommand("Select Ledger_name,SUM(SalRecv_Amt) as Amt from SalRecv_table,salmas_table, Ledger_table where  salmas_table.smas_rtno=0 and  salmas_table.smas_cancel=0 and Ledger_table.Ledger_no=SalRecv_table.SalRecv_Led  and SalRecv_Salno=smas_billno and Ledger_table.Ledger_groupno=32  and Ledger_no <> 2 and smas_billdate=@tBillDate group by Ledger_name", con);
                cmdPayment1.Parameters.AddWithValue("@tBillDate", currentDate);
                SqlDataAdapter adpPayment1 = new SqlDataAdapter(cmdPayment1);
                adpPayment1.Fill(dtPayment1);

                for (int mn = 0; mn < dtPayment1.Rows.Count; mn++)
                {

                    dtReturnValue.Rows.Clear();
                    SqlCommand cmdReturnValue = new SqlCommand("select convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where Smas_Cancel<>1 and smas_rtno<>0 and party_no=(Select Ledger_no from Ledger_table where Ledger_name=@tLedgerName) and smas_billdate=@tBillDate", con);
                    cmdReturnValue.Parameters.AddWithValue("@tLedgerName", dtPayment1.Rows[mn]["Ledger_name"].ToString().Trim());
                    cmdReturnValue.Parameters.AddWithValue("@tBillDate", currentDate);
                    SqlDataAdapter adpReturnValue = new SqlDataAdapter(cmdReturnValue);
                    adpReturnValue.Fill(dtReturnValue);
                    tReturnValueAmt = 0.00;
                    if (dtReturnValue.Rows.Count > 0)
                    {
                        tReturnValueAmt = (dtReturnValue.Rows[0]["Amount"].ToString().Trim() == "") ? 0.00 : double.Parse(dtReturnValue.Rows[0]["Amount"].ToString().Trim());
                    }
                    if (_Class.clsVariables.tViewCash == true)
                        dt_griddiaplay.Rows.Add(" >" + dtPayment1.Rows[mn]["Ledger_name"].ToString().Trim(), string.Format("{0:0.00}", (dtPayment1.Rows[mn]["Amt"].ToString().Trim() == "" ? 0.00 : (double.Parse(dtPayment1.Rows[mn]["Amt"].ToString().Trim()) - tReturnValueAmt))), "", "");
                    else
                        dt_griddiaplay.Rows.Add(" >" + dtPayment1.Rows[mn]["Ledger_name"].ToString().Trim(), "0.00", "", "");
                    string temp1 = " >" + dtPayment1.Rows[mn]["Ledger_name"].ToString().Trim();
                    if (_Class.clsVariables.tViewCash == true)
                        mainStr += ((temp1.Length < (double.Parse(charPerLine) - 12)) ? temp1 : temp1.Substring(0, (int)(double.Parse(charPerLine) - 13))) + " : " + string.Format("{0:0.00}", (dtPayment1.Rows[mn]["Amt"].ToString().Trim() == "" ? 0.00 : (double.Parse(dtPayment1.Rows[mn]["Amt"].ToString().Trim()) - tReturnValueAmt)));
                    else
                        mainStr += ((temp1.Length < (double.Parse(charPerLine) - 12)) ? temp1 : temp1.Substring(0, (int)(double.Parse(charPerLine) - 13))) + " : " + string.Format("{0:0.00}", ("0.00"));
                    for (int j = 0; j < (double.Parse(charPerLine) - temp1.Length); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }

                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "VOUCHER SALES";
                rate = lblVoucherSalesTotal.Content.ToString();
                if (_Class.clsVariables.tViewCash == true)
                    Amound_2Chk = rate.ToString();
                else
                    Amound_2Chk = "0.00";
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                //        break;
                //    }
                //}

                dt_griddiaplay.Rows.Add("VOUCHER SALES", Amound_2Chk, "", "");


                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "SALESMEN TOTAL";
                rate = lblSalesmenTotal.Content.ToString();
                Amound_2Chk = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                //        break;
                //    }
                //}
                dt_griddiaplay.Rows.Add("SALESMEN TOTAL", Amound_2Chk, "", "");

                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "SUBTOTAL";
                rate = lblSubTot.Content.ToString();
                if (_Class.clsVariables.tViewCash == true)
                    Amound_2Chk = rate.ToString();
                else
                    Amound_2Chk = "0.00";
                //Amound_2Chk = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                //        break;
                //    }
                //}
                dt_griddiaplay.Rows.Add("SUBTOTAL", Amound_2Chk, "", "");



                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "DISCOUNT";
                rate = lblDiscount.Content.ToString();
                if (_Class.clsVariables.tViewCash == true)
                    Amound_2Chk = rate.ToString();
                else
                    Amound_2Chk = "0.00";
                //Amound_2Chk = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                //        break;
                //    }
                //}
                dt_griddiaplay.Rows.Add("", "", "", "");
                dt_griddiaplay.Rows.Add("DISCOUNT", Amound_2Chk, "", "");

                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                findCenterPosition = (double.Parse(charPerLine) - 15);
                topLine1 = "TOTAL";
                rate = lblGrandTot.Content.ToString();
                if (_Class.clsVariables.tViewCash == true)
                    Amound_2Chk = rate.ToString();
                else
                    Amound_2Chk = "0.00";
                //Amound_2Chk = rate.ToString();
                mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                if (rate.Length <= 15)
                {
                    mainStr += rate.PadLeft(15, ' ');
                }
                mainStr += "\n";
                //        break;
                //    }
                //}
                dt_griddiaplay.Rows.Add("TOTAL", Amound_2Chk, "", "");

                dt_griddiaplay.Rows.Add("", "", "", "");
                DataTable dtPaymentAmt = new DataTable();
                dtPaymentAmt.Rows.Clear();
                SqlCommand cmdPayment4 = new SqlCommand(@"Create Table #TempTable1 (PaymentLedger_No varchar(400),Ledger_groupno1 varchar(400),Payment_Amt Numeric(18,2)) 
INSERT INTO #TempTable1 (PaymentLedger_No,Ledger_groupno1,Payment_Amt) (Select PaymentLedger_No as PaymentLedger_No,Ledger_groupno1 as Ledger_groupno1,(case when Ledger_groupno1=32 then  SUM(Payment_Amt) else -(SUM(Payment_Amt)) EnD) as Payment_Amt  from PaymentDetail_table where EndOfDay=@tDate  group by PaymentLedger_No,Ledger_GroupNo1)
Select 'Payment '+Ledger_table.Ledger_name as PaymentMode,SUM(Payment_Amt) as Amount from #TempTable1, Ledger_table where #TempTable1.PaymentLedger_No=Ledger_table.Ledger_no group by Ledger_table.Ledger_name
DROP TABLE #TempTable1", con);
                cmdPayment4.Parameters.AddWithValue("@tDate", currentDate);
                //  cmdPayment4.Parameters.AddWithValue("@tCounterNo", tCounterNoNew);
                SqlDataAdapter adpPayment4 = new SqlDataAdapter(cmdPayment4);
                adpPayment4.Fill(dtPaymentAmt);

                findCenterPosition = (double.Parse(charPerLine) - 15);
                for (int mn = 0; mn < dtPaymentAmt.Rows.Count; mn++)
                {
                    topLine1 = dtPaymentAmt.Rows[mn]["PaymentMode"].ToString();
                    if (_Class.clsVariables.tViewCash == true)
                        rate = dtPaymentAmt.Rows[mn]["Amount"].ToString();
                    else
                        rate = "0.00";
                    mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                    if (rate.Length <= 15)
                    {
                        mainStr += rate.PadLeft(15, ' ');
                    }
                    mainStr += "\n";
                    if (_Class.clsVariables.tViewCash == true)
                        dt_griddiaplay.Rows.Add(dtPaymentAmt.Rows[mn]["PaymentMode"].ToString(), dtPaymentAmt.Rows[mn]["Amount"].ToString());
                    else
                        dt_griddiaplay.Rows.Add(dtPaymentAmt.Rows[mn]["PaymentMode"].ToString(), "0.00");
                }

                DataTable dtPaymentIn = new DataTable();
                dtPaymentIn.Rows.Clear();
                SqlCommand cmdPaymentIn = new SqlCommand("Select Ledger_name as PaymentMode, sum(Payment_Amt) as Amount from PaymentDetail_table,Ledger_table where PaymentDetail_table.PaymentLedger_No=Ledger_table.Ledger_no and Ledger_groupNo1=32 and EndOfDay=@tDate group by Ledger_name", con);
                cmdPaymentIn.Parameters.AddWithValue("@tDate", currentDate);
                // cmdPaymentIn.Parameters.AddWithValue("@tCounterNo", tCounterNoNew);
                SqlDataAdapter adpPaymentIn = new SqlDataAdapter(cmdPaymentIn);
                adpPaymentIn.Fill(dtPaymentIn);



                for (int mn = 0; mn < dtPaymentIn.Rows.Count; mn++)
                {
                    if (mn == 0)
                    {
                        dt_griddiaplay.Rows.Add("", "");
                        dt_griddiaplay.Rows.Add("Payment-In", "");

                        topLine1 = "Payment-In";
                        rate = "";
                        mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                        if (rate.Length <= 15)
                        {
                            mainStr += rate.PadLeft(15, ' ');
                        }
                        mainStr += "\n";
                    }

                    topLine1 = dtPaymentIn.Rows[mn]["PaymentMode"].ToString();
                    if (_Class.clsVariables.tViewCash == true)
                        rate = dtPaymentIn.Rows[mn]["Amount"].ToString();
                    else
                        rate = "0.00";

                    mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                    if (rate.Length <= 15)
                    {
                        mainStr += rate.PadLeft(15, ' ');
                    }
                    mainStr += "\n";
                    if (_Class.clsVariables.tViewCash == true)
                        dt_griddiaplay.Rows.Add(dtPaymentIn.Rows[mn]["PaymentMode"].ToString(), dtPaymentIn.Rows[mn]["Amount"].ToString());
                    else
                        dt_griddiaplay.Rows.Add(dtPaymentIn.Rows[mn]["PaymentMode"].ToString(), "0.00");
                }

                dtPaymentIn.Rows.Clear();
                cmdPaymentIn = new SqlCommand("Select Ledger_name as PaymentMode, sum(Payment_Amt) as Amount from PaymentDetail_table,Ledger_table where PaymentDetail_table.PaymentLedger_No=Ledger_table.Ledger_no and Ledger_groupNo1=31  and EndOfDay=@tDate group by Ledger_name", con);
                cmdPaymentIn.Parameters.AddWithValue("@tDate", currentDate);
                // cmdPaymentIn.Parameters.AddWithValue("@tCounterNo", tCounterNoNew);
                adpPaymentIn = new SqlDataAdapter(cmdPaymentIn);
                adpPaymentIn.Fill(dtPaymentIn);
                for (int mn = 0; mn < dtPaymentIn.Rows.Count; mn++)
                {
                    if (mn == 0)
                    {
                        dt_griddiaplay.Rows.Add("", "");
                        dt_griddiaplay.Rows.Add("Payment-Out", "");
                        topLine1 = "Payment-Out";
                        rate = "";
                        mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                        if (rate.Length <= 15)
                        {
                            mainStr += rate.PadLeft(15, ' ');
                        }
                        mainStr += "\n";
                    }
                    topLine1 = dtPaymentIn.Rows[mn]["PaymentMode"].ToString();
                    if (_Class.clsVariables.tViewCash == true)
                        rate = dtPaymentIn.Rows[mn]["Amount"].ToString();
                    else
                        rate = "0.00";
                    mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                    if (rate.Length <= 15)
                    {
                        mainStr += rate.PadLeft(15, ' ');
                    }
                    mainStr += "\n";
                    dt_griddiaplay.Rows.Add(dtPaymentIn.Rows[mn]["PaymentMode"].ToString(), dtPaymentIn.Rows[mn]["Amount"].ToString());
                }

                dtPaymentIn.Rows.Clear();
                cmdPaymentIn = new SqlCommand(@"Select a.Ledger_name as PaymentMode,SUM(Amt) as Amount from (Select Ledger_name, sum(Payment_Amt) as Amt from PaymentDetail_table,Ledger_table where PaymentDetail_table.PaymentLedger_No=Ledger_table.Ledger_no and Ledger_groupNo1=25 and  EndOfDay=@tDate group by Ledger_name
Union 
Select Ledger_name, sum(Payment_Amt) as Amt from PaymentDetail_table,Ledger_table where PaymentDetail_table.PaymentLedger_No=Ledger_table.Ledger_no and Ledger_GroupNo1=26 and EndOfDay=@tDate group by Ledger_name)
as a group by a.Ledger_name", con);
                cmdPaymentIn.Parameters.AddWithValue("@tDate", currentDate);
                //  cmdPaymentIn.Parameters.AddWithValue("@tCounterNo", tCounterNoNew);
                adpPaymentIn = new SqlDataAdapter(cmdPaymentIn);
                adpPaymentIn.Fill(dtPaymentIn);
                for (int mn = 0; mn < dtPaymentIn.Rows.Count; mn++)
                {
                    if (mn == 0)
                    {
                        dt_griddiaplay.Rows.Add("", "");
                        dt_griddiaplay.Rows.Add("Expense", "");
                        topLine1 = "Expense";
                        rate = "";
                        mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                        if (rate.Length <= 15)
                        {
                            mainStr += rate.PadLeft(15, ' ');
                        }
                        mainStr += "\n";
                    }
                    topLine1 = dtPaymentIn.Rows[mn]["PaymentMode"].ToString();
                    if (_Class.clsVariables.tViewCash == true)
                        rate = dtPaymentIn.Rows[mn]["Amount"].ToString();
                    else
                        rate = "0.00";
                    mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                    if (rate.Length <= 15)
                    {
                        mainStr += rate.PadLeft(15, ' ');
                    }
                    mainStr += "\n";
                    if (_Class.clsVariables.tViewCash == true)
                        dt_griddiaplay.Rows.Add(dtPaymentIn.Rows[mn]["PaymentMode"].ToString(), dtPaymentIn.Rows[mn]["Amount"].ToString());
                    else
                        dt_griddiaplay.Rows.Add(dtPaymentIn.Rows[mn]["PaymentMode"].ToString(), "0.00");
                }
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //        topLine1 = "Cash Sales";
                //        string rate=lblSalesTotal.Content.ToString();
                //        mainStrSub += topLine1.ToString();
                //        for (int i1 = 0; i1 < (double.Parse(charPerLine) - (topLine1.Length + rate.Length)); i1++)
                //        {
                //            mainStrSub += " ";
                //        }
                //        mainStrSub += rate;
                //        mainStrSub += "\n";
                //    }
                //}
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //        topLine1 = "NETS Sales";
                //        string rate =lblNetSalesTotal.Content.ToString();
                //        mainStrSub += topLine1.ToString();
                //        for (int i1 = 0; i1 < (double.Parse(charPerLine) - (topLine1.Length + rate.Length)); i1++)
                //        {
                //            mainStrSub += " ";
                //        }
                //        mainStrSub += rate;
                //        mainStrSub += "\n";
                //    }
                //}
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //        topLine1 = "Credit Card Sales";
                //        string rate =lblCreditCardSalesTotal.Content.ToString();
                //        mainStrSub += topLine1.ToString();
                //        for (int i1 = 0; i1 < (double.Parse(charPerLine) - (topLine1.Length + rate.Length)); i1++)
                //        {
                //            mainStrSub += " ";
                //        }
                //        mainStrSub += rate;
                //        mainStrSub += "\n";
                //    }
                //}

                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //        topLine1 = "House Account Sales";
                //        string rate = lblHouseACSalesTotal.Content.ToString();
                //        mainStrSub += topLine1.ToString();
                //        for (int i1 = 0; i1 < (double.Parse(charPerLine) - (topLine1.Length + rate.Length)); i1++)
                //        {
                //            mainStrSub += " ";
                //        }
                //        mainStrSub += rate;
                //        mainStrSub += "\n";
                //    }
                //}
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //        topLine1 = "Voucher Sales";
                //        string rate =lblVoucherSalesTotal.Content.ToString();
                //        mainStrSub += topLine1.ToString();
                //        for (int i1 = 0; i1 < (double.Parse(charPerLine) - (topLine1.Length + rate.Length)); i1++)
                //        {
                //            mainStrSub += " ";
                //        }
                //        mainStrSub += rate;
                //        mainStrSub += "\n";
                //    }
                //}
                //MessageBox.Show(mainStrSub.ToString());
                // mainStr += mainStrSub;
                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                //        // findCenterPosition = (double.Parse(charPerLine) - 8);

                //        topLine1 = "DRAWER START";
                //        mainStr += topLine1.PadRight((int.Parse(charPerLine) - 8), ' ');
                //        string rate = lblStartAmt.Content.ToString().Trim();
                //        mainStr += rate.PadLeft(8, ' ') + "\n";
                //        break;

                //    }

                //}
                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                //        // findCenterPosition = (double.Parse(charPerLine) - 8);

                //        topLine1 = "CASH     ";
                //        mainStr += topLine1.PadRight((int.Parse(charPerLine) - 8), ' ');
                //        string rate = (double.Parse(lblCashInDrawer.Content.ToString()) - double.Parse(lblStartAmt.Content.ToString())).ToString();
                //        mainStr += rate.PadLeft(8, ' ') + "\n";
                //        break;
                //    }

                //}


                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                // listDisplay.Items.Add(mainStr);
                gridItemsManager.DataSource = dt_griddiaplay.DefaultView;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 60;
                this.gridItemsManager.Columns[1].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

                //string[] temp11 = mainStr.Split('\n');
                //dtChkPrint.Rows.Clear();
                //for (int i = 0; i < temp11.Length; i++)
                //{
                //    dtChkPrint.Rows.Add(temp11[i].ToString());
                //}
                //gridItems1.DataSource = dtChkPrint;
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }
        SqlCommand cmdMain = new SqlCommand();
        DataTable dtReset = new DataTable();
        string tActionType = "";
        void funCounterDisplay()
        {
            pnlCommon.Visibility = Visibility.Collapsed;
            pnlCounterBtn.Visibility = Visibility.Visible;
            // if(con.State==ConnectionState.Open)
            //{
            //    con.Close();
            //}
            //con.Open();
            // dtReset.Rows.Clear();
            //cmdMain.CommandText="Select * from resetDrawer_table";
            //cmdMain.Connection = con;
            //SqlDataAdapter adp = new SqlDataAdapter(cmdMain);
            //adp.Fill(dtReset);
            //if (dtReset.Rows.Count > 0)
            //{
            //    txtCount100.Text = dtReset.Rows[0]["Coin_100"].ToString();
            //    txtCount50.Text = dtReset.Rows[0]["Coin_50"].ToString();
            //    txtCount20.Text = dtReset.Rows[0]["Coin_20"].ToString();
            //    txtCount10.Text = dtReset.Rows[0]["Coin_10"].ToString();
            //    txtCount5.Text = dtReset.Rows[0]["Coin_5"].ToString();
            //    txtCount2.Text = dtReset.Rows[0]["Coin_2"].ToString();
            //    txtCount1.Text = dtReset.Rows[0]["Coin_1"].ToString();
            //    txtCountP50.Text = dtReset.Rows[0]["Coin_P50"].ToString();
            //    txtCountP20.Text = dtReset.Rows[0]["Coin_P25"].ToString();
            //    txtCountP10.Text = dtReset.Rows[0]["Coin_P10"].ToString();
            //    txtCountP05.Text = dtReset.Rows[0]["Coin_P05"].ToString();
            //    txtCount1000.Text = dtReset.Rows[0]["Coin_P01"].ToString();
            //}
            //else
            //{
            txtCount100.Text = "";
            txtCount50.Text = "";
            txtCount20.Text = "";
            txtCount10.Text = "";
            txtCount5.Text = "";
            txtCount2.Text = "";
            txtCount1.Text = "";
            txtCountP50.Text = "";
            txtCountP20.Text = "";
            txtCountP10.Text = "";
            txtCountP05.Text = "";
            txtCount1000.Text = "";
            // }

        }
        double tTxt;
        string test = "First";
        //string textboxname = "";
        public void textbox(object sender, TextChangedEventArgs e)
        {
            try
            {

                if (test != "First")
                {
                    TextBox txt = (TextBox)sender;
                    // MessageBox.Show(txt.Name);
                    if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                    {
                        tTxt = 0.00;
                    }
                    else
                    {

                        tTxt = double.Parse(txt.Text.Trim());
                    }
                    if (txt.Name == "txtCount100")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        // MessageBox.Show((100 * tTxt).ToString());
                        lblTotal100.Content = String.Format("{0:0.00}", (100 * tTxt));

                    }
                    if (txt.Name == "txtCount50")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotal50.Content = String.Format("{0:0.00}", (50 * tTxt));
                    }
                    if (txt.Name == "txtCount20")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotal20.Content = String.Format("{0:0.00}", (20 * tTxt));
                    }
                    if (txt.Name == "txtCount10")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotal10.Content = String.Format("{0:0.00}", (10 * tTxt));
                    }
                    if (txt.Name == "txtCount5")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotal5.Content = String.Format("{0:0.00}", (5 * tTxt));
                    }
                    if (txt.Name == "txtCount2")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotal2.Content = String.Format("{0:0.00}", (2 * tTxt));
                    }
                    if (txt.Name == "txtCount1")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotal1.Content = String.Format("{0:0.00}", (1 * tTxt));
                    }
                    if (txt.Name == "txtCountP50")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotalP50.Content = String.Format("{0:0.00}", (0.50 * tTxt));
                    }
                    if (txt.Name == "txtCountP20")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotalP25.Content = String.Format("{0:0.00}", (0.20 * tTxt));
                    }
                    if (txt.Name == "txtCountP10")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotalP10.Content = String.Format("{0:0.00}", (0.10 * tTxt));
                    }
                    if (txt.Name == "txtCountP05")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotalP05.Content = String.Format("{0:0.00}", (0.05 * tTxt));
                    }
                    if (txt.Name == "txtCount1000")
                    {
                        if (txt.Text.Trim() == "" || txt.Text.Trim() == null)
                        {
                            tTxt = 0.00;
                        }
                        lblTotal1000.Content = String.Format("{0:0.00}", (1000 * tTxt));
                    }
                    //if (txtCount20.Text.Trim() == "")
                    //{
                    //    txtCount20.Text = "0";
                    //}

                    //  if ( && txtCount50.Text != "" && txtCount10.Text != "" && txtCount5.Text != "" && txtCount2.Text != "" && txtCount1.Text != "" && txtCountP50.Text != "" && txtCountP20.Text != "" && txtCountP10.Text != "" && txtCountP05.Text != "" && txtCount1000.Text != "")
                    {
                        txtCountTotal.Text = String.Format("{0:0.00}", (((txtCount100.Text.Trim() == "") ? 0.00 : double.Parse(txtCount100.Text.Trim())) + ((txtCount50.Text.Trim() == "") ? 0.00 : double.Parse(txtCount50.Text.Trim())) + ((txtCount20.Text.Trim() == "") ? 0.00 : double.Parse(txtCount20.Text.Trim())) + ((txtCount10.Text.Trim() == "") ? 0.00 : double.Parse(txtCount10.Text.Trim())) + ((txtCount5.Text.Trim() == "") ? 0.00 : double.Parse(txtCount5.Text.Trim())) + ((txtCount2.Text.Trim() == "") ? 0.00 : double.Parse(txtCount2.Text.Trim())) + ((txtCount1.Text.Trim() == "") ? 0.00 : double.Parse(txtCount1.Text.Trim())) + ((txtCountP50.Text.Trim() == "") ? 0.00 : double.Parse(txtCountP50.Text.Trim())) + ((txtCountP20.Text.Trim() == "") ? 0.00 : double.Parse(txtCountP20.Text.Trim())) + ((txtCountP10.Text.Trim() == "") ? 0.00 : double.Parse(txtCountP10.Text.Trim())) + ((txtCountP05.Text.Trim() == "") ? 0.00 : double.Parse(txtCountP05.Text.Trim())) + ((txtCount1000.Text.Trim() == "") ? 0.00 : double.Parse(txtCount1000.Text.Trim()))));
                        lblTotalTotal.Content = String.Format("{0:0.00}", (double.Parse(lblTotal100.Content.ToString()) + double.Parse(lblTotal50.Content.ToString()) + double.Parse(lblTotal20.Content.ToString()) + double.Parse(lblTotal10.Content.ToString()) + double.Parse(lblTotal5.Content.ToString()) + double.Parse(lblTotal2.Content.ToString()) + double.Parse(lblTotal1.Content.ToString()) + double.Parse(lblTotalP50.Content.ToString()) + double.Parse(lblTotalP25.Content.ToString()) + double.Parse(lblTotalP10.Content.ToString()) + double.Parse(lblTotalP05.Content.ToString()) + double.Parse(lblTotal1000.Content.ToString())));
                        lblDisBeginCash.Content = lblCashInDrawer.Content;
                        lblDisEndCash.Content = lblTotalTotal.Content;
                        double chkStatus = (double.Parse(lblTotalTotal.Content.ToString()) - double.Parse(lblCashInDrawer.Content.ToString()));
                        if (chkStatus == 0)
                        {
                            lblDisStatus.Content = "Match";
                        }
                        else if (chkStatus >= 0)
                        {
                            lblDisStatus.Content = "Over";
                        }
                        else if (chkStatus < 0)
                        {
                            lblDisStatus.Content = "Short";
                        }
                        lblDisRemaining.Content = String.Format("{0:0.00}", chkStatus.ToString());
                    }
                    //    if (tActionType == "Cash")
                    //    {
                    //        lblBeginCount.Content = String.Format("{0:0.00}", lblTotalTotal.Content);
                    //        lblStatus.Content = "Nil";
                    //    }
                    //    if (tActionType == "Cash")
                    //    {
                    //        lblEndCount.Content = String.Format("{0:0.00}", lblTotalTotal.Content);
                    //        //lblStatus.Content = "Nil";
                    //        double chkStatus = (double.Parse(lblTotalTotal.Content.ToString()) - double.Parse(lblBeginCount.Content.ToString()));
                    //        if (chkStatus == double.Parse(lblBeginCount.Content.ToString()))
                    //        {
                    //            lblStatus.Content = "Match";
                    //        }
                    //        else if(chkStatus >= double.Parse(lblBeginCount.Content.ToString()))
                    //        {
                    //            lblStatus.Content = "Over";
                    //        }
                    //        else if (chkStatus <= double.Parse(lblBeginCount.Content.ToString()))
                    //        {
                    //            lblStatus.Content = "Short";
                    //        }
                    //        lblBalance.Content =String.Format("{0:0.00}", chkStatus.ToString());
                    //    }

                    //}

                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }
        private void txtCount100_TextChanged(object sender, TextChangedEventArgs e)
        {
        }

        public static IEnumerable<T> FindVisualChildren<T>(DependencyObject depObj) where T : DependencyObject
        {
            if (depObj != null)
            {
                for (int i = 0; i < VisualTreeHelper.GetChildrenCount(depObj); i++)
                {
                    DependencyObject child = VisualTreeHelper.GetChild(depObj, i);
                    if (child != null && child is T)
                    {
                        yield return (T)child;
                    }

                    foreach (T childOfChild in FindVisualChildren<T>(child))
                    {
                        yield return childOfChild;
                    }
                }
            }
        }
        private void txtCount1000_GotFocus(object sender, RoutedEventArgs e)
        {

            try
            {
                TextBox txt = (TextBox)sender;
                //txt.Background = 
                txt.Foreground = Brushes.Blue;
                // foreach (Control cont in System.Windows.Forms.Control)
                txtCount1.Background = Brushes.White;
                txtCount10.Background = Brushes.White;
                txtCount100.Background = Brushes.White;
                txtCount1000.Background = Brushes.White;
                txtCount2.Background = Brushes.White;
                txtCount20.Background = Brushes.White;
                txtCount5.Background = Brushes.White;
                txtCount50.Background = Brushes.White;
                txtCountP05.Background = Brushes.White;
                txtCountP10.Background = Brushes.White;
                txtCountP20.Background = Brushes.White;
                txtCountP50.Background = Brushes.White;

                txt.Background = Brushes.Yellow;
                if (txt.Name == "txtCount1000")
                {
                    txtCountValue = "txtCount1000";
                }
                if (txt.Name == "txtCount100")
                {
                    txtCountValue = "txtCount100";

                }
                if (txt.Name == "txtCount50")
                {
                    txtCountValue = "txtCount50";
                }
                if (txt.Name == "txtCount20")
                {
                    txtCountValue = "txtCount20";
                }
                if (txt.Name == "txtCount10")
                {
                    txtCountValue = "txtCount10";
                }
                if (txt.Name == "txtCount5")
                {
                    txtCountValue = "txtCount5";
                }
                if (txt.Name == "txtCount2")
                {
                    txtCountValue = "txtCount2";
                }
                if (txt.Name == "txtCount1")
                {
                    txtCountValue = "txtCount1";
                }
                if (txt.Name == "txtCountP50")
                {
                    txtCountValue = "txtCountP50";
                }
                if (txt.Name == "txtCountP20")
                {
                    txtCountValue = "txtCountP20";
                }
                if (txt.Name == "txtCountP10")
                {
                    txtCountValue = "txtCountP10";
                }
                if (txt.Name == "txtCountP05")
                {
                    txtCountValue = "txtCountP05";
                }

                txtCurrency.Text = txt.Text.Trim();
                //  txt.Text = "";
                txtCurrency.Focus();

                int curPOS = txtCurrency.SelectionStart;
                txtCurrency.Select(curPOS, 0);
                txtCurrency.Select(0, txtCurrency.Text.Length);
                //  txtCurrency.Select(txtCurrency.Text.Length, 0);
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }
        string tEnterValue;
        private void btnEnter_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //  TextBox txt = (TextBox)sender;
                if (txtCurrency.Text.Trim() == "" || txtCurrency.Text.Trim() == null)
                {
                    tEnterValue = "0";
                }
                else
                {
                    tEnterValue = txtCurrency.Text.Trim().TrimStart('0');
                }

                if (txtCountValue == "txtCount1000")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("1000"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((1000 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCount1000.Text = tEnterValue.ToString();
                    txtCount1000.Foreground = Brushes.Black;
                    btnSave.Focus();
                }
                if (txtCountValue == "txtCount100")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("100"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((100 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCount100.Text = tEnterValue.ToString();
                    txtCount100.Foreground = Brushes.Black;
                    txtCount1000.Focus();
                }

                if (txtCountValue == "txtCount50")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("50"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((50 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCount50.Text = tEnterValue.ToString();
                    txtCount50.Foreground = Brushes.Black;
                    txtCount100.Focus();
                }
                if (txtCountValue == "txtCount20")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("20"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((20 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCount20.Text = tEnterValue.ToString();
                    txtCount20.Foreground = Brushes.Black;
                    txtCount50.Focus();
                }
                if (txtCountValue == "txtCount10")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("10"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((10 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCount10.Text = tEnterValue.ToString();
                    txtCount10.Foreground = Brushes.Black;
                    txtCount20.Focus();
                }
                if (txtCountValue == "txtCount5")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("5"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((5 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCount5.Text = tEnterValue.ToString();
                    txtCount5.Foreground = Brushes.Black;
                    txtCount10.Focus();
                }
                if (txtCountValue == "txtCount2")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("2"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((2 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCount2.Text = tEnterValue.ToString();
                    txtCount2.Foreground = Brushes.Black;
                    txtCount5.Focus();
                }
                if (txtCountValue == "txtCount1")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("1"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((1 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCount1.Text = tEnterValue.ToString();
                    txtCount1.Foreground = Brushes.Black;
                    txtCount2.Focus();
                }
                if (txtCountValue == "txtCountP50")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("0.50"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((0.50 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCountP50.Text = tEnterValue.ToString();
                    txtCountP50.Foreground = Brushes.Black;
                    txtCount1.Focus();
                }
                if (txtCountValue == "txtCountP20")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("0.20"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((0.20 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCountP20.Text = tEnterValue.ToString();
                    txtCountP20.Foreground = Brushes.Black;
                    txtCountP50.Focus();
                }
                if (txtCountValue == "txtCountP10")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("0.10"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((0.10 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCountP10.Text = tEnterValue.ToString();
                    txtCountP10.Foreground = Brushes.Black;
                    txtCountP20.Focus();
                }
                if (txtCountValue == "txtCountP05")
                {
                    Object[] ob = { String.Format("{0:0.00}", (double.Parse("0.05"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((0.05 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                    dtCashDrawer.Rows.Add(ob);
                    txtCountP05.Text = tEnterValue.ToString();
                    txtCountP05.Foreground = Brushes.Black;
                    txtCountP10.Focus();
                }
                //   txtCurrency.Clear();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }

        private void btnZero_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string temp;
                txtCurrency.Focus();
                Button btn = (Button)sender;
                if (txtCurrency.Text != "")
                {
                    if (txtCurrency.SelectedText.Length > 0)
                    {
                        temp = "";
                    }
                    else
                    {
                        temp = txtCurrency.Text;

                    }
                    txtCurrency.Text = "";
                    txtCurrency.Text = temp + btn.Content.ToString();
                }
                if (txtCurrency.Text == "")
                {
                    txtCurrency.Text = btn.Content.ToString();
                }
                txtCurrency.Select(txtCurrency.Text.Length, 0);
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }

        private void btnClear_Click(object sender, RoutedEventArgs e)
        {
            txtCurrency.Text = string.Empty;
            txtHACPaymentAmt.Text = string.Empty;
        }

        public void funPrintCounterSettle()
        {
            try
            {
                tReportTitle = "END-OF-DAY DRAWER REPORT";
                dt_griddiaplay1.Rows.Clear();
                //DataTable dtNew = new DataTable();
                //dtNew.Rows.Clear();
                //SqlCommand cmdNew = new SqlCommand("Select distinct(User_no) as Userno from BeginCashDrawer_table where Date=(SELECT CONVERT(date,DATEADD(day,1,MAX(endofday))) from EndOfDay_Table) ", con);
                //SqlDataAdapter adp = new SqlDataAdapter(cmdNew);
                //adp.Fill(dtNew);
                //for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                //{
                funCounterReport(_Class.clsVariables.tUserNo);
                //}
                //dt_griddiaplay1.Rows.Add("", "");
                //dt_griddiaplay1.Rows.Add("Total Cash Sales", lblCCashSalesTotal.Content.ToString());
                //dt_griddiaplay1.Rows.Add("Total NETS Sales", lblCNETSSalesTotal.Content.ToString());
                //dt_griddiaplay1.Rows.Add("Total Credit Card Sales",lblCCreditCardSalesTotal.Content.ToString());
                //dt_griddiaplay1.Rows.Add("Total House AC Sales",lblCHouseACSalesTotal.Content.ToString());
                //dt_griddiaplay1.Rows.Add("Total Voucher Sales",lblCVoucherSalesTotal.Content.ToString());

                double tCCashSales = 0, tCNETSSales = 0, tCCreditCardSales = 0, tCHouseACSales = 0, tCVoucherSales = 0, tCSalesmenSales = 0;
                tCCashSales = (lblCCashSalesTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblCCashSalesTotal.Content.ToString());
                tCNETSSales = (lblCNETSSalesTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblCNETSSalesTotal.Content.ToString());
                tCCreditCardSales = (lblCCreditCardSalesTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblCCreditCardSalesTotal.Content.ToString());
                tCHouseACSales = (lblCHouseACSalesTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblCHouseACSalesTotal.Content.ToString());
                tCVoucherSales = (lblCVoucherSalesTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblCVoucherSalesTotal.Content.ToString());
                tCSalesmenSales = (lblCSalesmenTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblCSalesmenTotal.Content.ToString());
                //   dt_griddiaplay1.Rows.Add("Total Sales Amount",string.Format("{0:0.00}", tCCashSales+tCNETSSales+tCCreditCardSales+tCHouseACSales+tCVoucherSales));

                gridItemsManager.DataSource = dt_griddiaplay1;
                gridItemsManager.Columns[0].Width = 290;
                gridItemsManager.Columns[1].Width = 90;
                funDrawerPrint();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }


        //   int tBeginCashDrawId = 0;
        //   int tEndOfDayId = 0;
        //   DateTime tEndOfDayDate;
        double tBeginCash = 0;
        string tStatus;
        //  DateTime nextDay;
        // int tResetDrawerId = 0;

        private void PrintData1(string title)
        {
            //gridItemsManager.DataSource = dtCashDrawer;
            gridItemsManager.Columns[0].Width = 120;
            gridItemsManager.Columns[1].Width = 120;
            gridItemsManager.Columns[2].Width = 150;

            this.gridItemsManager.Columns[0].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
            this.gridItemsManager.Columns[1].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
            this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

            gridItemsManager.ColumnHeadersVisible = true;
            funPrintHeaderPart();

            charPerLine = _Class.clsVariables.tempGCharactersPerLine;
            topLine1 = title;
            if (topLine1.Length <= double.Parse(charPerLine))
            {
                findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                if (findCenterPosition % 2 == 0)
                {
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                else
                {
                    for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                mainStr += "\n";
            }

            topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
            if (topLine1.Length <= double.Parse(charPerLine))
            {
                findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                if (findCenterPosition % 2 == 0)
                {
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                else
                {
                    for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                mainStr += "\n";
            }

            //topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "-" + dpFrom.SelectedDate.Value.Month + "-" + dpFrom.SelectedDate.Value.Year + " - " + dpTo.SelectedDate.Value.Day + "-" + dpTo.SelectedDate.Value.Month + "-" + dpTo.SelectedDate.Value.Year;
            //if (topLine1.Length <= double.Parse(charPerLine))
            //{
            //    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
            //    if (findCenterPosition % 2 == 0)
            //    {
            //        for (int j = 0; j < (findCenterPosition / 2); j++)
            //        {
            //            mainStr += " ";
            //        }
            //        mainStr += topLine1;
            //        for (int j = 0; j < (findCenterPosition / 2); j++)
            //        {
            //            mainStr += " ";
            //        }
            //    }
            //    else
            //    {
            //        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
            //        {
            //            mainStr += " ";
            //        }
            //        mainStr += topLine1;
            //        for (int j = 0; j < (findCenterPosition / 2); j++)
            //        {
            //            mainStr += " ";
            //        }
            //    }
            //    mainStr += "\n";
            //}

            topLine1 = "Report Counter : " + ComboCounter.Text;
            if (topLine1.Length <= double.Parse(charPerLine))
            {
                findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                if (findCenterPosition % 2 == 0)
                {
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                else
                {
                    for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                mainStr += "\n";
            }

            lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
            //dtPrint.Rows[i4]["Property"].ToString();
            if (lineBelowLogo == "No Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += " ";
                }
                mainStr += "\n";
            }
            if (lineBelowLogo == "Single Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "-";
                }
                mainStr += "\n";
            }
            else if (lineBelowLogo == "Double Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "=";
                }
                mainStr += "\n";
            }
            string tempStr = null;
            string tQtyHeading = "";
            tQtyHeading = "Cash/Coin";
            double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 27));
            for (int j = 0; j < chkCount; j++)
            {
                tQtyHeading += " ";
            }
            tQtyHeading += "  Count    ";
            tQtyHeading += "      Total";
            mainStr += tQtyHeading;
            mainStr += "\n";
            lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
            if (lineBelowLogo == "No Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += " ";
                }
                mainStr += "\n";
            }
            if (lineBelowLogo == "Single Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "-";
                }
                mainStr += "\n";
            }
            else if (lineBelowLogo == "Double Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "=";
                }
                mainStr += "\n";
            }

            for (int mn = 0; mn < dtCashDrawer.Rows.Count; mn++)
            {
                bool isChk = false;

                if (isChk == false)
                {
                    for (int i = 0; i < 3; i++)
                    {
                        tempStr = dtCashDrawer.Rows[mn][i].ToString();
                        findCenterPosition = (double.Parse(charPerLine) - 30);
                        if (i == 0)
                        {
                            if (tempStr.Length <= (int)findCenterPosition)
                            {
                                mainStr += tempStr.PadLeft((int)findCenterPosition, ' ');
                            }
                            else
                            {
                                string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                int chkSpace = temp.LastIndexOf(" ");
                                int loc = (temp.Length - temp.LastIndexOf(" "));
                                if (chkSpace != -1)
                                {
                                    mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                    for (int j = 0; j < loc + 30; j++)
                                    {
                                        mainStr += " ";
                                    }
                                    mainStr += "\n";
                                    string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                    if (temp1.Length <= (int)findCenterPosition)
                                    {
                                        mainStr += temp1.PadLeft((int)findCenterPosition, ' ');
                                    }
                                }
                                else
                                {
                                    mainStr += temp.ToString();
                                }

                            }
                        }

                        if (i == 1)
                        {
                            if (tempStr.Length < 10)
                            {
                                mainStr += tempStr.PadLeft(10, ' ');
                            }
                        }

                        if (i == 2)
                        {
                            if (tempStr.Length <= 18)
                            {
                                mainStr += tempStr.PadLeft(18, ' ');
                            }
                        }
                    }
                    mainStr += "\n";
                }
            }

            lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
            if (lineBelowLogo == "No Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += " ";
                }
                mainStr += "\n";
            }
            if (lineBelowLogo == "Single Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "-";
                }
                mainStr += "\n";
            }
            else if (lineBelowLogo == "Double Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "=";
                }
                mainStr += "\n";

            }

        }


        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //   funConnectionStateCheck();
                if (tActionType == "Begin")
                {
                    SqlCommand cmd = new SqlCommand("sp_BeginCashDrawerInsert", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@tUser_no", _Class.clsVariables.tUserNo);
                    cmd.Parameters.AddWithValue("@tCoin_P05", (txtCountP05.Text.Trim() == "") ? "0" : txtCountP05.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_P10", (txtCountP10.Text.Trim() == "") ? "0" : txtCountP10.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_P20", (txtCountP20.Text.Trim() == "") ? "0" : txtCountP20.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_P50", (txtCountP50.Text.Trim() == "") ? "0" : txtCountP50.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_1", (txtCount1.Text.Trim() == "") ? "0" : txtCount1.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_2", (txtCount2.Text.Trim() == "") ? "0" : txtCount2.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_5", (txtCount5.Text.Trim() == "") ? "0" : txtCount5.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_10", (txtCount10.Text.Trim() == "") ? "0" : txtCount10.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_20", (txtCount20.Text.Trim() == "") ? "0" : txtCount20.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_50", (txtCount50.Text.Trim() == "") ? "0" : txtCount50.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_100", (txtCount100.Text.Trim() == "") ? "0" : txtCount100.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoin_1000", (txtCount1000.Text.Trim() == "") ? "0" : txtCount1000.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoinAmt_P05", (lblTotalP05.Content.ToString().Trim() == "") ? "0.00" : lblTotalP05.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_P10", (lblTotalP10.Content.ToString().Trim() == "") ? "0.00" : lblTotalP10.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_P20", (lblTotalP25.Content.ToString().Trim() == "") ? "0.00" : lblTotalP25.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_P50", (lblTotalP50.Content.ToString().Trim() == "") ? "0.00" : lblTotalP50.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_1", (lblTotal1.Content.ToString().Trim() == "") ? "0.00" : lblTotal1.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_2", (lblTotal2.Content.ToString().Trim() == "") ? "0.00" : lblTotal2.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_5", (lblTotal5.Content.ToString().Trim() == "") ? "0.00" : lblTotal5.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_10", (lblTotal10.Content.ToString().Trim() == "") ? "0.00" : lblTotal10.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_20", (lblTotal20.Content.ToString().Trim() == "") ? "0.00" : lblTotal20.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_50", (lblTotal50.Content.ToString().Trim() == "") ? "0.00" : lblTotal50.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_100", (lblTotal100.Content.ToString().Trim() == "") ? "0.00" : lblTotal100.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinAmt_1000", (lblTotal1000.Content.ToString().Trim() == "") ? "0.00" : lblTotal1000.Content.ToString());
                    cmd.Parameters.AddWithValue("@tCoinTot_Count", (txtCountTotal.Text.ToString().Trim() == "") ? "0" : txtCountTotal.Text.Trim());
                    cmd.Parameters.AddWithValue("@tCoinTot_Amount", (lblTotalTotal.Content.ToString().Trim() == "") ? "0.00" : lblTotalTotal.Content.ToString());
                    if (((lblTotalTotal.Content.ToString().Trim() == "") ? 0.00 : double.Parse(lblTotalTotal.Content.ToString())) > 0)
                    {
                        dtCashDrawer.Rows.Add("", "", "");
                        Object[] ob1 = { "Total ", Math.Round(Convert.ToDecimal(txtCountTotal.Text), 0), String.Format("{0:0.00}", (double.Parse(lblTotalTotal.Content.ToString()))) };
                        dtCashDrawer.Rows.Add(ob1);
                        cmd.ExecuteNonQuery();
                        if (_Class.clsVariables.CashDrawer == true)
                        {
                            PrintData1("BEGIN CASH DRAWER");
                            btnPrint_Click(sender, e);
                        }

                        pnlCommon.Visibility = Visibility.Hidden;
                        pnlCounterBtn.Visibility = Visibility.Hidden;
                        pnlCommon.Visibility = Visibility.Hidden;
                        pnlCounterBtn.Visibility = Visibility.Hidden;
                        btnCashDrawer_Click(sender, e);
                        dtCashDrawer.Rows.Clear();
                        //  FrmMain frm = new FrmMain();
                        ////  this.Hide();
                        //  frm.Show();
                        if (UCFrmManagerMainEvent_Finished != null)
                        {
                            UCFrmManagerMainEvent_Finished();
                        }

                    }
                    else
                    {
                        string tResult = MyMessageBox1.ShowBox("Are you sure to Save Begin-Cash-Drawer with Zero Value", "Warning");
                        if (tResult == "1")
                        {
                            cmd.ExecuteNonQuery();
                            pnlCommon.Visibility = Visibility.Hidden;
                            pnlCounterBtn.Visibility = Visibility.Hidden;
                            pnlCommon.Visibility = Visibility.Hidden;
                            pnlCounterBtn.Visibility = Visibility.Hidden;
                            btnCashDrawer_Click(sender, e);

                            //FrmMain frm = new FrmMain();
                            ////this.Hide();
                            //frm.Show();
                            if (UCFrmManagerMainEvent_Finished != null)
                            {
                                UCFrmManagerMainEvent_Finished();
                            }
                        }
                    }



                }



                if (tActionType == "EndOfDay")
                {

                    DataSet dsNew = new DataSet();
                    dsNew.Tables.Clear();
                    SqlDataAdapter cmd1 = new SqlDataAdapter("select CoinTot_Amount from BeginCashDrawer_Table where id=(Select max(id) from BeginCashDrawer_Table)", con);
                    cmd1.Fill(dsNew, "Coin");
                    // tEndOfDayId = 0;
                    if (dsNew.Tables["Coin"].Rows.Count > 0)
                    {
                        if (dsNew.Tables["Coin"].Rows[0][0].ToString() != null)
                        {
                            tBeginCash = double.Parse(dsNew.Tables["Coin"].Rows[0][0].ToString());
                            double EndOfDayCash = double.Parse(lblTotalTotal.Content.ToString());
                            if (tBeginCash == EndOfDayCash)
                            {
                                tStatus = "Same";
                            }
                            else if (tBeginCash >= EndOfDayCash)
                            {
                                tStatus = "Short";
                            }
                            else if (tBeginCash <= EndOfDayCash)
                            {
                                tStatus = "Over";
                            }
                        }
                    }


                    SqlCommand cmd = new SqlCommand("sp_EndOfDay_Insert", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ttxtCountP05", (txtCountP05.Text.Trim() == "") ? "0" : txtCountP05.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCountP10", (txtCountP10.Text.Trim() == "") ? "0" : txtCountP10.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCountP20", (txtCountP20.Text.Trim() == "") ? "0" : txtCountP20.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCountP50", (txtCountP50.Text.Trim() == "") ? "0" : txtCountP50.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount1", (txtCount1.Text.Trim() == "") ? "0" : txtCount1.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount2", (txtCount2.Text.Trim() == "") ? "0" : txtCount2.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount5", (txtCount5.Text.Trim() == "") ? "0" : txtCount5.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount10", (txtCount10.Text.Trim() == "") ? "0" : txtCount10.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount20", (txtCount20.Text.Trim() == "") ? "0" : txtCount20.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount50", (txtCount50.Text.Trim() == "") ? "0" : txtCount50.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount100", (txtCount100.Text.Trim() == "") ? "0" : txtCount100.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount1000", (txtCount1000.Text.Trim() == "") ? "0" : txtCount1000.Text.Trim());
                    cmd.Parameters.AddWithValue("@tlblTotalP05", (lblTotalP05.Content.ToString().Trim() == "") ? "0.00" : lblTotalP05.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotalP10", (lblTotalP10.Content.ToString().Trim() == "") ? "0.00" : lblTotalP10.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotalP20", (lblTotalP25.Content.ToString().Trim() == "") ? "0.00" : lblTotalP25.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotalP50", (lblTotalP50.Content.ToString().Trim() == "") ? "0.00" : lblTotalP50.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal1", (lblTotal1.Content.ToString().Trim() == "") ? "0.00" : lblTotal1.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal2", (lblTotal2.Content.ToString().Trim() == "") ? "0.00" : lblTotal2.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal5", (lblTotal5.Content.ToString().Trim() == "") ? "0.00" : lblTotal5.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal10", (lblTotal10.Content.ToString().Trim() == "") ? "0.00" : lblTotal10.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal20", (lblTotal20.Content.ToString().Trim() == "") ? "0.00" : lblTotal20.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal50", (lblTotal50.Content.ToString().Trim() == "") ? "0.00" : lblTotal50.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal100", (lblTotal100.Content.ToString().Trim() == "") ? "0.00" : lblTotal100.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal1000", (lblTotal1000.Content.ToString().Trim() == "") ? "0.00" : lblTotal1000.Content.ToString());
                    cmd.Parameters.AddWithValue("@ttxtCountTotal", (txtCountTotal.Text.ToString().Trim() == "") ? "0" : txtCountTotal.Text.Trim());
                    cmd.Parameters.AddWithValue("@tlblTotalTotal", (lblTotalTotal.Content.ToString().Trim() == "") ? "0.00" : lblTotalTotal.Content.ToString());

                    cmd.Parameters.AddWithValue("@Status", tStatus);
                    cmd.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                    cmd.ExecuteNonQuery();



                    if (_Class.clsVariables.CashDrawer == true)
                    {
                        dtCashDrawer.Rows.Add("", "", "");
                        if (txtCountTotal.Text == "")
                            txtCountTotal.Text = "0";

                        Object[] ob1 = { "Total ", Convert.ToDecimal(txtCountTotal.Text), String.Format("{0:0.00}", (double.Parse(lblTotalTotal.Content.ToString()))) };
                        dtCashDrawer.Rows.Add(ob1);
                        //if (_Class.clsVariables.tViewCash == true)
                        //{
                        PrintData1("SETTLE COUNTER CASH DRAWER");
                        btnPrint_Click(sender, e);
                        //}
                    }

                    //AutoPrint Counter Settle Code

                    //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                    //{
                    //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                    // dtPrint.Rows[i]["Property"].ToString();
                    //}
                    //if (dtPrint.Rows[i]["Describ"].ToString().Trim() == "Auto Print")
                    //{
                    if (_Class.clsVariables.tempGAutoPrint == "Yes")
                    {
                        funPrintCounterSettle();
                        btnPrint_Click(sender, e);
                        // break;
                    }
                    else if (_Class.clsVariables.tempGAutoPrint == "After Confirm")
                    {
                        string res = MyMessageBox1.ShowBox("Do you want to print", "Warning");
                        if (res == "1")
                        {
                            funPrintCounterSettle();
                            btnPrint_Click(sender, e);
                        }
                        //  break;
                    }
                    else
                    {
                        // break;
                    }
                    //  }
                    // }



                    //Auto Print Code End


                    pnlEndOfDayResult.Visibility = Visibility.Hidden;
                    pnlEndOfDayResult.Visibility = Visibility.Collapsed;
                    pnlCommon.Visibility = Visibility.Hidden;
                    pnlCounterBtn.Visibility = Visibility.Hidden;

                    // tActionType = "Begin";
                    // lblCounterTitle.Content = "BEGIN CASH DRAWER";
                    // funCounterDisplay();
                    //// pnlCommon.Visibility = Visibility.Collapsed;
                    // pnlCounterBtn.Visibility = Visibility.Visible;
                    btnCashDrawer_Click(sender, e);

                }

                if (tActionType == "Reset")
                {
                    SqlCommand cmd = new SqlCommand("sp_ResetCashDrawer", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ttxtCountP05", (txtCountP05.Text.Trim() == "") ? "0" : txtCountP05.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCountP10", (txtCountP10.Text.Trim() == "") ? "0" : txtCountP10.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCountP20", (txtCountP20.Text.Trim() == "") ? "0" : txtCountP20.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCountP50", (txtCountP50.Text.Trim() == "") ? "0" : txtCountP50.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount1", (txtCount1.Text.Trim() == "") ? "0" : txtCount1.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount2", (txtCount2.Text.Trim() == "") ? "0" : txtCount2.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount5", (txtCount5.Text.Trim() == "") ? "0" : txtCount5.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount10", (txtCount10.Text.Trim() == "") ? "0" : txtCount10.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount20", (txtCount20.Text.Trim() == "") ? "0" : txtCount20.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount50", (txtCount50.Text.Trim() == "") ? "0" : txtCount50.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount100", (txtCount100.Text.Trim() == "") ? "0" : txtCount100.Text.Trim());
                    cmd.Parameters.AddWithValue("@ttxtCount1000", (txtCount1000.Text.Trim() == "") ? "0" : txtCount1000.Text.Trim());
                    cmd.Parameters.AddWithValue("@tlblTotalP05", (lblTotalP05.Content.ToString().Trim() == "") ? "0.00" : lblTotalP05.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotalP10", (lblTotalP10.Content.ToString().Trim() == "") ? "0.00" : lblTotalP10.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotalP20", (lblTotalP25.Content.ToString().Trim() == "") ? "0.00" : lblTotalP25.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotalP50", (lblTotalP50.Content.ToString().Trim() == "") ? "0.00" : lblTotalP50.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal1", (lblTotal1.Content.ToString().Trim() == "") ? "0.00" : lblTotal1.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal2", (lblTotal2.Content.ToString().Trim() == "") ? "0.00" : lblTotal2.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal5", (lblTotal5.Content.ToString().Trim() == "") ? "0.00" : lblTotal5.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal10", (lblTotal10.Content.ToString().Trim() == "") ? "0.00" : lblTotal10.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal20", (lblTotal20.Content.ToString().Trim() == "") ? "0.00" : lblTotal20.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal50", (lblTotal50.Content.ToString().Trim() == "") ? "0.00" : lblTotal50.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal100", (lblTotal100.Content.ToString().Trim() == "") ? "0.00" : lblTotal100.Content.ToString());
                    cmd.Parameters.AddWithValue("@tlblTotal1000", (lblTotal1000.Content.ToString().Trim() == "") ? "0.00" : lblTotal1000.Content.ToString());
                    cmd.Parameters.AddWithValue("@ttxtCountTotal", (txtCountTotal.Text.ToString().Trim() == "") ? "0" : txtCountTotal.Text.Trim());
                    cmd.Parameters.AddWithValue("@tlblTotalTotal", (lblTotalTotal.Content.ToString().Trim() == "") ? "0.00" : lblTotalTotal.Content.ToString());
                    cmd.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                    cmd.Parameters.AddWithValue("@tCurrentCashSales", (lblCCashSalesTotal.Content.ToString().Trim() == "") ? "0.00" : lblCCashSalesTotal.Content.ToString());
                    cmd.ExecuteNonQuery();
                    pnlCounterBtn.Visibility = Visibility.Hidden;
                    pnlCounterBtn.Visibility = Visibility.Collapsed;
                    pnlCommon.Visibility = Visibility.Hidden;
                    pnlCounterBtn.Visibility = Visibility.Hidden;
                    btnCashDrawer_Click(sender, e);
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }

        private void txtCurrency_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {


                if (e.Key == Key.Enter)
                {
                    if (txtCurrency.Text.Trim() == "")
                    {
                        tEnterValue = "0";
                    }
                    else
                    {
                        tEnterValue = txtCurrency.Text;
                    }
                    if (txtCountValue == "txtCount1000")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("1000"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((1000 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCount1000.Text = tEnterValue.ToString();
                        txtCount1000.Foreground = Brushes.Black;
                        if (txtCount1000.Text.Trim() == "")
                        {
                            txtCount1000.Text = "";
                        }
                        btnSave.Focus();
                    }
                    if (txtCountValue == "txtCount100")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("100"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((100 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCount100.Text = tEnterValue.ToString();
                        txtCount100.Foreground = Brushes.Black;
                        if (txtCount100.Text.Trim() == "")
                        {
                            txtCount100.Text = "";
                        }
                        txtCount1000.Focus();
                    }

                    if (txtCountValue == "txtCount50")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("50"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((50 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCount50.Text = tEnterValue.ToString();
                        txtCount50.Foreground = Brushes.Black;
                        if (txtCount50.Text.Trim() == "")
                        {
                            txtCount50.Text = "";
                        }

                        txtCount100.Focus();
                    }
                    if (txtCountValue == "txtCount20")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("20"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((20 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCount20.Text = tEnterValue.ToString();
                        txtCount20.Foreground = Brushes.Black;
                        if (txtCount20.Text.Trim() == "")
                        {
                            txtCount20.Text = "";
                        }
                        txtCount50.Focus();
                    }
                    if (txtCountValue == "txtCount10")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("10"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((10 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCount10.Text = tEnterValue.ToString();
                        txtCount10.Foreground = Brushes.Black;
                        if (txtCount10.Text.Trim() == "")
                        {
                            txtCount10.Text = "";
                        }
                        txtCount20.Focus();
                    }
                    if (txtCountValue == "txtCount5")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("5"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((5 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCount5.Text = tEnterValue.ToString();
                        txtCount5.Foreground = Brushes.Black;
                        if (txtCount5.Text.Trim() == "")
                        {
                            txtCount5.Text = "";
                        }
                        txtCount10.Focus();
                    }
                    if (txtCountValue == "txtCount2")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("2"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((2 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCount2.Text = tEnterValue.ToString();
                        txtCount2.Foreground = Brushes.Black;
                        if (txtCount2.Text.Trim() == "")
                        {
                            txtCount2.Text = "";
                        }
                        txtCount5.Focus();
                    }
                    if (txtCountValue == "txtCount1")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("1"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((1 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCount1.Text = tEnterValue.ToString();
                        txtCount1.Foreground = Brushes.Black;
                        if (txtCount1.Text.Trim() == "")
                        {
                            txtCount1.Text = "";
                        }
                        txtCount2.Focus();
                    }
                    if (txtCountValue == "txtCountP50")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("0.50"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((0.50 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCountP50.Text = tEnterValue.ToString();
                        txtCountP50.Foreground = Brushes.Black;

                        if (txtCountP50.Text.Trim() == "")
                        {
                            txtCountP50.Text = "";
                        }
                        txtCount1.Focus();
                    }
                    if (txtCountValue == "txtCountP20")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("0.20"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((0.20 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCountP20.Text = tEnterValue.ToString();
                        txtCountP20.Foreground = Brushes.Black;

                        if (txtCountP20.Text.Trim() == "")
                        {
                            txtCountP20.Text = "";
                        }
                        txtCountP50.Focus();
                    }
                    if (txtCountValue == "txtCountP10")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("0.10"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((0.10 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCountP10.Text = tEnterValue.ToString();
                        txtCountP10.Foreground = Brushes.Black;
                        if (txtCountP10.Text.Trim() == "")
                        {
                            txtCountP10.Text = "";
                        }
                        txtCountP20.Focus();
                    }
                    if (txtCountValue == "txtCountP05")
                    {
                        Object[] ob = { String.Format("{0:0.00}", (double.Parse("0.05"))), tEnterValue.ToString(), String.Format("{0:0.00}", (double.Parse((0.05 * Convert.ToDouble(tEnterValue.ToString())).ToString()))) };
                        dtCashDrawer.Rows.Add(ob);
                        txtCountP05.Text = tEnterValue.ToString();
                        txtCountP05.Foreground = Brushes.Black;

                        if (txtCountP05.Text.Trim() == "")
                        {
                            txtCountP05.Text = "";
                        }
                        txtCountP10.Focus();
                    }

                    //  txtCurrency.Clear();
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }

        private void btnEndOfDayDrawer_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //if (_Class.clsVariables.UserType != "1")
                //{
                //    //tActionType = "EndOfDay";
                //pnlEndOfDayResult.Visibility = Visibility.Visible;
                //lblCounterTitle.Content = "END OF DAY DRAWER";
                //funCounterDisplay();
                DataTable dtRowChk = new DataTable();
                dtRowChk.Rows.Clear();
                SqlDataAdapter adpRowChk = new SqlDataAdapter("Select * from BeginCashdrawer_table", con);
                adpRowChk.Fill(dtRowChk);
                if (dtRowChk.Rows.Count > 0)
                {
                    DataTable dtNew = new DataTable();
                    dtNew.Rows.Clear();
                    //SqlCommand cmd = new SqlCommand("Select * from begincashDrawerActive_table where active=0 and endofdayDate=(select convert(date,DATEADD(day,1,endofday),103) from EndOfDay_Table where Id=(select MAX(EndOfDayId) from NumberTable))", con);
                    SqlCommand cmd = new SqlCommand("Select * from begincashDrawerActive_table where active=0", con);
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtNew);

                    DataTable dtset = new DataTable();
                    dtset.Rows.Clear();
                    SqlCommand cmdset = new SqlCommand("select a2.ctr_name from BeginCashDrawerActive_table a1,counter_table a2 where a1.Ctr_no=a2.ctr_no and a1.Active='0'", con);
                    SqlDataAdapter adaptset = new SqlDataAdapter(cmdset);
                    adaptset.Fill(dtset);
                    string str = string.Empty;
                    if (dtset.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtset.Rows.Count; i++)
                        {
                            str = str + dtset.Rows[i]["ctr_name"].ToString();
                            str += (i < dtset.Rows.Count - 1) ? "," : string.Empty;
                        }
                        MyMessageBox.ShowBox("Kindly settle '" + str + "' drawer amount first");
                    }
                    else
                    {
                        DataTable dtNew1 = new DataTable();
                        dtNew1.Rows.Clear();
                        SqlCommand cmd12 = new SqlCommand("Select * from BeginCashDrawer_table where Date=(Select CONVERT(date,DATEADD(day,1,max(EndOfDay)),108) from EndOfDay_Table)", con);
                        // cmd12.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                        SqlDataAdapter adpNew = new SqlDataAdapter(cmd12);
                        adpNew.Fill(dtNew1);
                        if (dtNew1.Rows.Count > 0)
                        {
                            string res = MyMessageBox1.ShowBox("Do you want to Run End-Of-Day ( " + currentDate.Year + "/" + currentDate.Month + "/" + currentDate.Day + " )", "Warning");
                            if (res == "1")
                            {
                                string res2 = MyMessageBox1.ShowBox("Confirm again to run END-OF-DAY", "Warning");
                                if (res2 == "1")
                                {

                                    SqlCommand cmd1 = new SqlCommand("sp_EndOfDay_Change", con);
                                    cmd1.CommandType = CommandType.StoredProcedure;
                                    cmd1.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                                    cmd1.ExecuteNonQuery();
                                    if (_Class.clsVariables.tempGManagerAutoPrint == "Yes")
                                    {
                                        dpBillDate.SelectedDate = Convert.ToDateTime(Convert.ToString(lblLastReset.Content));
                                        btnEndOfDayReport_Click(sender, e);
                                        btnPrint_Click(sender, e);
                                    }
                                    btnEndOfDay_Click(sender, e);
                                    btnCashDrawer_Click(sender, e);
                                    // FrmMain frm = new FrmMain();
                                    //// this.Hide();
                                    // frm.Show();
                                    if (UCFrmManagerMainEvent_Finished != null)
                                    {
                                        UCFrmManagerMainEvent_Finished();
                                    }
                                }
                            }
                        }
                        else
                        {
                            MyMessageBox.ShowBox("Do you want to run End-Of-Day Again, Kindly Set begincash drawer", "Warning");
                        }
                    }
                }
                else
                {
                    MyMessageBox.ShowBox("Kindly Enter Begin Cash Drawer Details", "Warning");
                }
                // }
                //else
                //{
                //    MyMessageBox.ShowBox("Please, get user rights to open Manager form!!", "Warning");
                //}
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }

        }

        private void btnBeginCashDrawer_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlDataAdapter adp = new SqlDataAdapter("select * from BeginCashDrawerActive_table where Active=0 and EndOfDayDate=(Select EndOfday from EndOfDay_Table where id=(Select max(endOfDayId)+1 from NumberTable)) ", con);
                adp.Fill(dtNew);
                if (dtNew.Rows.Count > 0)
                {
                    MyMessageBox.ShowBox("First Settle All Counter Drawer Amount First And Then run END-OF-DAY", "Warning");
                }
                else
                {
                    DataTable dtNew1 = new DataTable();
                    dtNew1.Rows.Clear();
                    SqlCommand cmd1 = new SqlCommand("Select * from CounterSettle_table where Ctr_no=@tCounterNo and EndOfDay=(select convert(date,DATEADD(day,1,endofday),103) from EndOfDay_Table where Id=(select MAX(EndOfDayId) from NumberTable))", con);
                    cmd1.Parameters.AddWithValue("@tCounterNo", _Class.clsVariables.tCounter);
                    SqlDataAdapter adp1 = new SqlDataAdapter(cmd1);
                    adp1.Fill(dtNew);
                    if (dtNew.Rows.Count > 0)
                    {
                        MyMessageBox.ShowBox("This Counter drawer amount was settle,Please wait until run END-OF-DAY", "Warning");
                    }
                    else
                    {
                        tActionType = "Begin";
                        lblCounterTitle.Content = "BEGIN CASH DRAWER";
                        funCounterDisplay();
                        txtCountP05.Focus();
                        funDrawerOpen();
                    }
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }

        }

        private void btnCountDrawer_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //reset Button
                tActionType = "Reset";
                lblCounterTitle.Content = "RESET DRAWER";
                funCounterDisplay();
                pnlCommon.Visibility = Visibility.Collapsed;
                pnlCounterBtn.Visibility = Visibility.Visible;
                txtCountP05.Focus();
                funDrawerOpen();
                //if (con.State == ConnectionState.Open)
                //{
                //    con.Close();
                //}
                //con.Open();
                //dtReset.Rows.Clear();
                //cmdMain.CommandText = "Select * from ResetDrawer_table where id=(select max(id) from ResetDrawer_table)";
                //cmdMain.Connection = con;
                //SqlDataAdapter adp = new SqlDataAdapter(cmdMain);
                //adp.Fill(dtReset);
                //if (dtReset.Rows.Count > 0)
                //{
                //    txtCount100.Text = dtReset.Rows[0]["Coin_100"].ToString();
                //    txtCount50.Text = dtReset.Rows[0]["Coin_50"].ToString();
                //    txtCount20.Text = dtReset.Rows[0]["Coin_20"].ToString();
                //    txtCount10.Text = dtReset.Rows[0]["Coin_10"].ToString();
                //    txtCount5.Text = dtReset.Rows[0]["Coin_5"].ToString();
                //    txtCount2.Text = dtReset.Rows[0]["Coin_2"].ToString();
                //    txtCount1.Text = dtReset.Rows[0]["Coin_1"].ToString();
                //    txtCountP50.Text = dtReset.Rows[0]["Coin_P50"].ToString();
                //    txtCountP20.Text = dtReset.Rows[0]["Coin_P20"].ToString();
                //    txtCountP10.Text = dtReset.Rows[0]["Coin_P10"].ToString();
                //    txtCountP05.Text = dtReset.Rows[0]["Coin_P05"].ToString();
                //    txtCount1000.Text = dtReset.Rows[0]["Coin_1000"].ToString();
                //}
                //else
                //{
                ////////txtCount100.Text = "0";
                ////////txtCount50.Text = "0";
                ////////txtCount20.Text = "0";
                ////////txtCount10.Text = "0";
                ////////txtCount5.Text = "0";
                ////////txtCount2.Text = "0";
                ////////txtCount1.Text = "0";
                ////////txtCountP50.Text = "0";
                ////////txtCountP20.Text = "0";
                ////////txtCountP10.Text = "0";
                ////////txtCountP05.Text = "0";
                ////////txtCount1000.Text = "0";
                // }
                //  test = "First";
                ////SqlCommand cmdEnd = new SqlCommand("Select * from ResetDrawer_Table where BeginCashDraw_Id=(select BeginCashDrawId from NumberTable)", con);
                ////con.Close();
                ////con.Open();
                ////dr = cmdEnd.ExecuteReader();
                ////bool isChk = false;
                ////while (dr.Read())
                ////{
                ////    isChk = true;
                ////    lblStartAmt.Content = String.Format("{0:0.00}", double.Parse(dr["CoinTot_Amount"].ToString()));

                ////}
                ////if (isChk == false)
                ////{
                ////    lblStartAmt.Content = String.Format("{0:0.00}", double.Parse(lblStartAmt.Content.ToString()));
                ////}
                ////con.Close();
                ////SqlCommand cmdLastReset = new SqlCommand("Select EndOfDay from EndOFday_Table where Id=(select EndOfDayId from NumberTable)", con);
                ////con.Close();
                ////con.Open();
                ////dr = cmdLastReset.ExecuteReader();
                ////bool isChk1 = false;
                ////while (dr.Read())
                ////{
                ////    isChk1 = true;
                ////    DateTime tDate = DateTime.Parse(dr[0].ToString());
                ////    lblLastReset.Content = dr[0].ToString();
                ////    currentDate = tDate.AddDays(1);
                ////}
                ////if (isChk1 == false)
                ////{
                ////    DateTime tDate = DateTime.Now;
                ////    lblLastReset.Content = tDate.AddDays(-1).ToString();
                ////    currentDate = tDate;
                ////}
                ////con.Close();


                ////string date, year, month;
                ////// date = currentDate.ToString().Substring(0, 2);
                ////// month = currentDate.ToString().Substring(3, 2);
                ////// year = currentDate.ToString().Substring(6, 4);
                ////date = currentDate.ToString("yyyy-MM-dd");

                ////SqlCommand adp2 = new SqlCommand("Select sum(smas_netAmount) as Amt from SalMas_Table where party_no='2' and smas_billdate like '" + date + "%'", con);
                ////con.Close();
                ////con.Open();
                ////dr = adp2.ExecuteReader();
                ////lblCashSalesTotal.Content = "0.00";
                ////if (dr.Read())
                ////{
                ////    if (dr["Amt"].ToString() != "")
                ////    {
                ////        double temp = double.Parse(dr["Amt"].ToString());
                ////        lblCashSalesTotal.Content = String.Format("{0:0.00}", temp);
                ////    }
                ////    if (lblCashSalesTotal.Content == "")
                ////    {
                ////        lblCashSalesTotal.Content = "0.00";
                ////    }
                ////}
                ////con.Close();
                ////lblCashInDrawer.Content = String.Format("{0:0.00}", (double.Parse(lblStartAmt.Content.ToString()) + double.Parse(lblCashSalesTotal.Content.ToString())));
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }

        private void txtCountTotal_TextChanged(object sender, TextChangedEventArgs e)
        {

            test = "Text";
            textbox(sender, e);
        }

        string saveExcelfilename;
        public void saveExceldialog()
        {
            try
            {
                System.Windows.Forms.SaveFileDialog savefiledialog = new System.Windows.Forms.SaveFileDialog();
                savefiledialog.InitialDirectory = Convert.ToString(Environment.SpecialFolder.MyDocuments);
                savefiledialog.DefaultExt = "Xls";
                savefiledialog.Filter = "Your extension here (*.xls)|*.xls";
                savefiledialog.FilterIndex = 1;
                savefiledialog.RestoreDirectory = true;
                savefiledialog.FileName = "";
                savefiledialog.ShowDialog();
                saveExcelfilename = savefiledialog.FileName;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }
        //public Microsoft.Office.Interop.Excel.Application ExcelApp = new Microsoft.Office.Interop.Excel.Application();
        string tPrinterType = "";
        byte[] byteOut;
        string tPrintingType = "";
        private void btnPrint_Click(object sender, RoutedEventArgs e)
        {
            try
            {

                if (tPrintingType == "PDF")
                {
                    if (dtPDF.Rows.Count > 0)
                    {
                        try
                        {
                            Document doc = new Document(iTextSharp.text.PageSize.LETTER, 10, 10, 10, 10);
                            savedialog();
                            if (savefilename != "")
                            {
                                PdfWriter wri = PdfWriter.GetInstance(doc, new FileStream(savefilename, FileMode.Create));
                                doc.Open();
                                iTextSharp.text.Paragraph paragraph = new iTextSharp.text.Paragraph("Item Details \n\n");
                                paragraph.IndentationLeft = 250;
                                doc.Add(new iTextSharp.text.Paragraph(""));
                                int numcolumns = dtPDF.Columns.Count;
                                PdfPTable table = new PdfPTable(numcolumns);
                                table.DefaultCell.Padding = 2;
                                table.WidthPercentage = 80;
                                table.DefaultCell.HorizontalAlignment = Element.ALIGN_LEFT;
                                //if (numcolumns != dtStudentList.Columns.Count)
                                //{
                                //    MessageBox.Show("Invalid Columns in datagrid");
                                //}
                                table.DefaultCell.BorderWidth = 0.5f;
                                table.DefaultCell.GrayFill = 0.8f;
                                table.DefaultCell.MinimumHeight = 15;
                                foreach (DataColumn col in dtPDF.Columns)
                                {
                                    Phrase phrase = new Phrase(col.ColumnName.ToString(), FontFactory.GetFont("Verdana", 7, iTextSharp.text.Font.BOLD));
                                    table.AddCell(phrase);
                                }
                                table.HeaderRows = 1;
                                for (int i = 0; i < dtPDF.Rows.Count; i++)
                                {
                                    for (int j = 0; j < dtPDF.Columns.Count; j++)
                                    {
                                        table.DefaultCell.BackgroundColor = iTextSharp.text.BaseColor.WHITE;
                                        table.DefaultCell.HorizontalAlignment = iTextSharp.text.Element.ALIGN_LEFT;
                                        Phrase pharse = new Phrase(dtPDF.Rows[i][j].ToString(), FontFactory.GetFont("Verdana", 5));
                                        table.AddCell(pharse);
                                    }
                                }
                                doc.Add(paragraph);
                                doc.Add(table);
                                doc.Add(new iTextSharp.text.Paragraph(""));
                                doc.Close();
                                // MessageBox.Show("Item PDF is Generated Successfully.." + savefilename);
                                savefilename = "";
                                tPrintingType = "";
                            }

                        }
                        catch (Exception ex)
                        {
                            MyMessageBox.ShowBox(ex.Message, "Warning");
                        }
                    }
                }
                else if (tPrintingType == "EODREPORT")
                {
                    saveExceldialog();
                    if (saveExcelfilename != string.Empty)
                    {
                        saveExcelfilename.Replace(".xls", "");
                        using (XLWorkbook wb = new XLWorkbook())
                        {
                            string SaveFile = saveExcelfilename.Replace(".xls", "");
                            wb.Worksheets.Add(dt_griddiaplay1, "Customers");
                            wb.SaveAs(SaveFile + ".xlsx");

                        }
                    }
                }
                else if (tPrintingType == "ITEMTREPORT")
                {
                    saveExceldialog();

                    using (XLWorkbook wb = new XLWorkbook())
                    {
                        if (saveExcelfilename != string.Empty)
                        {
                            string SaveFile = saveExcelfilename.Replace(".xls", "");
                            wb.Worksheets.Add(dt_selecttable, "Customers");

                            wb.SaveAs(SaveFile + ".xlsx");
                            //wb.SaveAs(folderPath + "DataGridViewExport.xlsx");
                        }
                    }

                }

                else if (tPrintingType == "EXCEL")
                {

                    try
                    {
                        Microsoft.Office.Interop.Excel.Application ExcelApp = new Microsoft.Office.Interop.Excel.Application();
                        if (dtPDF.Rows.Count > 0)
                        {
                            saveExceldialog();

                            DataColumnCollection dcCollection = dtPDF.Columns;
                            // Export Data into EXCEL Sheet

                            ExcelApp.Application.Workbooks.Add(Type.Missing);
                            // ExcelApp.Cells.CopyFromRecordset(objRS);
                            for (int i = 1; i < dtPDF.Rows.Count + 1; i++)
                            {
                                for (int j = 1; j < dtPDF.Columns.Count + 1; j++)
                                {
                                    if (i == 1)
                                        ExcelApp.Cells[i, j] = dcCollection[j - 1].ToString();
                                    else
                                        ExcelApp.Cells[i, j] = dtPDF.Rows[i - 1][j - 1].ToString();
                                }
                            }
                            ExcelApp.ActiveWorkbook.SaveCopyAs(saveExcelfilename);
                            ExcelApp.ActiveWorkbook.Saved = true;
                            ExcelApp.Quit();

                        }
                    }
                    catch (Exception)
                    {
                    }
                }
                else
                {
                    try
                    {
                        //for (int i8 = 0; i8 < dtPrint.Rows.Count - 1; i8++)
                        //{
                        //    if (dtPrint.Rows[i8]["Describ"].ToString() == "Enable This Device*")
                        //    {
                        if (_Class.clsVariables.tempGEnableThisDevice == "Yes")
                        {
                            tPrinterType = "Receipt";
                            //  break;
                        }

                        //    }
                        //}
                        int tNoPrint = 0;

                        DataRow[] dtRowChk = dtPrint.Select("Describ='Printer Name*'");
                        //for (int i8 = 0; i8 < dtPrint.Rows.Count - 1; i8++)
                        {
                            //   if (dtPrint.Rows[i8]["Describ"].ToString() == "Printer Name*")
                            {
                                if (tPrinterType == "Receipt")
                                {
                                    DataTable dtPrinter = new DataTable();
                                    dtPrinter.Rows.Clear();
                                    SqlDataAdapter adpPrinter = new SqlDataAdapter("select * from CrystalReportPrinterList", con);
                                    adpPrinter.Fill(dtPrinter);
                                    bool isChkPrinter = false;
                                    for (int i = 0; i < dtPrinter.Rows.Count; i++)
                                    {
                                        string printerName = dtPrinter.Rows[i]["PrinterName"].ToString();
                                        isChkPrinter = false;
                                        if (dtRowChk[0]["Property"].ToString().ToUpper() == printerName.ToUpper())
                                        {
                                            isChkPrinter = true;
                                            //rptReceiptReport rpt = new rptReceiptReport();
                                            //RawPrinterHelper.SendStringToPrinter(dtPrint.Rows[i8]["Property"].ToString(), @"D:\Parthi\" + mainStr + ".pdf");
                                            //// RawPrinterHelper.SendFileToPrinter(pd.PrinterSettings.PrinterName, @"C:\Test\Sample_PDF_Print.pdf");

                                            //CrystalDecisions.CrystalReports.Engine.TextObject str1 = ((CrystalDecisions.CrystalReports.Engine.TextObject)rpt.Section2.ReportObjects["Text1"]);
                                            //str1.Text = mainStr;
                                            //rpt.PrintToPrinter(0, true, 1, 0);
                                            reportViewerSales.LocalReport.ReportEmbeddedResource = "SalesProject.ReportFile.rdlcReceipt.rdlc";
                                            ReportParameter rpReportOn = new ReportParameter("ReceiptValue", Convert.ToString(mainStr), false);
                                            this.reportViewerSales.LocalReport.SetParameters(new ReportParameter[] { rpReportOn });
                                            reportViewerSales.RefreshReport();
                                            reportViewerSales.RenderingComplete += new RenderingCompleteEventHandler(PrintSales1);

                                            break;
                                        }
                                    }

                                    if (isChkPrinter == false)
                                    {
                                        //for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                                        //{
                                        //    if (dtPrint.Rows[k]["Describ"].ToString() == "Print Copies*")
                                        //    {
                                        topLine5 = _Class.clsVariables.tempGPrintCopies;

                                        tNoPrint = 1;

                                        if (topLine5 == "No Copies")
                                        {
                                            tNoPrint = 0;
                                        }

                                        for (int i2 = 0; i2 < tNoPrint; i2++)
                                        {
                                            // RawPrinterHelper.SendStringToPrinter(dtRowChk[0]["Property"].ToString(), mainStr);
                                            Thread workerThread = new Thread(() => RawPrinterHelper.SendStringToPrinter(dtRowChk[0]["Property"].ToString(), mainStr));
                                            workerThread.Start();
                                            bool finished = workerThread.Join(3000);
                                            if (!finished)
                                            {
                                                workerThread.Abort();
                                            }
                                            // string s = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 29, 86, 66, 0, 27, 112, 0, 64, 240 });// device-dependent string, need a FormFeed?
                                            // RawPrinterHelper.SendStringToPrinter(dtPrint.Rows[i8]["Property"].ToString(), s);
                                        }


                                        DataTable dtNew = new DataTable();
                                        dtNew.Rows.Clear();
                                        SqlCommand cmdDrawer = new SqlCommand("Select * from CashDrawerSetting_table where counter=@tCounter", con);
                                        cmdDrawer.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                                        SqlDataAdapter adp = new SqlDataAdapter(cmdDrawer);
                                        adp.Fill(dtNew);
                                        if (dtNew.Rows.Count > 0)
                                        {
                                            //  if (dtNew.Rows[0]["Enable"].ToString().Trim() == "Yes")
                                            {
                                                //PrintDialog pd = new PrintDialog();
                                                string s;

                                                string[] byteStrings = dtNew.Rows[0]["PaperCut"].ToString().Split(',');

                                                byteOut = new byte[byteStrings.Length];

                                                for (int i = 0; i < byteStrings.Length; i++)
                                                {

                                                    byteOut[i] = Convert.ToByte(byteStrings[i]);

                                                }

                                                s = System.Text.ASCIIEncoding.ASCII.GetString(byteOut);// device-dependent string, need a FormFeed?

                                                //  RawPrinterHelper.SendStringToPrinter(dtRowChk[0]["Property"].ToString(), s);

                                                Thread workerThread = new Thread(() => RawPrinterHelper.SendStringToPrinter(dtRowChk[0]["Property"].ToString(), s));
                                                workerThread.Start();
                                                bool finished = workerThread.Join(3000);
                                                if (!finished)
                                                {
                                                    workerThread.Abort();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        MyMessageBox.ShowBox(ex.ToString(), "Warning");
                    }

                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }

        public void PrintSales1(object sender, RenderingCompleteEventArgs e)
        {
            try
            {
                //reportViewerSales.PrinterSettings.PrinterName = _Class.clsVariables.tPrinterName;
                //  reportViewerSales.PrinterSettings.PrintToFile = true;                
                reportViewerSales.PrintDialog();
                reportViewerSales.Clear();
                reportViewerSales.LocalReport.ReleaseSandboxAppDomain();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        Microsoft.Reporting.WinForms.ReportViewer reportViewerSales = new Microsoft.Reporting.WinForms.ReportViewer();
        private void btnCounterSettle_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_Class.clsVariables.StCounter == false)
                {
                    this.STPnl1.Visibility = Visibility.Hidden;
                }
                else if (_Class.clsVariables.StCounter == true)
                {
                    this.STPnl1.Visibility = Visibility.Visible;
                }
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select * from BeginCashDrawer_table where Ctr_no=(Select Ctr_no from User_table where User_no=@tUserNo) and Date=(select CONVERT(date,(DATEADD(day,1,EndOfDay)),103) from EndOfDay_Table where Id=(select MAX(EndOfDayId) from NumberTable))", con);
                cmd.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtNew);
                if (dtNew.Rows.Count > 0)
                {
                    tActionType = "EndOfDay";
                    lblDisBeginCash.Content = lblCashInDrawer.Content;
                    pnlEndOfDayResult.Visibility = Visibility.Visible;
                    lblCounterTitle.Content = "COUNTER DRAWER SETTLE";

                    funCounterDisplay();
                    txtCountP05.Focus();
                    funDrawerOpen();

                }
                else
                {
                    MyMessageBox.ShowBox("Begin Cash Drawer details not found for this counter", "Warning");
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }

        private void btnItem_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                //lblItemGroupName.Content = "Item Name";
                //loadItem();
                itemProfit();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        DataTable dtItemProfit = new DataTable();
        private void itemProfit()
        {
            DataTable dtDiscount = new DataTable();
            dtDiscount.Rows.Clear();
            SqlCommand cmdDiscount = new SqlCommand("Select SUM(Amount) as DiscountAmt from DiscountDetail_table where  Bill_no not in (select smas_billno from SalMas_table where smas_cancel=1 and smas_billdate between @tFromDate and @tToDate) and Date between @tFromDate and @tToDate", con);
            cmdDiscount.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
            cmdDiscount.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
            SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
            adpDiscount.Fill(dtDiscount);
            double tProfitDiscount = 0.00;
            if (dtDiscount.Rows.Count > 0)
            {
                tProfitDiscount = (dtDiscount.Rows[0]["DiscountAmt"].ToString().Trim() == "") ? 0.00 : double.Parse(dtDiscount.Rows[0]["DiscountAmt"].ToString().Trim());
            }
            // SqlCommand cmd = new SqlCommand("select Item_table.Item_name as ItemNames,SUM(stktrn_table.nt_qty- stktrn_table.rnt_qty) as Qty,CONVERT(numeric(18,2),Avg((((stktrn_table.nt_qty - stktrn_table.rnt_qty)*stktrn_table.Rate)-stktrn_table.Profit)/(stktrn_table.nt_qty- stktrn_table.rnt_qty))) as ItemCost,CONVERT(numeric(18,2),AVG(stktrn_table.Rate)) as SalesPrice,convert(numeric(18,2),SUM(stktrn_table.Profit)) as Profit from stktrn_table,Item_table where Item_table.Item_no=stktrn_table.item_no and stktrn_table.Strn_Cancel=0 and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_rtno=0 and stktrn_table.strn_type=1 and stktrn_table.strn_date between @tFromDate and @tToDate  group by item_table.Item_name", con);
            // SqlCommand cmd = new SqlCommand("select Item_table.Item_name as ItemNames,SUM(stktrn_table.nt_qty) as Qty,CONVERT(numeric(18,2),Avg((((stktrn_table.nt_qty )*stktrn_table.Rate)-stktrn_table.Profit)/(stktrn_table.nt_qty))) as ItemCost,CONVERT(numeric(18,2),AVG(stktrn_table.Rate)) as SalesPrice,convert(numeric(18,2),SUM(stktrn_table.Profit)) as Profit from stktrn_table,Item_table where Item_table.Item_no=stktrn_table.item_no and stktrn_table.Strn_Cancel=0 and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_rtno=0 and stktrn_table.strn_type=1 and stktrn_table.strn_date between @tFromDate and @tToDate  group by item_table.Item_name", con);
            SqlCommand cmd = new SqlCommand("select Item_table.Item_name as ItemNames,SUM(stktrn_table.nt_qty-stktrn_table.rnt_qty) as Qty,CONVERT(numeric(18,2),Avg(((Net_Amt/nt_qty)-(Profit/nt_qty))-(tax_amt/nt_qty))) as ItemCost,CONVERT(numeric(18,2),AVG(Rate)) as SalesPrice,convert(numeric(18,2),Sum((Profit/nt_qty)*(nt_qty-rnt_qty))) as Profit from stktrn_table,Item_table where Item_table.Item_no=stktrn_table.item_no and stktrn_table.Strn_Cancel=0 and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_rtno=0 and stktrn_table.strn_type=1 and stktrn_table.strn_date between @tFromDate and @tToDate  group by item_table.Item_name", con);

            cmd.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
            cmd.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
            SqlDataAdapter adp = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            listDisplay.Items.Clear();
            dtItemProfit.Rows.Clear();
            dt_griddiaplay.Rows.Clear();
            adp.Fill(dtItemProfit);
            if (dtItemProfit.Rows.Count > 0)
            {
                // gridItems.Height = 1000;
                gridItemsManager.Width = 1000;
                //string ColName = "ItemName" + "  " + "Quantity" + "  " + "ItemCost" + "  " + "MRP" + "  " + "Profit";
                //listDisplay.Items.Add(ColName);

                //for (int i = 0; i < dt.Rows.Count; i++)
                //{
                //    string ItemName = dt.Rows[i]["Item_name"].ToString();
                //    string Qty = ItemName + "    " + string.Format(Convert.ToDouble(dt.Rows[i]["Qty"]).ToString());
                //    string ItemCost = Qty + "    " + string.Format(Convert.ToDouble(dt.Rows[i]["ItemCost"]).ToString());
                //    string MRP = ItemCost + "    " + string.Format(Convert.ToDouble(dt.Rows[i]["MRP"]).ToString());
                //    string Profit = MRP + "    " + string.Format(Convert.ToDouble(dt.Rows[i]["Profit"]).ToString());

                //    listDisplay.Items.Add(Profit);
                //}

                double tTotQty = 0, tTotProfit = 0;
                for (int i = 0; i < dtItemProfit.Rows.Count; i++)
                {
                    if (dtItemProfit.Rows[i]["Qty"].ToString() != "")
                    {
                        tTotQty += (dtItemProfit.Rows[i]["Qty"].ToString() == "") ? 0.00 : double.Parse(dtItemProfit.Rows[i]["Qty"].ToString());
                        tTotProfit += (dtItemProfit.Rows[i]["Profit"].ToString() == "") ? 0.00 : double.Parse(dtItemProfit.Rows[i]["Profit"].ToString());
                    }
                }
                dtItemProfit.Rows.Add("", "", "", "", "");

                dtItemProfit.Rows.Add("Total", tTotQty, "", "", string.Format("{0:0.00}", tTotProfit));
                //if (tProfitDiscount > 0)
                //{
                //    dtItemProfit.Rows.Add("", "", "", "", "");
                //    dtItemProfit.Rows.Add("Discount Amount", "", "", "", string.Format("{0:0.00}", tProfitDiscount));
                //    dtItemProfit.Rows.Add("Total Amount", "", "", "", string.Format("{0:0.00}", tTotProfit - tProfitDiscount));
                //}

                gridItemsManager.ColumnHeadersVisible = true;
                gridItemsManager.DataSource = dtItemProfit.DefaultView;
                gridItemsManager.Columns[0].Width = 150;
                gridItemsManager.Columns[1].Width = 40;
                gridItemsManager.Columns[2].Width = 70;
                gridItemsManager.Columns[3].Width = 70;
                gridItemsManager.Columns[4].Width = 60;
                this.gridItemsManager.Columns[1].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                this.gridItemsManager.Columns[3].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                this.gridItemsManager.Columns[4].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;






                mainStr = "";
                listDisplay.Items.Clear();

                funPrintHeaderPart();

                topLine1 = "ITEM PROFIT REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}



                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "/" + dpFrom.SelectedDate.Value.Month + "/" + dpFrom.SelectedDate.Value.Year + " - " + dpTo.SelectedDate.Value.Day + "/" + dpTo.SelectedDate.Value.Month + "/" + dpTo.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                ds.Tables.Clear();
                //  mainStrSub = "";
                dt_griddiaplay.Rows.Clear();

                string tempStr = null;
                //    if (dtPrint.Rows[i5]["Describ"].ToString() == "Print Qunatity and Rate")
                //    {
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 18));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += "  Qty  ";
                // tQtyHeading += "U/Rate ";
                tQtyHeading += "   Profit";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                for (int mn = 0; mn < dtItemProfit.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;

                    if (isChk == false)
                    {
                        for (int i = 0; i <= 4; i++)
                        {
                            tempStr = dtItemProfit.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 18);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 18; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadRight(7, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 4)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}

            }
        }

        private void btnGroup_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //lblItemGroupName.Content = "Group Name";
                tPrintingType = "";
                listDisplay.Items.Clear();
                GroupProfit();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void loadGroup()
        {
            try
            {
                SqlCommand cmd = new SqlCommand("Select Item_groupname from Item_Grouptable", con);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                dt.Rows.Clear();
                listDisplay.Items.Clear();
                adp.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        listDisplay.Items.Add(dt.Rows[i]["Item_groupname"].ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        DataTable dtgropProfit = new DataTable();
        DataTable dt_addgroupvalues = new DataTable();
        DataTable dtGroupPrintNew = new DataTable();
        private void GroupProfit()
        {
            try
            {
                DataTable dtDiscount = new DataTable();
                dtDiscount.Rows.Clear();
                SqlCommand cmdDiscount = new SqlCommand("Select SUM(Amount) as DiscountAmt from DiscountDetail_table where  Bill_no not in (select smas_billno from SalMas_table where smas_cancel=1 and smas_billdate between @tFromDate and @tToDate) and Date between @tFromDate and @tToDate", con);
                cmdDiscount.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
                SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                adpDiscount.Fill(dtDiscount);
                double tProfitDiscount = 0.00;
                if (dtDiscount.Rows.Count > 0)
                {
                    tProfitDiscount = (dtDiscount.Rows[0]["DiscountAmt"].ToString().Trim() == "") ? 0.00 : double.Parse(dtDiscount.Rows[0]["DiscountAmt"].ToString().Trim());
                }

                //SqlCommand cmd1 = new SqlCommand("select Item_Grouptable.Item_groupname,Item_table.Item_name,SUM(stktrn_table.nt_qty- stktrn_table.rnt_qty) as Qty,CONVERT(numeric(18,2),Avg((((stktrn_table.nt_qty- stktrn_table.rnt_qty)*stktrn_table.Rate)-stktrn_table.Profit)/(stktrn_table.nt_qty- stktrn_table.rnt_qty))) as ItemCost,CONVERT(numeric(18,2),AVG(stktrn_table.Rate)) as MRP,convert(numeric(18,2),SUM(stktrn_table.Profit)) as Profit from stktrn_table,Item_table,Item_Grouptable where Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and stktrn_table.Strn_Cancel=0  and stktrn_table.strn_rtno=0 and stktrn_table.strn_type=1 and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_date between @tFromDate and @tToDate group by item_table.Item_name,Item_Grouptable.Item_groupname", con);
                SqlCommand cmd1 = new SqlCommand("select Item_Grouptable.Item_groupname,Item_table.Item_name,SUM(stktrn_table.nt_qty-stktrn_table.rnt_qty) as Qty,CONVERT(numeric(18,2),Avg((((stktrn_table.nt_qty)*stktrn_table.Rate)-stktrn_table.Profit)/(stktrn_table.nt_qty))) as ItemCost,CONVERT(numeric(18,2),AVG(stktrn_table.Rate)) as MRP,convert(numeric(18,2),Sum((Profit/nt_qty)*(nt_qty-rnt_qty))) as Profit from stktrn_table,Item_table,Item_Grouptable where Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and stktrn_table.Strn_Cancel=0  and stktrn_table.strn_rtno=0 and stktrn_table.strn_type=1 and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_date between @tFromDate and @tToDate group by item_table.Item_name,Item_Grouptable.Item_groupname", con);
                // cmd1.CommandType = CommandType.StoredProcedure;
                cmd1.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
                cmd1.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
                SqlDataAdapter adp1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                dt1.Rows.Clear();
                adp1.Fill(dt1);

                //SqlCommand cmd = new SqlCommand("sp_GroupNameProfit", con);
                //cmd.CommandType = CommandType.StoredProcedure;

                //SqlCommand cmd = new SqlCommand("select Item_Grouptable.Item_groupname,Item_table.Item_name,SUM(stktrn_table.nt_qty- stktrn_table.rnt_qty) as Qty,CONVERT(numeric(18,2),Avg((((stktrn_table.nt_qty- stktrn_table.rnt_qty)*stktrn_table.Rate)-stktrn_table.Profit)/(stktrn_table.nt_qty- stktrn_table.rnt_qty))) as ItemCost,CONVERT(numeric(18,2),AVG(stktrn_table.Rate)) as MRP,convert(numeric(18,2),SUM(stktrn_table.Profit)) as Profit from stktrn_table,Item_table,Item_Grouptable where Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and stktrn_table.Strn_Cancel=0  and stktrn_table.strn_rtno=0 and stktrn_table.strn_type=1 and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_date between @tFromDate and @tToDate group by item_table.Item_name,Item_Grouptable.Item_groupname", con);
                SqlCommand cmd = new SqlCommand("select Item_Grouptable.Item_groupname,Item_table.Item_name,SUM(stktrn_table.nt_qty-stktrn_table.nt_qty) as Qty,CONVERT(numeric(18,2),Avg(((Net_Amt/nt_qty)-(Profit/nt_qty))-(tax_amt/nt_qty))) as ItemCost,CONVERT(numeric(18,2),AVG(stktrn_table.Rate)) as MRP,convert(numeric(18,2),Sum((Profit/nt_qty)*(nt_qty-rnt_qty))) as Profit from stktrn_table,Item_table,Item_Grouptable where Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and stktrn_table.Strn_Cancel=0  and stktrn_table.strn_rtno=0 and stktrn_table.strn_type=1 and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_date between @tFromDate and @tToDate group by item_table.Item_name,Item_Grouptable.Item_groupname", con);

                cmd.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                listDisplay.Items.Clear();
                dt_griddiaplay.Rows.Clear();
                dtgropProfit.Rows.Clear();

                adp.Fill(dtgropProfit);
                if (dtgropProfit.Rows.Count > 0)
                {
                    SqlCommand cmd_selectgroup = new SqlCommand("Select Item_Grouptable.Item_groupname,count(Item_table.Item_name) as TotalItems,SUM(stktrn_table.nt_qty-stktrn_table.nt_qty)  as qty,CONVERT(numeric(18,2),Avg(((Net_Amt/nt_qty)-(Profit/nt_qty))-(tax_amt/nt_qty))) as ItemCost,CONVERT(numeric(18,2),AVG(stktrn_table.Rate)) as SalesPrice,convert(Numeric(18,2),Sum((Profit/nt_qty)*(nt_qty-rnt_qty))) as TotalProfit,SUM((stktrn_table.nt_qty- stktrn_table.rnt_qty)) as TotalQty from stktrn_table,Item_table,Item_Grouptable  Where Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and  stktrn_table.strn_type='1' and stktrn_table.strn_cancel=0 and stktrn_table.strn_rtno=0 and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_date between @FromDate and @tEnd  group by Item_Grouptable.Item_groupname", con);
                    cmd_selectgroup.Parameters.AddWithValue("@FromDate", new DateTime(Convert.ToDateTime(dpFrom.Text).Year, Convert.ToDateTime(dpFrom.Text).Month, Convert.ToDateTime(dpFrom.Text).Day));
                    cmd_selectgroup.Parameters.AddWithValue("@tEnd", new DateTime(Convert.ToDateTime(dpTo.Text).Year, Convert.ToDateTime(dpTo.Text).Month, Convert.ToDateTime(dpTo.Text).Day));

                    SqlDataAdapter apd_selectgruop = new SqlDataAdapter(cmd_selectgroup);
                    DataTable dt_selegroup = new DataTable();
                    dt_selegroup.Rows.Clear();
                    apd_selectgruop.Fill(dt_selegroup);


                    if (dt_selegroup.Rows.Count > 0)
                    {
                        // dt_addgroupvalues.Rows.Add();
                        dt_addgroupvalues.Rows.Clear();
                        dtGroupPrintNew.Rows.Clear();
                        for (int i = 0; i < dt_selegroup.Rows.Count; i++)
                        {
                            string add = dt_selegroup.Rows[i][0].ToString(), less = dt_selegroup.Rows[i][1].ToString(), mins = dt_selegroup.Rows[i][2].ToString(), plus = dt_selegroup.Rows[i]["TotalProfit"].ToString(), Qty = dt_selegroup.Rows[i]["TotalQty"].ToString();
                            string itemCost = dt_selegroup.Rows[i]["ItemCost"].ToString(), rate = dt_selegroup.Rows[i]["SalesPrice"].ToString();

                            dt_addgroupvalues.Rows.Add(add, Qty, itemCost, rate, plus);
                            dtGroupPrintNew.Rows.Add(add, Qty, plus);
                            SqlCommand cmd_itemadd1 = new SqlCommand("select Item_table.Item_name,SUM(stktrn_table.nt_qty) as Qty,CONVERT(numeric(18,2),Avg((stktrn_table.nt_qty*stktrn_table.Rate)-stktrn_table.Profit)) as ItemCost,CONVERT(numeric(18,2),AVG(stktrn_table.Rate)) as Price,convert(numeric(18,2),SUM(stktrn_table.Profit)) as Profit from stktrn_table,Item_table,Item_Grouptable where Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and  stktrn_table.strn_type='1' and stktrn_table.strn_date  between @FromDate and @tEnd1 and Item_Grouptable.Item_groupname=@GroupName group by item_table.Item_name,Item_Grouptable.Item_groupname", con);
                            cmd_itemadd1.Parameters.AddWithValue("@GroupName", dt_selegroup.Rows[i][0].ToString());
                            cmd_itemadd1.Parameters.AddWithValue("@FromDate", new DateTime(Convert.ToDateTime(dpFrom.Text).Year, Convert.ToDateTime(dpFrom.Text).Month, Convert.ToDateTime(dpFrom.Text).Day));
                            cmd_itemadd1.Parameters.AddWithValue("@tEnd1", new DateTime(Convert.ToDateTime(dpTo.Text).Year, Convert.ToDateTime(dpTo.Text).Month, Convert.ToDateTime(dpTo.Text).Day));
                            SqlDataAdapter adp_itemadd = new SqlDataAdapter(cmd_itemadd1);
                            DataTable dt_itemselect1 = new DataTable();
                            dt_itemselect1.Rows.Clear();
                            adp_itemadd.Fill(dt_itemselect1);
                            if (dt_itemselect1.Rows.Count > 0)
                            {
                                int ik = Convert.ToInt32(dt_addgroupvalues.Rows.Count);
                                for (int il = 0; il < dt_itemselect1.Rows.Count; il++)
                                {
                                    string itemname = dt_itemselect1.Rows[il]["Item_name"].ToString(), qty = dt_itemselect1.Rows[il]["Qty"].ToString(), itemcost = dt_itemselect1.Rows[il]["ItemCost"].ToString(), MRP = dt_itemselect1.Rows[il]["Price"].ToString(), Profit = dt_itemselect1.Rows[il]["Profit"].ToString();
                                    //dt_addgroupvalues.Rows.Add();
                                    //    dt_addgroupvalues.Rows.Add(itemname, qty, itemcost, MRP, Profit);
                                }
                            }
                            dt_selegroup.Rows[i].Delete();
                        }
                    }
                    double tTotQty = 0, tTotProfit = 0;
                    for (int i = 0; i < dt_addgroupvalues.Rows.Count; i++)
                    {
                        if (dt_addgroupvalues.Rows[i]["Qty"].ToString() != "")
                        {
                            tTotQty += (dt_addgroupvalues.Rows[i]["Qty"].ToString() == "") ? 0.00 : double.Parse(dt_addgroupvalues.Rows[i]["Qty"].ToString());
                            tTotProfit += (dt_addgroupvalues.Rows[i]["Profit"].ToString() == "") ? 0.00 : double.Parse(dt_addgroupvalues.Rows[i]["Profit"].ToString());
                        }
                    }
                    dt_addgroupvalues.Rows.Add("", "", "", "", "");

                    dt_addgroupvalues.Rows.Add("Total", tTotQty, "", "", string.Format("{0:0.00}", tTotProfit));
                    dtGroupPrintNew.Rows.Add("", "", "");
                    dtGroupPrintNew.Rows.Add("Total", tTotQty, string.Format("{0:0.00}", tTotProfit));


                    gridItemsManager.DataSource = dt_addgroupvalues.DefaultView;
                    //gridItems.Height = 400;
                    gridItemsManager.ColumnHeadersVisible = true;
                    gridItemsManager.Columns[0].Width = 150;
                    gridItemsManager.Columns[1].Width = 40;
                    gridItemsManager.Columns[2].Width = 70;
                    gridItemsManager.Columns[3].Width = 70;
                    gridItemsManager.Columns[4].Width = 60;
                    this.gridItemsManager.Columns[1].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                    this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                    this.gridItemsManager.Columns[3].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                    this.gridItemsManager.Columns[4].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;




                    mainStr = "";
                    listDisplay.Items.Clear();


                    funPrintHeaderPart();

                    charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                    //dtPrint.Rows[i]["Property"].ToString();
                    topLine1 = "GROUP PROFIT REPORT";
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }

                    topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }

                    topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "/" + dpFrom.SelectedDate.Value.Month + "/" + dpFrom.SelectedDate.Value.Year + " - " + dpTo.SelectedDate.Value.Day + "/" + dpTo.SelectedDate.Value.Month + "/" + dpTo.SelectedDate.Value.Year;
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }

                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }
                    //}
                    ds.Tables.Clear();
                    //  mainStrSub = "";
                    dt_griddiaplay.Rows.Clear();

                    string tempStr = null;
                    //if (dtPrint.Rows[i5]["Describ"].ToString() == "Print Qunatity and Rate")
                    //{
                    string tQtyHeading = "";
                    tQtyHeading = "Particulars";
                    //  mainStr += tQtyHeading;
                    double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 18));
                    for (int j = 0; j < chkCount; j++)
                    {
                        tQtyHeading += " ";
                    }
                    tQtyHeading += "  Qty  ";
                    // tQtyHeading += "U/Rate ";
                    tQtyHeading += "   Profit";
                    mainStr += tQtyHeading;
                    mainStr += "\n";

                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                    //    }
                    //}
                    for (int mn = 0; mn < dtGroupPrintNew.Rows.Count; mn++)
                    //foreach (DataRow row in dgsales.Rows)
                    {
                        // object[] array = dgsales.Rows[mn].;
                        bool isChk = false;

                        if (isChk == false)
                        {
                            for (int i = 0; i < 3; i++)
                            {
                                tempStr = dtGroupPrintNew.Rows[mn][i].ToString();
                                //  MessageBox.Show(tempStr.Length.ToString());
                                findCenterPosition = (double.Parse(charPerLine) - 18);
                                if (i == 0)
                                {
                                    if (tempStr.Length <= (int)findCenterPosition)
                                    {
                                        mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                    }
                                    else
                                    {
                                        string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                        //    MessageBox.Show(temp);
                                        int chkSpace = temp.LastIndexOf(" ");
                                        int loc = (temp.Length - temp.LastIndexOf(" "));
                                        //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                        if (chkSpace != -1)
                                        {
                                            mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                            //   MessageBox.Show(mainStr.ToString());
                                            for (int j = 0; j < loc + 18; j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += "\n";
                                            string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                            // mainStr += temp1;
                                            if (temp1.Length <= (int)findCenterPosition)
                                            {
                                                mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                            }
                                        }
                                        else
                                        {
                                            mainStr += temp.ToString();
                                        }

                                    }
                                }

                                if (i == 1)
                                {
                                    if (tempStr.Length < 8)
                                    {
                                        mainStr += tempStr.PadRight(7, ' ');
                                    }
                                }
                                if (i == 10)
                                {
                                    // mainStr += tempStr.PadRight(7, ' ');
                                    if (tempStr.Length <= 7)
                                    {
                                        mainStr += tempStr.PadLeft(7, ' ');
                                    }
                                }
                                if (i == 2)
                                {
                                    if (tempStr.Length <= 10)
                                    {
                                        mainStr += tempStr.PadLeft(10, ' ');
                                    }
                                }
                                // tPrintText += tempStr;
                            }
                            mainStr += "\n";
                        }
                    }

                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }


                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void btnProfitReport_Click(object sender, RoutedEventArgs e)
        {
            if (_Class.clsVariables.tViewReport == true)
            {
                if (_Class.clsVariables.UserType != "1")
                {
                    tPrintingType = "";
                    lblTitle.Content = "DATEWISE REPORTS";
                    gridItemsManager.DataSource = null;
                    dt_selecttable.Rows.Clear();
                    dt_griddiaplay.Rows.Clear();

                    pnlCommon.Visibility = Visibility.Visible;
                    pnlCounterBtn.Visibility = Visibility.Hidden;
                    pnlPaymentReport.Visibility = Visibility.Hidden;


                    pnlCounterBtn.Visibility = Visibility.Hidden;
                    pnlCommon.Visibility = Visibility.Visible;
                    pnlCashDrawer.Visibility = Visibility.Collapsed;
                    pnlReport.Visibility = Visibility.Collapsed;
                    pnlEndOfDay.Visibility = Visibility.Collapsed;
                    pnlProfitReport.Visibility = Visibility.Visible;
                    Uccommission.Visibility = Visibility.Hidden;
                }
                else
                {
                    MyMessageBox.ShowBox("Please, get user rights to open Manager form!!", "Warning");
                }
            }
            else
            {
                MyMessageBox.ShowBox("You are not having permission to view this report", "Warning");
            }
        }

        private void windowsFormsHost1_ChildChanged(object sender, System.Windows.Forms.Integration.ChildChangedEventArgs e)
        {

        }
        DataTable dtReportEnd = new DataTable();
        private void Button_Click(object sender, RoutedEventArgs e)
        {


        }

        private void btnDrawerReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (cmbCounterName.Text != "All Counter")
                {
                    tPrintingType = "";
                    gridItemsManager.DataSource = null;
                    gridItemsManager.ColumnHeadersVisible = true;
                    dt_selecttable.Rows.Clear();
                    dt_griddiaplay.Rows.Clear();
                    mainStr = "";
                    listDisplay.Items.Clear();
                    DataTable dtNew = new DataTable();
                    dtNew.Rows.Clear();
                    dtReportEnd.Rows.Clear();
                    //SqlCommand cmd = new SqlCommand("select * from BeginCashDrawer_table where ctr_no=@tCounterNo and Date= (Select CONVERT(date, DATEADD(day,1,EndOfDay)) from EndOfDay_Table where Id=(select max(Id) from EndOfDay_Table))", con);
                    SqlCommand cmd = new SqlCommand("select * from BeginCashDrawer_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounterNo) and Date=@tDate ", con);
                    cmd.Parameters.AddWithValue("@tCounterNo", cmbCounterName.Text);
                    cmd.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtNew);
                    if (dtNew.Rows.Count > 0)
                    {
                        string tBeginId = dtNew.Rows[0]["Id"].ToString();
                        for (int i = 0; i < dtNew.Rows.Count; i++)
                        {

                            dtReportEnd.Rows.Add("0.05    ", dtNew.Rows[i]["Coin_P05"].ToString(), dtNew.Rows[i]["CoinAmt_P05"].ToString());
                            dtReportEnd.Rows.Add("0.10    ", dtNew.Rows[i]["Coin_P10"].ToString(), dtNew.Rows[i]["CoinAmt_P10"].ToString());
                            dtReportEnd.Rows.Add("0.20    ", dtNew.Rows[i]["Coin_P20"].ToString(), dtNew.Rows[i]["CoinAmt_P20"].ToString());
                            dtReportEnd.Rows.Add("0.50    ", dtNew.Rows[i]["Coin_P50"].ToString(), dtNew.Rows[i]["CoinAmt_P50"].ToString());
                            dtReportEnd.Rows.Add("1.00    ", dtNew.Rows[i]["Coin_1"].ToString(), dtNew.Rows[i]["CoinAmt_1"].ToString());
                            dtReportEnd.Rows.Add("2.00    ", dtNew.Rows[i]["Coin_2"].ToString(), dtNew.Rows[i]["CoinAmt_2"].ToString());
                            dtReportEnd.Rows.Add("5.00    ", dtNew.Rows[i]["Coin_5"].ToString(), dtNew.Rows[i]["CoinAmt_5"].ToString());
                            dtReportEnd.Rows.Add("10.00   ", dtNew.Rows[i]["Coin_10"].ToString(), dtNew.Rows[i]["CoinAmt_10"].ToString());
                            dtReportEnd.Rows.Add("20.00   ", dtNew.Rows[i]["Coin_20"].ToString(), dtNew.Rows[i]["CoinAmt_20"].ToString());
                            dtReportEnd.Rows.Add("50.00   ", dtNew.Rows[i]["Coin_50"].ToString(), dtNew.Rows[i]["CoinAmt_50"].ToString());
                            dtReportEnd.Rows.Add("100.00  ", dtNew.Rows[i]["Coin_100"].ToString(), dtNew.Rows[i]["CoinAmt_100"].ToString());
                            dtReportEnd.Rows.Add("1000.00 ", dtNew.Rows[i]["Coin_1000"].ToString(), dtNew.Rows[i]["CoinAmt_1000"].ToString());
                            dtReportEnd.Rows.Add("Begin Cash Drawer", dtNew.Rows[i]["CoinTot_Count"].ToString(), dtNew.Rows[i]["CoinTot_Amount"].ToString());
                        }

                        DataTable dtNew1 = new DataTable();
                        dtNew1.Rows.Clear();
                        SqlCommand cmd1 = new SqlCommand("select * from ResetDrawer_table where BeginCashDraw_Id=@tBeginId and ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounterNo)", con);
                        cmd1.Parameters.AddWithValue("@tBeginId", tBeginId);
                        cmd1.Parameters.AddWithValue("@tCounterNo", cmbCounterName.Text);
                        SqlDataAdapter adp1 = new SqlDataAdapter(cmd1);
                        adp1.Fill(dtNew1);
                        for (int i1 = 0; i1 < dtNew1.Rows.Count; i1++)
                        {
                            dtReportEnd.Rows.Add("", "", "");
                            dtReportEnd.Rows.Add("0.05    ", dtNew1.Rows[i1]["Coin_P05"].ToString(), dtNew1.Rows[i1]["CoinAmt_P05"].ToString());
                            dtReportEnd.Rows.Add("0.10    ", dtNew1.Rows[i1]["Coin_P10"].ToString(), dtNew1.Rows[i1]["CoinAmt_P10"].ToString());
                            dtReportEnd.Rows.Add("0.20    ", dtNew1.Rows[i1]["Coin_P20"].ToString(), dtNew1.Rows[i1]["CoinAmt_P20"].ToString());
                            dtReportEnd.Rows.Add("0.50    ", dtNew1.Rows[i1]["Coin_P50"].ToString(), dtNew1.Rows[i1]["CoinAmt_P50"].ToString());
                            dtReportEnd.Rows.Add("1.00    ", dtNew1.Rows[i1]["Coin_1"].ToString(), dtNew1.Rows[i1]["CoinAmt_1"].ToString());
                            dtReportEnd.Rows.Add("2.00    ", dtNew1.Rows[i1]["Coin_2"].ToString(), dtNew1.Rows[i1]["CoinAmt_2"].ToString());
                            dtReportEnd.Rows.Add("5.00    ", dtNew1.Rows[i1]["Coin_5"].ToString(), dtNew1.Rows[i1]["CoinAmt_5"].ToString());
                            dtReportEnd.Rows.Add("10.00   ", dtNew1.Rows[i1]["Coin_10"].ToString(), dtNew1.Rows[i1]["CoinAmt_10"].ToString());
                            dtReportEnd.Rows.Add("20.00   ", dtNew1.Rows[i1]["Coin_20"].ToString(), dtNew1.Rows[i1]["CoinAmt_20"].ToString());
                            dtReportEnd.Rows.Add("50.00   ", dtNew1.Rows[i1]["Coin_50"].ToString(), dtNew1.Rows[i1]["CoinAmt_50"].ToString());
                            dtReportEnd.Rows.Add("100.00  ", dtNew1.Rows[i1]["Coin_100"].ToString(), dtNew1.Rows[i1]["CoinAmt_100"].ToString());
                            dtReportEnd.Rows.Add("1000.00 ", dtNew1.Rows[i1]["Coin_1000"].ToString(), dtNew1.Rows[i1]["CoinAmt_1000"].ToString());
                            dtReportEnd.Rows.Add("Reset Drawer " + (i1 + 1), dtNew1.Rows[i1]["CoinTot_Count"].ToString(), dtNew1.Rows[i1]["CoinTot_Amount"].ToString());
                        }

                        DataTable dtNew2 = new DataTable();
                        dtNew2.Rows.Clear();
                        SqlCommand cmd2 = new SqlCommand("select * from CounterSettle_table where BeginCashDrawId=@tBeginId and ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounterNo)", con);
                        cmd2.Parameters.AddWithValue("@tBeginId", tBeginId);
                        cmd2.Parameters.AddWithValue("@tCounterNo", cmbCounterName.Text);
                        SqlDataAdapter adp2 = new SqlDataAdapter(cmd2);
                        adp2.Fill(dtNew2);
                        for (int i1 = 0; i1 < dtNew2.Rows.Count; i1++)
                        {
                            dtReportEnd.Rows.Add("", "", "");
                            dtReportEnd.Rows.Add("0.05    ", dtNew2.Rows[i1]["Coin_P05"].ToString(), dtNew2.Rows[i1]["Coin_P05amt"].ToString());
                            dtReportEnd.Rows.Add("0.10    ", dtNew2.Rows[i1]["Coin_P10"].ToString(), dtNew2.Rows[i1]["Coin_P10amt"].ToString());
                            dtReportEnd.Rows.Add("0.20    ", dtNew2.Rows[i1]["Coin_P20"].ToString(), dtNew2.Rows[i1]["Coin_P20amt"].ToString());
                            dtReportEnd.Rows.Add("0.50    ", dtNew2.Rows[i1]["Coin_P50"].ToString(), dtNew2.Rows[i1]["Coin_P50amt"].ToString());
                            dtReportEnd.Rows.Add("1.00    ", dtNew2.Rows[i1]["Coin_1"].ToString(), dtNew2.Rows[i1]["Coin_1amt"].ToString());
                            dtReportEnd.Rows.Add("2.00    ", dtNew2.Rows[i1]["Coin_2"].ToString(), dtNew2.Rows[i1]["Coin_2amt"].ToString());
                            dtReportEnd.Rows.Add("5.00    ", dtNew2.Rows[i1]["Coin_5"].ToString(), dtNew2.Rows[i1]["Coin_5amt"].ToString());
                            dtReportEnd.Rows.Add("10.00   ", dtNew2.Rows[i1]["Coin_10"].ToString(), dtNew2.Rows[i1]["Coin_10amt"].ToString());
                            dtReportEnd.Rows.Add("20.00   ", dtNew2.Rows[i1]["Coin_20"].ToString(), dtNew2.Rows[i1]["Coin_20amt"].ToString());
                            dtReportEnd.Rows.Add("50.00   ", dtNew2.Rows[i1]["Coin_50"].ToString(), dtNew2.Rows[i1]["Coin_50amt"].ToString());
                            dtReportEnd.Rows.Add("100.00  ", dtNew2.Rows[i1]["Coin_100"].ToString(), dtNew2.Rows[i1]["Coin_100amt"].ToString());
                            dtReportEnd.Rows.Add("1000.00 ", dtNew2.Rows[i1]["Coin_1000"].ToString(), dtNew2.Rows[i1]["Coin_1000amt"].ToString());
                            dtReportEnd.Rows.Add("Counter Settled ", dtNew2.Rows[i1]["CoinTotCount"].ToString(), dtNew2.Rows[i1]["CoinTotAmt"].ToString());
                        }

                    }
                    gridItemsManager.DataSource = dtReportEnd.DefaultView;

                    gridItemsManager.Columns[0].Width = 210;
                    gridItemsManager.Columns[1].Width = 90;
                    gridItemsManager.Columns[2].Width = 90;
                    this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;



                    funPrintHeaderPart();
                    //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                    //{
                    //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    //    {

                    charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                    topLine1 = "COUNTER " + _Class.clsVariables.tCounter + " DRAWER REPORT";
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }
                    //}

                    //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                    //{
                    //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                    topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }

                    //}

                    //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                    //{
                    //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                    topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }

                    topLine1 = "Report Counter : " + cmbCounterName.Text;
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }

                    //}

                    //Print Line Below Header
                    //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                    //{
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    //    }

                    //    // print lint below logo
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    //    {
                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }
                    //}
                    // ds.Tables.Clear();
                    // double location = 0.00;
                    string tempStr = null;
                    //for (int i1 = 0; i1 < dtPrint.Rows.Count - 1; i1++)
                    //{
                    //    if (dtPrint.Rows[i1]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i1]["Property"].ToString();
                    string tQtyHeading = "";
                    tQtyHeading = "Coin/Cash";
                    //  mainStr += tQtyHeading;
                    double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 22));
                    for (int j = 0; j < chkCount; j++)
                    {
                        tQtyHeading += " ";
                    }
                    tQtyHeading += "   Count   ";
                    // tQtyHeading += "Amount ";
                    tQtyHeading += "     Amount";
                    mainStr += tQtyHeading;
                    mainStr += "\n";
                    //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                    //{
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    //    }

                    //    // print lint below logo
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    //    {
                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                    //    }
                    //}

                    for (int mn = 0; mn < dtReportEnd.Rows.Count; mn++)
                    //foreach (DataRow row in dgsales.Rows)
                    {
                        // object[] array = dgsales.Rows[mn].;
                        bool isChk = false;
                        if (isChk == false)
                        {
                            for (int i = 0; i < 3; i++)
                            {
                                tempStr = dtReportEnd.Rows[mn][i].ToString();
                                //  MessageBox.Show(tempStr.Length.ToString());
                                findCenterPosition = (double.Parse(charPerLine) - 22);
                                if (i == 0)
                                {
                                    if (tempStr.Length <= (int)findCenterPosition)
                                    {
                                        mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                    }
                                    else
                                    {
                                        string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                        //    MessageBox.Show(temp);
                                        int chkSpace = temp.LastIndexOf(" ");
                                        int loc = (temp.Length - temp.LastIndexOf(" "));
                                        //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                        if (chkSpace != -1)
                                        {
                                            mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                            //   MessageBox.Show(mainStr.ToString());
                                            for (int j = 0; j < loc + 18; j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += "\n";
                                            string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                            // mainStr += temp1;
                                            if (temp1.Length <= (int)findCenterPosition)
                                            {
                                                mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                            }
                                        }
                                        else
                                        {
                                            mainStr += temp.ToString();
                                        }

                                    }
                                }

                                if (i == 1)
                                {
                                    if (tempStr.Length < 12)
                                    {
                                        mainStr += tempStr.PadRight(11, ' ');
                                    }
                                }
                                if (i == 2)
                                {
                                    // mainStr += tempStr.PadRight(7, ' ');
                                    if (tempStr.Length <= 11)
                                    {
                                        mainStr += tempStr.PadLeft(11, ' ');
                                    }
                                }
                                // tPrintText += tempStr;
                            }
                            mainStr += "\n";
                        }
                    }

                    //       }
                    //   }





                    // lblPrint.Content = mainStr;
                    //Print Line Below Header
                    //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                    //{
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    //    }

                    //    // print lint below logo
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    //    {
                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }
                    //}
                    // listDisplay.Items.Add(mainStr);
                }
                else
                {
                    MyMessageBox.ShowBox("This report not supporting for all counter", "Warning");
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }
        public void funDrawerOpen()
        {
            try
            {
                for (int i8 = 0; i8 < dtPrint.Rows.Count - 1; i8++)
                {
                    if (dtPrint.Rows[i8]["Describ"].ToString() == "Printer Name*")
                    {
                        string tNETS = "";
                        if (tNETS != "NETS")
                        {
                            tNETS = "";
                            DataTable dtNew = new DataTable();
                            dtNew.Rows.Clear();
                            SqlCommand cmd = new SqlCommand("Select * from CashDrawerSetting_table where Counter=@tCounter", con);
                            cmd.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                            SqlDataAdapter adp = new SqlDataAdapter(cmd);

                            adp.Fill(dtNew);
                            if (dtNew.Rows.Count > 0)
                            {
                                if (dtNew.Rows[0]["Enable"].ToString().Trim() == "Yes")
                                {
                                    PrintDialog pd = new PrintDialog();
                                    string s;
                                    // code = null;
                                    if (dtNew.Rows[0]["Action"].ToString().Trim() == "Open")
                                    {
                                        string[] byteStrings = dtNew.Rows[0]["DrawOpen"].ToString().Split(',');
                                        byteOut = new byte[byteStrings.Length];
                                        for (int i = 0; i < byteStrings.Length; i++)
                                        {
                                            byteOut[i] = Convert.ToByte(byteStrings[i]);
                                        }
                                    }
                                    s = System.Text.ASCIIEncoding.ASCII.GetString(byteOut);// device-dependent string, need a FormFeed?

                                    //   RawPrinterHelper.SendStringToPrinter(dtPrint.Rows[i8]["Property"].ToString(), s);
                                    Thread workerThread = new Thread(() => RawPrinterHelper.SendStringToPrinter(dtPrint.Rows[i8]["Property"].ToString(), s));
                                    workerThread.Start();
                                    bool finished = workerThread.Join(3000);
                                    if (!finished)
                                    {
                                        workerThread.Abort();
                                    }
                                }

                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        string tBeginMain = "0.00";
        private void btnCounterReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                tReportTitle = "COUNTER DRAWER REPORT";
                dt_griddiaplay1.Rows.Clear();
                funCounterReport(_Class.clsVariables.tUserNo);
                gridItemsManager.DataSource = dt_griddiaplay1;
                gridItemsManager.Columns[0].Width = 290;
                gridItemsManager.Columns[1].Width = 90;
                funDrawerPrint();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        public void funCounterReport(string userno)
        {
            try
            {
                string tCounterNoNew = "1";
                DataTable dtCounterNo = new DataTable();
                dtCounterNo.Rows.Clear();
                SqlCommand cmdCounterNo = new SqlCommand("Select Ctr_no from User_table where user_no=@tUserNo", con);
                cmdCounterNo.Parameters.AddWithValue("@tUserNo", userno);
                SqlDataAdapter adpCounterNo = new SqlDataAdapter(cmdCounterNo);
                adpCounterNo.Fill(dtCounterNo);
                if (dtCounterNo.Rows.Count > 0)
                {
                    tCounterNoNew = dtCounterNo.Rows[0]["Ctr_no"].ToString();
                }
                //Return Item Values
                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();
                // SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=@tCounter and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno, party_no", con);
                SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=@tCounter and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno, party_no", con);
                cmdVoid.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@tCounter", tCounterNoNew);
                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);

                double tCashReturnValue = 0.00;
                double tNETSReturnValue = 0.00;

                // Cash and NETS Return Value

                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    if (dtVoid.Rows[i]["party_no"].ToString() == "2")
                    {
                        tCashReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                    else if (dtVoid.Rows[i]["party_no"].ToString() == "14")
                    {
                        tNETSReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                }
                string lblCNETSSalesTotal1 = "0.00";
                string lblCCashSalesTotal1 = "0.00";

                //DataTable dtNew4 = new DataTable();
                //SqlCommand adp3 = new SqlCommand("[sp_SalesCreationSelectSingle]", con);
                //adp3.CommandType = CommandType.StoredProcedure;
                //adp3.Parameters.AddWithValue("@tValue", userno);
                //adp3.Parameters.AddWithValue("@tActionType", "lblNETSSalesTotal");
                ////SqlCommand adp3 = new SqlCommand("select Distinct (Strn_no) from stktrn_table,salmas_table where  stktrn_table.strn_rtno<>1 and  stktrn_table.strn_no=salmas_table.smas_no and stktrn_table.strn_date=(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable))", con);
                //dtNew4.Rows.Clear();
                //SqlDataAdapter adp1111 = new SqlDataAdapter(adp3);
                //adp1111.Fill(dtNew4);
                //// SqlCommand adp3 = new SqlCommand("Select sum(smas_netAmount) as Amt from SalMas_Table where party_no='14' and smas_billdate like '" + date  + "%'", con);

                //if (dtNew4.Rows.Count > 0)
                //{
                //PrathiCoding:
                //if (dtNew4.Rows[0][0].ToString() != "")
                //{
                //    lblNETSSalesTotal.Content = String.Format("{0:0.00}", double.Parse(dtNew4.Rows[0][0].ToString()));
                //}
                //if (lblNETSSalesTotal.Content == "")
                //{
                //    lblNETSSalesTotal.Content = "0.00";
                //}
                //Anbu Coding Here:
                double CashAmt = 0.00, NetsAmt = 0.00;
                //  for (int i = 0; i < dtNew4.Rows.Count; i++)
                {
                    //   SqlCommand cmd = new SqlCommand(@"select (Case When SalRecv_table.SalRecv_Led=14  Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) as NETs, (Case When SalRecv_table.SalRecv_Led=5 Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) As Cash from salmas_table,SalRecv_table  where smas_Cancel<>1 and smas_billdate =(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    //SqlCommand cmd100 = new SqlCommand(@"select (Case When SalRecv_table.SalRecv_Led=14  Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) as NETs, (Case When SalRecv_table.SalRecv_Led=5 Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) As Cash from salmas_table,SalRecv_table  where salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.ctr_no=(Select ctr_no from User_table where user_no=@tUserNo) and smas_Cancel<>1 and smas_billdate =@tDate and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    SqlCommand cmd100 = new SqlCommand(@"select (Case When SalRecv_table.SalRecv_Led=14  Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) as NETs, (Case When SalRecv_table.SalRecv_Led=5 Then Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt))  End) As Cash from salmas_table,SalRecv_table  where salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.UserNo=@tUserNo and smas_Cancel<>1 and smas_billdate =@tDate and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    cmd100.Parameters.AddWithValue("@tUserNo", userno);
                    cmd100.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    // lblNETSSalesTotal.Content = String.Format("{0:0.00}", double.Parse(dtNew4.Rows[0][0].ToString()));  
                    SqlDataAdapter aadp = new SqlDataAdapter(cmd100);
                    DataTable SelNetsAndCash = new DataTable();
                    SelNetsAndCash.Rows.Clear();
                    aadp.Fill(SelNetsAndCash);
                    if (SelNetsAndCash.Rows.Count > 0)
                    {
                        for (int j = 0; j < SelNetsAndCash.Rows.Count; j++)
                        {
                            if (SelNetsAndCash.Rows[j]["Cash"].ToString().Trim() != "" && SelNetsAndCash.Rows[j]["Cash"].ToString().Trim() != null)
                            {
                                CashAmt += Convert.ToDouble(SelNetsAndCash.Rows[j]["Cash"].ToString());
                            }
                            if (SelNetsAndCash.Rows.Count >= 1)
                            {
                                if (SelNetsAndCash.Rows[j]["NETs"].ToString().Trim() != "" && SelNetsAndCash.Rows[j]["NETs"].ToString().Trim() != null)
                                {
                                    NetsAmt += Convert.ToDouble(SelNetsAndCash.Rows[j]["NETs"].ToString());
                                }
                            }
                        }
                    }
                }


                lblCCashSalesTotal1 = (CashAmt - tCashReturnValue).ToString("0.00");
                lblCNETSSalesTotal1 = (NetsAmt - tNETSReturnValue).ToString("0.00");
                // double StamountTotal = 0.00;
                //StamountTotal = lblStartAmt.Content == "" ? 0.00 : (Convert.ToDouble(lblStartAmt.Content));
                // lblCashInDrawer.Content =  Convert.ToDouble(StamountTotal+CashAmt-tCashReturnValue).ToString("0.00");
                if (lblCNETSSalesTotal1 == "")
                {
                    lblCNETSSalesTotal1 = "0.00";
                }
                // }
                //CreditCard Total Amount:
                ////SqlCommand cmd1 = new SqlCommand("SP_SelectQuery", con);
                ////cmd1.CommandType = CommandType.StoredProcedure;
                ////cmd1.Parameters.AddWithValue("@ActionType", "CreditCardSe");
                ////cmd1.Parameters.AddWithValue("@ItemName", "");
                ////cmd1.Parameters.AddWithValue("@ItemCode", "");
                ////SqlDataAdapter aadp1 = new SqlDataAdapter(cmd1);
                ////dtCreditcard1.Rows.Clear();
                ////// dt_griddiaplay1.Rows.Clear();
                ////aadp1.Fill(dtCreditcard1);
                ////double totamount = 0.00;
                ////dtGroupReport.Rows.Clear();
                ////string lblCreditCardSalesTotal1 = "0.00";
                ////if (dtCreditcard1.Rows.Count > 0)
                ////{
                ////    //gridItems.DataSource = dtCreditcard1.DefaultView;
                ////    for (int i = 0; i < dtCreditcard1.Rows.Count; i++)
                ////    {
                ////        totamount += Convert.ToDouble(dtCreditcard1.Rows[i]["Rec Amt"].ToString());
                ////    }
                ////  lblCreditCardSalesTotal1 = totamount.ToString("0.00");
                ////}


                DataTable dtLedgerNo = new DataTable();
                dtLedgerNo.Rows.Clear();
                DataTable dtHAC = new DataTable();


                SqlCommand cmdLedger = new SqlCommand("Select * from Ledger_table where Ledger_groupno=32 and Ledger_no<>2", con);
                SqlDataAdapter adpLedger = new SqlDataAdapter(cmdLedger);
                adpLedger.Fill(dtLedgerNo);
                double totamountHAC = 0.00;
                string lblCHouseACSalesTotal1 = "0.00";
                for (int mn = 0; mn < dtLedgerNo.Rows.Count; mn++)
                {
                    dtHAC.Rows.Clear();
                    //SqlCommand cmdHAC1 = new SqlCommand(@"select Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount  from salmas_table,SalRecv_table  where SalRecv_table.SalRecv_Led=@tPartyNo and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.ctr_no=(Select ctr_no from User_table where user_no=@tUserNo) and smas_Cancel<>1 and smas_billdate =(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    // SqlCommand cmdHAC1 = new SqlCommand(@"select Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount  from salmas_table,SalRecv_table  where SalRecv_table.SalRecv_Led=@tPartyNo and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.ctr_no=(Select ctr_no from User_table where user_no=@tUserNo) and smas_Cancel<>1 and smas_billdate =(Select convert(date,(EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    //munies code start
                    //SqlCommand cmdHAC1 = new SqlCommand(@"select Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount  from salmas_table,SalRecv_table  where SalRecv_table.SalRecv_Led=@tPartyNo and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.ctr_no=(Select ctr_no from User_table where user_no=@tUserNo) and smas_Cancel<>1 and smas_billdate ='" + dpBillDate.SelectedDate.Value.Year + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Day + "' and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    SqlCommand cmdHAC1 = new SqlCommand(@"select Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount  from salmas_table,SalRecv_table  where SalRecv_table.SalRecv_Led=@tPartyNo and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.Userno=@tUserNo and smas_Cancel<>1 and smas_billdate ='" + dpBillDate.SelectedDate.Value.Year + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Day + "' and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    //munies code end
                    cmdHAC1.Parameters.AddWithValue("@tUserNo", userno);
                    cmdHAC1.Parameters.AddWithValue("@tPartyNo", dtLedgerNo.Rows[mn]["Ledger_no"].ToString());
                    SqlDataAdapter aadpHAC1 = new SqlDataAdapter(cmdHAC1);
                    dtCreditcard1.Rows.Clear();
                    // dt_griddiaplay1.Rows.Clear();
                    aadpHAC1.Fill(dtCreditcard1);

                    dtGroupReport.Rows.Clear();
                    if (dtCreditcard1.Rows.Count > 0)
                    {
                        //gridItems.DataSource = dtCreditcard1.DefaultView;
                        for (int i = 0; i < dtCreditcard1.Rows.Count; i++)
                        {
                            totamountHAC += Convert.ToDouble(dtCreditcard1.Rows[i]["Amount"].ToString());
                        }
                    }
                }
                lblCHouseACSalesTotal1 = totamountHAC.ToString("0.00");




                DataTable dtLedgerNoCredit = new DataTable();
                dtLedgerNoCredit.Rows.Clear();
                DataTable dtCredit = new DataTable();


                SqlCommand cmdLedgerCredit = new SqlCommand("Select * from Ledger_table where Ledger_groupno=5 and Ledger_no<>14", con);
                SqlDataAdapter adpLedgerCredit = new SqlDataAdapter(cmdLedgerCredit);
                adpLedgerCredit.Fill(dtLedgerNoCredit);
                double totamountCredit = 0.00;
                string lblCCreditCardSalesTotal1 = "0.00";
                for (int mn = 0; mn < dtLedgerNoCredit.Rows.Count; mn++)
                {
                    dtHAC.Rows.Clear();
                    //SqlCommand cmdHAC1 = new SqlCommand(@"select Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount  from salmas_table,SalRecv_table  where SalRecv_table.SalRecv_Led=@tPartyNo and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.ctr_no=(Select ctr_no from User_table where user_no=@tUserNo) and smas_Cancel<>1 and smas_billdate =(Select convert(date,DATEADD(day,1,EndOfDay),103) from EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    //SqlCommand cmdHAC1 = new SqlCommand(@"select Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount  from salmas_table,SalRecv_table  where SalRecv_table.SalRecv_Led=@tPartyNo and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.ctr_no=(Select ctr_no from User_table where user_no=@tUserNo) and smas_Cancel<>1 and smas_billdate =@tDate and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    SqlCommand cmdHAC1 = new SqlCommand(@"select Convert(Numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount  from salmas_table,SalRecv_table  where SalRecv_table.SalRecv_Led=@tPartyNo and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and salmas_table.Smas_rtno=0 and salmas_table.userno=@tUserNo and smas_Cancel<>1 and smas_billdate =@tDate and salmas_table.smas_rtno<>1 and salmas_table.smas_billno=SalRecv_table.salRecv_Salno group by SalRecv_table.SalRecv_Amt,SalRecv_table.SalRecv_Led", con);
                    cmdHAC1.Parameters.AddWithValue("@tUserNo", userno);
                    cmdHAC1.Parameters.AddWithValue("@tPartyNo", dtLedgerNoCredit.Rows[mn]["Ledger_no"].ToString());
                    cmdHAC1.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    SqlDataAdapter aadpHAC1 = new SqlDataAdapter(cmdHAC1);
                    dtCreditcard1.Rows.Clear();
                    // dt_griddiaplay1.Rows.Clear();
                    aadpHAC1.Fill(dtCreditcard1);

                    dtGroupReport.Rows.Clear();
                    if (dtCreditcard1.Rows.Count > 0)
                    {
                        //gridItems.DataSource = dtCreditcard1.DefaultView;
                        for (int i = 0; i < dtCreditcard1.Rows.Count; i++)
                        {
                            totamountCredit += Convert.ToDouble(dtCreditcard1.Rows[i]["Amount"].ToString());
                        }
                    }
                }
                lblCCreditCardSalesTotal1 = totamountCredit.ToString("0.00");


                double tBeginCash = 0, tExtra = 0;
                string tBeginId = "";
                DataTable dtCounter = new DataTable();
                dtCounter.Rows.Clear();
                SqlCommand cmdCounter = new SqlCommand("select ctr_name from counter_table where ctr_no=(select ctr_no from User_table where User_no=@tUserNo)", con);
                cmdCounter.Parameters.AddWithValue("@tUserNo", userno);
                SqlDataAdapter adpCounter = new SqlDataAdapter(cmdCounter);
                adpCounter.Fill(dtCounter);
                if (dtCounter.Rows.Count > 0)
                {
                    dt_griddiaplay1.Rows.Add("", "");
                    dt_griddiaplay1.Rows.Add("Counter Name", dtCounter.Rows[0]["ctr_name"].ToString());
                }
                DataTable dtNew1 = new DataTable();
                dtNew1.Rows.Clear();
                //SqlCommand cmdEnd = new SqlCommand("sp_SalesCreationSelectSingle", con);
                //cmdEnd.CommandType = CommandType.StoredProcedure;
                //cmdEnd.Parameters.AddWithValue("@tActionType", "lblStartAmt");
                //cmdEnd.Parameters.AddWithValue("@tValue", userno);

                SqlCommand cmdEnd = new SqlCommand("sp_EndOfDayPrinting", con);
                cmdEnd.CommandType = CommandType.StoredProcedure;
                cmdEnd.Parameters.AddWithValue("@tActionType", "lblStartAmt");
                cmdEnd.Parameters.AddWithValue("@tValue", userno);
                cmdEnd.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);

                SqlDataAdapter adp1 = new SqlDataAdapter(cmdEnd);
                adp1.Fill(dtNew1);
                bool isChk = false;
                string lblStartAmt = "0.00";
                for (int mn = 0; mn < dtNew1.Rows.Count; mn++)
                {
                    isChk = true;
                    lblStartAmt = String.Format("{0:0.00}", double.Parse(dtNew1.Rows[mn]["CoinTot_Amount"].ToString()));
                }
                if (isChk == false)
                {
                    lblStartAmt = String.Format("{0:0.00}", double.Parse(lblStartAmt));
                }
                DataTable dtNew3 = new DataTable();
                //SqlCommand adp31 = new SqlCommand("[sp_SalesCreationSelectSingle]", con);
                //adp31.CommandType = CommandType.StoredProcedure;
                //adp31.Parameters.AddWithValue("@tValue", userno);
                //adp31.Parameters.AddWithValue("@tActionType", "lblCashSalesTotal");

                SqlCommand adp31 = new SqlCommand("[sp_EndOfDayPrinting]", con);
                adp31.CommandType = CommandType.StoredProcedure;
                adp31.Parameters.AddWithValue("@tValue", userno);
                adp31.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                adp31.Parameters.AddWithValue("@tActionType", "lblCashSalesTotal");

                SqlDataAdapter adp10 = new SqlDataAdapter(adp31);

                dtNew3.Rows.Clear();
                adp10.Fill(dtNew3);
                //   SqlCommand adp2 = new SqlCommand("Select sum(smas_netAmount) as Amt from SalMas_Table where party_no='2' and smas_billdate like '" + date  + "%'", con);
                string lblCashSalesTotal = "0.00";
                if (dtNew3.Rows.Count > 0)
                {
                    if (dtNew3.Rows[0]["Amt"].ToString() != "")
                    {
                        double temp = double.Parse(dtNew3.Rows[0]["Amt"].ToString());
                        lblCashSalesTotal = String.Format("{0:0.00}", temp);
                    }

                    if (lblCashSalesTotal.ToString().Trim() == "")
                    {
                        lblCashSalesTotal = "0.00";
                    }
                }
                double tPrevValue = 0;
                string tDrawerStart = "";
                DataTable dtNew41 = new DataTable();
                //SqlCommand adp311 = new SqlCommand("[sp_SalesCreationSelectSingle]", con);
                //adp311.CommandType = CommandType.StoredProcedure;
                //adp311.Parameters.AddWithValue("@tValue", userno);
                //adp311.Parameters.AddWithValue("@tActionType", "CashInDrawer");

                SqlCommand adp311 = new SqlCommand("[sp_EndOfDayPrinting]", con);
                adp311.CommandType = CommandType.StoredProcedure;
                adp311.Parameters.AddWithValue("@tValue", userno);
                adp311.Parameters.AddWithValue("@tActionType", "CashInDrawer");
                adp311.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);

                // dr = adp3.ExecuteReader();
                dtNew41.Rows.Clear();
                SqlDataAdapter adp111 = new SqlDataAdapter(adp311);
                adp111.Fill(dtNew41);
                if (dtNew41.Rows.Count > 0)
                {
                    if (dtNew41.Rows[0]["PreviousDrawerCash"].ToString() == "")
                    {
                        tPrevValue = 0;
                    }
                    else
                    {
                        tPrevValue = double.Parse(dtNew41.Rows[0]["PreviousDrawerCash"].ToString());
                    }
                }
                string lblCashInDrawer = String.Format("{0:0.00}", (double.Parse(lblStartAmt.ToString()) + (double.Parse(lblCashSalesTotal.ToString()) - (tPrevValue + tCashReturnValue))));
                DataTable dtBegin = new DataTable();
                dtBegin.Rows.Clear();
                // SqlCommand cmd = new SqlCommand("Select Id,CoinTot_Amount from BeginCashDrawer_table where Id=(select Max(Id) from BeginCashDrawer_table where Ctr_no=(select Ctr_no from User_table where User_no=@tUserNo) and Date=(SELECT CONVERT(date,DATEADD(day,1,MAX(endofday))) from EndOfDay_Table))", con);
                SqlCommand cmd = new SqlCommand("Select Id,CoinTot_Amount from BeginCashDrawer_table where Id=(select Max(Id) from BeginCashDrawer_table where user_no=@tUserNo and Date=@tDate)", con);
                cmd.Parameters.AddWithValue("@tUserNo", userno);
                cmd.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtBegin);
                if (dtBegin.Rows.Count > 0)
                {
                    tBeginId = dtBegin.Rows[0]["Id"].ToString();
                    tBeginCash = (dtBegin.Rows[0]["CoinTot_Amount"].ToString() == "") ? 0.00 : double.Parse(dtBegin.Rows[0]["CoinTot_Amount"].ToString());
                    tDrawerStart = string.Format("{0:0.00}", (dtBegin.Rows[0]["CoinTot_Amount"].ToString() == "") ? 0.00 : double.Parse(dtBegin.Rows[0]["CoinTot_Amount"].ToString()));
                    dt_griddiaplay1.Rows.Add("Drawer Start", tDrawerStart);
                    tBeginMain = string.Format("{0:0.00}", (dtBegin.Rows[0]["CoinTot_Amount"].ToString() == "") ? 0.00 : double.Parse(dtBegin.Rows[0]["CoinTot_Amount"].ToString()));
                }
                DataTable dtReset = new DataTable();
                dtReset.Rows.Clear();
                SqlCommand cmd1 = new SqlCommand("select id,CoinTot_Amount,PreviousDrawerCash,(CoinTot_Amount+PreviousDrawerCash) as Total from ResetDrawer_table where BeginCashDraw_Id=@tBeginId order by id ASC", con);
                cmd1.Parameters.AddWithValue("@tBeginId", tBeginId);
                //cmd1.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                SqlDataAdapter adp11 = new SqlDataAdapter(cmd1);
                adp11.Fill(dtReset);
                double tTotSal = 0.0, tSal = 0.0;
                for (int mn = 0; mn < dtReset.Rows.Count; mn++)
                {
                    if (dtReset.Rows[mn]["PreviousDrawerCash"].ToString() == "")
                    {
                        tSal = 0.0;
                    }
                    else
                    {
                        tSal = double.Parse(dtReset.Rows[mn]["PreviousDrawerCash"].ToString());
                    }
                    tTotSal += tSal;

                    dt_griddiaplay1.Rows.Add("Sales", dtReset.Rows[mn]["PreviousDrawerCash"].ToString());
                    dt_griddiaplay1.Rows.Add("Total", "");
                    //  dt_griddiaplay1.Rows.Add("Drawer Status", "Same");

                    if (mn < dtReset.Rows.Count)
                    {
                        //Checking Start

                        double tSales = 0.0, tPrev = 0.0;

                        for (int i = 0; i < dt_griddiaplay1.Rows.Count; i++)
                        {
                            if (dt_griddiaplay1.Rows[i][0].ToString().Trim() == "Sales")
                            {
                                tSales = 0.0;
                                tPrev = 0.0;
                                if (dt_griddiaplay1.Rows[i - 1][1].ToString() != "")
                                {
                                    tPrev = double.Parse(dt_griddiaplay1.Rows[i - 1][1].ToString());
                                }
                                if (dt_griddiaplay1.Rows[i][1].ToString() != "")
                                {
                                    tSales = double.Parse(dt_griddiaplay1.Rows[i][1].ToString());
                                }
                                dt_griddiaplay1.Rows[i + 1][1] = string.Format("{0:0.00}", (tPrev + tSales));
                                //  dt_griddiaplay1.Rows[i + 2][1] = string.Format("{0:0.00}", (tPrev == (tPrev + tSales)) ? "Same" : ((tPrev < (tPrev + tSales)) ? "Over" : "Short"));
                                // break;
                            }
                        }

                        //Checking End

                        double tReset = (dtReset.Rows[mn]["CoinTot_Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtReset.Rows[mn]["CoinTot_Amount"].ToString().Trim());
                        tExtra += (tReset - tBeginCash);
                        tBeginCash = tReset;

                        double tPrevTot = (dt_griddiaplay1.Rows[dt_griddiaplay1.Rows.Count - 1][1].ToString() == "") ? 0.00 : double.Parse(dt_griddiaplay1.Rows[dt_griddiaplay1.Rows.Count - 1][1].ToString());
                        double tResetStart = (dtReset.Rows[mn]["CoinTot_Amount"].ToString() == "") ? 0.00 : double.Parse(dtReset.Rows[mn]["CoinTot_Amount"].ToString());
                        // dt_griddiaplay1.Rows.Add("Counter Closed", string.Format("{0:0.00}", tPrevTot - tResetStart));
                        dt_griddiaplay1.Rows.Add("Counter Closed", string.Format("{0:0.00}", tPrevTot));
                        //  string tStatus = "";
                        double tResetSettle = 0;
                        if (mn == 0)
                        {

                            //tResetSettle = (tPrevTot - tResetStart) - double.Parse(tDrawerStart);
                            //if ((tPrevTot - tResetStart) > double.Parse(tDrawerStart))
                            //{
                            //    tStatus = "Over";

                            //}
                            //else if ((tPrevTot - tResetStart) < double.Parse(tDrawerStart))
                            //{
                            //    tStatus = "Short";
                            //}
                            //else
                            //{
                            //    tStatus = "Same";
                            //}

                            //tResetSettle = (tPrevTot ) - double.Parse(tDrawerStart);

                            tResetSettle = 0;
                            tStatus = "Same";

                        }
                        else
                        {
                            double tCashSalesNew = 0.00;
                            for (int mnk = dt_griddiaplay1.Rows.Count - 1; mnk > 1; mnk--)
                            {

                                if (dt_griddiaplay1.Rows[mnk][0].ToString().Trim() == "Sales")
                                {
                                    tCashSalesNew = (dt_griddiaplay1.Rows[mnk][1].ToString().Trim() == "") ? 0 : double.Parse(dt_griddiaplay1.Rows[mnk][1].ToString().Trim());
                                    break;
                                }
                            }
                            double tResetStartNext = 0.00;
                            for (int mnk = dt_griddiaplay1.Rows.Count - 1; mnk > 1; mnk--)
                            {
                                if (dt_griddiaplay1.Rows[mnk][0].ToString().Trim() == "Drawer Start")
                                {
                                    tResetStartNext = (dt_griddiaplay1.Rows[mnk][1].ToString().Trim() == "") ? 0 : double.Parse(dt_griddiaplay1.Rows[mnk][1].ToString().Trim());
                                    break;
                                }
                                if (dt_griddiaplay1.Rows[mnk][0].ToString().Trim() != "" && dt_griddiaplay1.Rows[mnk][0].ToString().Trim().Length > 11)
                                {
                                    string tTemp = dt_griddiaplay1.Rows[mnk][0].ToString().Trim().Substring(0, 12);
                                    if (tTemp == "Reset Drawer")
                                    {
                                        tResetStartNext = (dt_griddiaplay1.Rows[mnk][1].ToString().Trim() == "") ? 0 : double.Parse(dt_griddiaplay1.Rows[mnk][1].ToString().Trim());
                                        break;
                                    }
                                }
                            }
                            tResetSettle = (tPrevTot - (tResetStart + tCashSalesNew)) - tResetStartNext;
                            if ((tPrevTot - (tResetStart + tCashSalesNew)) > tResetStartNext)
                            {
                                tStatus = "Over";
                            }
                            else if ((tPrevTot - (tResetStart + tCashSalesNew)) < tResetStartNext)
                            {
                                tStatus = "Short";
                            }
                            else
                            {
                                tStatus = "Same";
                            }
                        }
                        //dt_griddiaplay1.Rows.Add("Drawer Status", tStatus);
                        //dt_griddiaplay1.Rows.Add("Drawer Status Amount", string.Format("{0:0.00}", tResetSettle));
                        dt_griddiaplay1.Rows.Add("Drawer Status", "Same");
                        dt_griddiaplay1.Rows.Add("Drawer Status Amount", string.Format("{0:0.00}", 0));
                        dt_griddiaplay1.Rows.Add("", "");
                        dt_griddiaplay1.Rows.Add("Reset Drawer " + (mn + 1), dtReset.Rows[mn]["CoinTot_Amount"].ToString());
                    }
                }


                if (tBeginId != "")
                {
                    DataTable dtEnd = new DataTable();
                    dtEnd.Rows.Clear();
                    SqlCommand cmd2 = new SqlCommand("select Id,CoinTotAmt from CounterSettle_table where BeginCashDrawId=@tBeginId", con);
                    cmd2.Parameters.AddWithValue("@tBeginId", tBeginId);
                    //cmd1.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                    SqlDataAdapter adp2 = new SqlDataAdapter(cmd2);
                    adp2.Fill(dtEnd);
                    if (dtEnd.Rows.Count > 0)
                    {

                        double tCashSalesNew1 = 0.00;
                        for (int mnk = dt_griddiaplay1.Rows.Count - 1; mnk > 1; mnk--)
                        {

                            if (dt_griddiaplay1.Rows[mnk][0].ToString().Trim() == "Sales")
                            {
                                tCashSalesNew1 += (dt_griddiaplay1.Rows[mnk][1].ToString().Trim() == "") ? 0 : double.Parse(dt_griddiaplay1.Rows[mnk][1].ToString().Trim());
                            }
                        }

                        dt_griddiaplay1.Rows.Add("Sales", string.Format("{0:0.00}", ((lblCashSalesTotal.ToString() == "") ? 0 : (double.Parse(lblCashSalesTotal.ToString()) - tCashReturnValue) - tTotSal)));
                        dt_griddiaplay1.Rows.Add("Total", "");
                        //  dt_griddiaplay1.Rows.Add("Drawer Status", "");
                        // dt_griddiaplay1.Rows.Add("", "");






                        double tFinalSettle = (dtEnd.Rows[0]["CoinTotAmt"].ToString().Trim() == "") ? 0.00 : double.Parse(dtEnd.Rows[0]["CoinTotAmt"].ToString());

                        dt_griddiaplay1.Rows.Add("Counter Closed", dtEnd.Rows[0]["CoinTotAmt"].ToString());

                        double tTotDrawerandSales1 = 0.00;
                        double tCashSalesNew = 0.00;
                        for (int mnk = dt_griddiaplay1.Rows.Count - 1; mnk > 1; mnk--)
                        {

                            if (dt_griddiaplay1.Rows[mnk][0].ToString().Trim() == "Sales")
                            {
                                tCashSalesNew = (dt_griddiaplay1.Rows[mnk][1].ToString().Trim() == "") ? 0 : double.Parse(dt_griddiaplay1.Rows[mnk][1].ToString().Trim());
                                break;
                            }
                        }
                        for (int mnk = dt_griddiaplay1.Rows.Count - 1; mnk > 1; mnk--)
                        {

                            if (dt_griddiaplay1.Rows[mnk][0].ToString().Trim() == "Drawer Start")
                            {
                                tTotDrawerandSales1 = (dt_griddiaplay1.Rows[mnk][1].ToString().Trim() == "") ? 0 : double.Parse(dt_griddiaplay1.Rows[mnk][1].ToString().Trim());
                                break;
                            }
                            if (dt_griddiaplay1.Rows[mnk][0].ToString().Trim() != "" && dt_griddiaplay1.Rows[mnk][0].ToString().Trim().Length > 11)
                            {
                                string tTemp = dt_griddiaplay1.Rows[mnk][0].ToString().Trim().Substring(0, 12);
                                if (tTemp == "Reset Drawer")
                                {
                                    tTotDrawerandSales1 = (dt_griddiaplay1.Rows[mnk][1].ToString().Trim() == "") ? 0 : double.Parse(dt_griddiaplay1.Rows[mnk][1].ToString().Trim());
                                    break;
                                }
                            }
                        }
                        dt_griddiaplay1.Rows.Add("Drawer Status", (tFinalSettle == (tTotDrawerandSales1 + tCashSalesNew)) ? "Same" : ((tFinalSettle > (tTotDrawerandSales1 + tCashSalesNew)) ? "Over" : "Short"));
                        dt_griddiaplay1.Rows.Add("Drawer Status Amount", string.Format("{0:0.00}", (tFinalSettle - (tTotDrawerandSales1 + tCashSalesNew))));
                        dt_griddiaplay1.Rows.Add("", "");



                        double tTotDrawerandSales = 0.00;
                        for (int mn = dt_griddiaplay1.Rows.Count - 1; mn > 1; mn--)
                        {
                            if (dt_griddiaplay1.Rows[mn][0].ToString().Trim() == "Drawer Start")
                            {
                                // tTotDrawerandSales += (dt_griddiaplay1.Rows[mn][1].ToString().Trim() == "") ? 0 : double.Parse(dt_griddiaplay1.Rows[mn][1].ToString().Trim());
                            }
                            if (dt_griddiaplay1.Rows[mn][0].ToString().Trim() != "" && dt_griddiaplay1.Rows[mn][0].ToString().Trim().Length > 11)
                            {
                                string tTemp = dt_griddiaplay1.Rows[mn][0].ToString().Trim().Substring(0, 12);
                                if (tTemp == "Reset Drawer")
                                {
                                    tTotDrawerandSales += (dt_griddiaplay1.Rows[mn][1].ToString().Trim() == "") ? 0 : double.Parse(dt_griddiaplay1.Rows[mn][1].ToString().Trim());
                                }
                            }
                            if (dt_griddiaplay1.Rows[mn][0].ToString().Trim() == "Counter Name")
                            {
                                break;
                            }
                        }
                        double tCounterSettleNew = 0.00;
                        for (int mnk = dt_griddiaplay1.Rows.Count - 1; mnk > 1; mnk--)
                        {

                            if (dt_griddiaplay1.Rows[mnk][0].ToString().Trim() == "Counter Closed")
                            {
                                tCounterSettleNew += (dt_griddiaplay1.Rows[mnk][1].ToString().Trim() == "") ? 0 : double.Parse(dt_griddiaplay1.Rows[mnk][1].ToString().Trim());
                            }
                            if (dt_griddiaplay1.Rows[mnk][0].ToString().Trim() == "Counter Name")
                            {
                                break;
                            }
                        }
                        dt_griddiaplay1.Rows.Add("Openning Drawer", string.Format("{0:0.00}", tBeginMain));
                        dt_griddiaplay1.Rows.Add("Reset Drawer Amt", string.Format("{0:0.00}", tTotDrawerandSales));
                        dt_griddiaplay1.Rows.Add("Cash Sales", lblCCashSalesTotal1);
                        dt_griddiaplay1.Rows.Add("Counter Closed Amt (-)", string.Format("{0:0.00}", tCounterSettleNew));
                        double tCounterStatus = (tCounterSettleNew - (double.Parse(tBeginMain) + tTotDrawerandSales + double.Parse(lblCCashSalesTotal1)));
                        dt_griddiaplay1.Rows.Add("Counter Status ", (tCounterStatus == 0) ? "Same" : (tCounterStatus > 0) ? "Over" : "Short");
                        dt_griddiaplay1.Rows.Add("Counter Status Amt", string.Format("{0:0.00}", (tCounterSettleNew - (double.Parse(tBeginMain) + tTotDrawerandSales + double.Parse(lblCCashSalesTotal1)))));

                        dt_griddiaplay1.Rows.Add("", "");
                        //dt_griddiaplay1.Rows.Add("Total Cash Sales", (lblCashSalesTotal.ToString() == "") ? 0.00 :(double.Parse(lblCashSalesTotal.ToString()) - tCashReturnValue));
                        dt_griddiaplay1.Rows.Add("Total Cash Sales", lblCCashSalesTotal1);
                        dt_griddiaplay1.Rows.Add("Total NETS Sales", lblCNETSSalesTotal1);
                        dt_griddiaplay1.Rows.Add("Total Credit Card Sales", lblCCreditCardSalesTotal1);

                        dt_griddiaplay1.Rows.Add("Total House AC Sales", lblCHouseACSalesTotal1);
                        dt_griddiaplay1.Rows.Add("Total Voucher Sales", "0.00");
                        dt_griddiaplay1.Rows.Add("Total Amount", string.Format("{0:0.00}", (double.Parse(lblCCashSalesTotal1) + double.Parse(lblCNETSSalesTotal1) + double.Parse(lblCCreditCardSalesTotal1) + double.Parse(lblCHouseACSalesTotal1))));
                        dt_griddiaplay1.Rows.Add("", "");

                        string tCmd = "";
                        if (cmbCounterName.Text == "All Counter")
                        {
                            tCmd = @"select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as Disc,convert(numeric(18,2), (Disc1.OthDisc-Disc2.ROthDisc)) as OthDisc,convert(numeric(18,2), (Disc1.SDisc-Disc2.RSDisc)) as SDisc,convert(numeric(18,2), (Disc1.TotDisc-Disc2.RTotDisc)) as DiscountAmt from 
(Select (case when SUM(disc_Amt) is null then 0 else SUM(disc_Amt) end) as Disc,(case when SUM(Othdisc_Amt) is null then 0 else SUM(Othdisc_Amt) end) as OthDisc,(case when SUM(spl_discamt) is null then 0 else SUM(spl_discamt) end) as SDisc, (case when SUM(Disc_Amt+Othdisc_Amt+spl_discamt) is null then 0 else SUM(Disc_Amt+Othdisc_Amt+spl_discamt) end) as TotDisc  from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date =@tFromDate) as Disc1,
(Select (case when SUM(disc_Amt) is null then 0 else SUM(disc_Amt) end) as RDisc,(case when SUM(Othdisc_Amt) is null then 0 else SUM(Othdisc_Amt) end) as ROthDisc,(case when SUM(spl_discamt) is null then 0 else SUM(spl_discamt) end) as RSDisc,(case when SUM(Disc_Amt+Othdisc_Amt+spl_discamt) is null then 0 else SUM(Disc_Amt+Othdisc_Amt+spl_discamt) end) as RTotDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date= @tFromDate) as Disc2";
                        }
                        else
                        {
                            tCmd = @"select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as Disc,convert(numeric(18,2), (Disc1.OthDisc-Disc2.ROthDisc)) as OthDisc,convert(numeric(18,2), (Disc1.SDisc-Disc2.RSDisc)) as SDisc,convert(numeric(18,2), (Disc1.TotDisc-Disc2.RTotDisc)) as DiscountAmt from 
(Select (case when SUM(disc_Amt) is null then 0 else SUM(disc_Amt) end) as Disc,(case when SUM(Othdisc_Amt) is null then 0 else SUM(Othdisc_Amt) end) as OthDisc,(case when SUM(spl_discamt) is null then 0 else SUM(spl_discamt) end) as SDisc, (case when SUM(Disc_Amt+Othdisc_Amt+spl_discamt) is null then 0 else SUM(Disc_Amt+Othdisc_Amt+spl_discamt) end) as TotDisc  from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date =@tFromDate and ctr_no=(Select ctr_no from Counter_table where ctr_Name=@tCounter)) as Disc1,
(Select (case when SUM(disc_Amt) is null then 0 else SUM(disc_Amt) end) as RDisc,(case when SUM(Othdisc_Amt) is null then 0 else SUM(Othdisc_Amt) end) as ROthDisc,(case when SUM(spl_discamt) is null then 0 else SUM(spl_discamt) end) as RSDisc,(case when SUM(Disc_Amt+Othdisc_Amt+spl_discamt) is null then 0 else SUM(Disc_Amt+Othdisc_Amt+spl_discamt) end) as RTotDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date= @tFromDate and ctr_no=(Select ctr_no from Counter_table where ctr_Name=@tCounter)) as Disc2";
                        }

                        DataTable dtDiscountAmt = new DataTable();
                        dtDiscountAmt.Rows.Clear();
                        SqlCommand cmdDiscount = new SqlCommand(tCmd, con);
                        cmdDiscount.Parameters.AddWithValue("@tFromDate", dpBillDate.SelectedDate.Value);
                        cmdDiscount.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                        SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                        adpDiscount.Fill(dtDiscountAmt);
                        double tDiscountAmt = 0.00;
                        if (dtDiscountAmt.Rows.Count > 0)
                        {
                            tDiscountAmt = (string.IsNullOrEmpty(Convert.ToString(dtDiscountAmt.Rows[0]["DiscountAmt"])) == true) ? 0 : Convert.ToDouble(Convert.ToString(dtDiscountAmt.Rows[0]["DiscountAmt"]));
                            dt_griddiaplay1.Rows.Add("Discount Amount", string.Format("{0:0.00}", tDiscountAmt));
                        }

                    }
                    else
                    {
                        // if (dtReset.Rows.Count != 0)
                        {
                            dt_griddiaplay1.Rows.Add("Sales", String.Format("{0:0.00}", (double.Parse(lblCashInDrawer.ToString()) - double.Parse(lblStartAmt.ToString()))));
                            dt_griddiaplay1.Rows.Add("Total", "");
                            //  dt_griddiaplay1.Rows.Add("Drawer Status", "");
                            dt_griddiaplay1.Rows.Add("", "");
                        }
                    }

                    double tSales = 0.0, tPrev = 0.0;

                    for (int i = 0; i < dt_griddiaplay1.Rows.Count; i++)
                    {
                        if (dt_griddiaplay1.Rows[i][0].ToString().Trim() == "Sales")
                        {
                            tSales = 0.0;
                            tPrev = 0.0;
                            if (dt_griddiaplay1.Rows[i - 1][1].ToString() != "")
                            {
                                tPrev = double.Parse(dt_griddiaplay1.Rows[i - 1][1].ToString());
                            }
                            if (dt_griddiaplay1.Rows[i][1].ToString() != "")
                            {
                                tSales = double.Parse(dt_griddiaplay1.Rows[i][1].ToString());
                            }
                            dt_griddiaplay1.Rows[i + 1][1] = string.Format("{0:0.00}", (tPrev + tSales));
                            //  dt_griddiaplay1.Rows[i + 2][1] = string.Format("{0:0.00}", (tPrev ==(tPrev+tSales)) ? "Same" : ((tPrev < (tPrev+tSales))?"Over":"Short"));
                            // break;
                        }
                    }
                }
                else
                {
                    if (dtReset.Rows.Count == 0)
                    {
                        dt_griddiaplay1.Rows.Add("Sales", String.Format("{0:0.00}", (double.Parse(lblCashInDrawer.ToString()) - double.Parse(lblStartAmt.ToString()))));
                        // dt_griddiaplay1.Rows.Add("Total", "");
                        dt_griddiaplay1.Rows.Add("Total", String.Format("{0:0.00}", (double.Parse(lblCashInDrawer.ToString()) - double.Parse(lblStartAmt.ToString()))));
                        dt_griddiaplay1.Rows.Add("Drawer Status", "Same");
                        dt_griddiaplay1.Rows.Add("", "");
                    }
                }

                DataTable dtPaymentAmt = new DataTable();
                dtPaymentAmt.Rows.Clear();
                SqlCommand cmdPayment = new SqlCommand(@"Create Table #TempTable1 (PaymentLedger_No varchar(400),Ledger_groupno1 varchar(400),Payment_Amt Numeric(18,2)) 
INSERT INTO #TempTable1 (PaymentLedger_No,Ledger_groupno1,Payment_Amt) (Select PaymentLedger_No as PaymentLedger_No,Ledger_groupno1 as Ledger_groupno1,(case when Ledger_groupno1=32 then  SUM(Payment_Amt) else -(SUM(Payment_Amt)) EnD) as Payment_Amt  from PaymentDetail_table where EndOfDay=@tDate and Ctr_no=@tCounterNo group by PaymentLedger_No,Ledger_GroupNo1)
Select 'Payment '+Ledger_table.Ledger_name as PaymentMode,SUM(Payment_Amt) as Amount from #TempTable1, Ledger_table where #TempTable1.PaymentLedger_No=Ledger_table.Ledger_no group by Ledger_table.Ledger_name
DROP TABLE #TempTable1", con);
                cmdPayment.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdPayment.Parameters.AddWithValue("@tCounterNo", tCounterNoNew);
                SqlDataAdapter adpPayment = new SqlDataAdapter(cmdPayment);
                adpPayment.Fill(dtPaymentAmt);
                for (int mn = 0; mn < dtPaymentAmt.Rows.Count; mn++)
                {

                    dt_griddiaplay1.Rows.Add(dtPaymentAmt.Rows[mn]["PaymentMode"].ToString(), dtPaymentAmt.Rows[mn]["Amount"].ToString());
                }

                DataTable dtPaymentIn = new DataTable();
                dtPaymentIn.Rows.Clear();
                SqlCommand cmdPaymentIn = new SqlCommand("Select Ledger_name as PaymentMode, sum(Payment_Amt) as Amount from PaymentDetail_table,Ledger_table where PaymentDetail_table.PaymentLedger_No=Ledger_table.Ledger_no and Ledger_groupNo1=32 and Ctr_no=@tCounterNo and EndOfDay=@tDate group by Ledger_name", con);
                cmdPaymentIn.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdPaymentIn.Parameters.AddWithValue("@tCounterNo", tCounterNoNew);
                SqlDataAdapter adpPaymentIn = new SqlDataAdapter(cmdPaymentIn);
                adpPaymentIn.Fill(dtPaymentIn);
                for (int mn = 0; mn < dtPaymentIn.Rows.Count; mn++)
                {
                    if (mn == 0)
                    {
                        dt_griddiaplay1.Rows.Add("", "");
                        dt_griddiaplay1.Rows.Add("Payment-In", "");
                    }
                    dt_griddiaplay1.Rows.Add(dtPaymentIn.Rows[mn]["PaymentMode"].ToString(), dtPaymentIn.Rows[mn]["Amount"].ToString());
                }

                dtPaymentIn.Rows.Clear();
                cmdPaymentIn = new SqlCommand("Select Ledger_name as PaymentMode, sum(Payment_Amt) as Amount from PaymentDetail_table,Ledger_table where PaymentDetail_table.PaymentLedger_No=Ledger_table.Ledger_no and Ledger_groupNo1=31 and Ctr_no=@tCounterNo and EndOfDay=@tDate group by Ledger_name", con);
                cmdPaymentIn.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdPaymentIn.Parameters.AddWithValue("@tCounterNo", tCounterNoNew);
                adpPaymentIn = new SqlDataAdapter(cmdPaymentIn);
                adpPaymentIn.Fill(dtPaymentIn);
                for (int mn = 0; mn < dtPaymentIn.Rows.Count; mn++)
                {
                    if (mn == 0)
                    {
                        dt_griddiaplay1.Rows.Add("", "");
                        dt_griddiaplay1.Rows.Add("Payment-Out", "");
                    }
                    dt_griddiaplay1.Rows.Add(dtPaymentIn.Rows[mn]["PaymentMode"].ToString(), dtPaymentIn.Rows[mn]["Amount"].ToString());
                }

                dtPaymentIn.Rows.Clear();
                cmdPaymentIn = new SqlCommand(@"Select a.Ledger_name as PaymentMode,SUM(Amt) as Amount from (Select Ledger_name, sum(Payment_Amt) as Amt from PaymentDetail_table,Ledger_table where PaymentDetail_table.PaymentLedger_No=Ledger_table.Ledger_no and Ledger_groupNo1=25 and Ctr_no=@tCounterNo and EndOfDay=@tDate group by Ledger_name
Union 
Select Ledger_name, sum(Payment_Amt) as Amt from PaymentDetail_table,Ledger_table where PaymentDetail_table.PaymentLedger_No=Ledger_table.Ledger_no and Ledger_GroupNo1=26 and Ctr_no=@tCounterNo and EndOfDay=@tDate group by Ledger_name)
as a group by a.Ledger_name", con);
                cmdPaymentIn.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdPaymentIn.Parameters.AddWithValue("@tCounterNo", tCounterNoNew);
                adpPaymentIn = new SqlDataAdapter(cmdPaymentIn);
                adpPaymentIn.Fill(dtPaymentIn);
                for (int mn = 0; mn < dtPaymentIn.Rows.Count; mn++)
                {
                    if (mn == 0)
                    {
                        dt_griddiaplay1.Rows.Add("", "");
                        dt_griddiaplay1.Rows.Add("Expense", "");
                    }
                    dt_griddiaplay1.Rows.Add(dtPaymentIn.Rows[mn]["PaymentMode"].ToString(), dtPaymentIn.Rows[mn]["Amount"].ToString());
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void btnEndOfDayReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                tReportTitle = "END-OF-DAY DRAWER REPORT";
                dt_griddiaplay1.Rows.Clear();
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                //SqlCommand cmd = new SqlCommand("Select distinct(User_no) as Userno from BeginCashDrawer_table where Date=(SELECT CONVERT(date,DATEADD(day,1,MAX(endofday))) from EndOfDay_Table) ", con);
                string tCmd = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmd = "Select distinct(User_no) as Userno from BeginCashDrawer_table where Date=@tDate ";
                }
                else
                {
                    tCmd = "Select distinct(User_no) as Userno from BeginCashDrawer_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Date=@tDate ";
                }
                SqlCommand cmd = new SqlCommand(tCmd, con);
                cmd.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtNew);
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    funCounterReport(dtNew.Rows[mn]["Userno"].ToString());
                }
                gridItemsManager.DataSource = dt_griddiaplay1;
                gridItemsManager.Columns[0].Width = 290;
                gridItemsManager.Columns[1].Width = 90;
                funDrawerPrint();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        public void funDrawerPrint()
        {
            try
            {
                mainStr = "";
                funPrintHeaderPart();
                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                charPerLine = _Class.clsVariables.tempGCharactersPerLine;// dtPrint.Rows[i]["Property"].ToString();
                topLine1 = tReportTitle;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }



                //}

                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}
                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}


                //Print Line Below Header
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                //receipt No 
                // double location = 0.00;
                // dt_griddiaplay1.Rows.Clear();
                //for (int i5 = 0; i5 < dtPrint.Rows.Count - 1; i5++)
                //{
                //    if (dtPrint.Rows[i5]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i5]["Property"].ToString();
                //    }

                // double location = 0.00;
                string tempStr = null;
                //if (dtPrint.Rows[i5]["Describ"].ToString() == "Print Qunatity and Rate")
                //{
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 11));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += "     Amount";
                mainStr += tQtyHeading;
                mainStr += "\n";
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //    }
                //}
                for (int mn = 0; mn < dt_griddiaplay1.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;
                    //for (int z = 0; z < 4; z++)
                    //{
                    //    if (dtItemProfit.Rows[mn][z].ToString().Trim() == "")
                    //    {
                    //        isChk = true;
                    //        break;
                    //    }
                    //}
                    if (isChk == false)
                    {
                        for (int i = 0; i <= 1; i++)
                        {
                            tempStr = dt_griddiaplay1.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 11);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 11; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 12)
                                {
                                    mainStr += tempStr.PadLeft(11, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 4)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }
                //      }
                //  }
                // lblPrint.Content = mainStr;
                //Print Line Below Header
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        string tReportTitle = "";
        private void btnVoidReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                tReportTitle = "VOID ITEM REPORT";
                dt_griddiaplay1.Rows.Clear();
                string tSmasId = "";
                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();
                //SqlCommand cmdVoid = new SqlCommand("select * from salmas_table where smas_cancel=1 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable))", con);
                string tCmdVoid = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmdVoid = "select Smas_no,Smas_billno,Smas_NetAmount from salmas_table where smas_cancel=1 and Smas_billdate=@tDate";
                }
                else
                {
                    tCmdVoid = "select Smas_no,Smas_billno,Smas_NetAmount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_cancel=1 and Smas_billdate=@tDate";
                }
                SqlCommand cmdVoid = new SqlCommand(tCmdVoid, con);
                cmdVoid.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);
                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    tSmasId = dtVoid.Rows[i]["Smas_no"].ToString();
                    dt_griddiaplay1.Rows.Add("Void BillNo:" + dtVoid.Rows[i]["Smas_billno"].ToString(), dtVoid.Rows[i]["Smas_NetAmount"].ToString());

                    DataTable dtVoidDet = new DataTable();
                    dtVoidDet.Rows.Clear();
                    //SqlCommand cmdVoidDet = new SqlCommand("select item_table.item_name,stktrn_table.nt_qty from stktrn_table,item_table where stktrn_table.item_no=item_table.Item_no and strn_Cancel=1 and stktrn_table.strn_no=@tStrnNo and strn_date=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table  where Id=(Select MAX(EndOfDayId) from NumberTable))", con);
                    // cmdVoidDet.Parameters.AddWithValue("@tStrnNo", tSmasId);
                    SqlCommand cmdVoidDet = new SqlCommand("select item_table.item_name,stktrn_table.nt_qty from stktrn_table,item_table where stktrn_table.item_no=item_table.Item_no and strn_Cancel=1 and stktrn_table.strn_no=@tStrnNo and strn_date=@tDate", con);
                    cmdVoidDet.Parameters.AddWithValue("@tStrnNo", tSmasId);
                    cmdVoidDet.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    SqlDataAdapter adpVoidDet = new SqlDataAdapter(cmdVoidDet);
                    adpVoidDet.Fill(dtVoidDet);
                    for (int mn = 0; mn < dtVoidDet.Rows.Count; mn++)
                    {
                        dt_griddiaplay1.Rows.Add(dtVoidDet.Rows[mn]["item_name"].ToString(), dtVoidDet.Rows[mn]["nt_qty"].ToString());
                    }
                    dt_griddiaplay1.Rows.Add("", "");
                }
                gridItemsManager.DataSource = dt_griddiaplay1;
                gridItemsManager.Columns[0].Width = 290;
                gridItemsManager.Columns[1].Width = 90;
                funDrawerPrint();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void btnReturnReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                tReportTitle = "RETURN ITEM REPORT";
                dt_griddiaplay1.Rows.Clear();
                string tSmasId = "";
                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();
                // SqlCommand cmdVoid = new SqlCommand("select smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno", con);
                string tCmdVoid = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmdVoid = "select smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno";
                }
                else
                {
                    tCmdVoid = "select smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno";
                }
                SqlCommand cmdVoid = new SqlCommand(tCmdVoid, con);
                cmdVoid.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);

                DataTable dtBillNoNew = new DataTable();
                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    tSmasId = dtVoid.Rows[i]["smas_rtno"].ToString();

                    dtBillNoNew.Rows.Clear();
                    SqlCommand cmdBillNo = new SqlCommand("Select smas_billno from salmas_table where smas_no=@tReturnRowId", con);
                    cmdBillNo.Parameters.AddWithValue("@tReturnRowId", tSmasId);
                    SqlDataAdapter adpBillNo = new SqlDataAdapter(cmdBillNo);
                    adpBillNo.Fill(dtBillNoNew);
                    string tBillNoNew = "";
                    if (dtBillNoNew.Rows.Count > 0)
                    {
                        tBillNoNew = dtBillNoNew.Rows[0]["smas_billno"].ToString();
                    }
                    dt_griddiaplay1.Rows.Add("Return BillNo:" + tBillNoNew, dtVoid.Rows[i]["Amount"].ToString());

                    DataTable dtChk = new DataTable();
                    dtChk.Rows.Clear();
                    // SqlCommand cmdChk = new SqlCommand("select smas_no from salmas_table where smas_rtno=@tSmasId and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table  where Id=(Select MAX(EndOfDayId) from NumberTable))", con);
                    //cmdChk.Parameters.AddWithValue("@tSmasId", tSmasId);

                    SqlCommand cmdChk = new SqlCommand("select smas_no from salmas_table where smas_rtno=@tSmasId and Smas_billdate=@tDate", con);
                    cmdChk.Parameters.AddWithValue("@tSmasId", tSmasId);
                    cmdChk.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    SqlDataAdapter adpChk = new SqlDataAdapter(cmdChk);
                    adpChk.Fill(dtChk);
                    for (int ij = 0; ij < dtChk.Rows.Count; ij++)
                    {
                        DataTable dtVoidDet = new DataTable();
                        dtVoidDet.Rows.Clear();
                        //SqlCommand cmdVoidDet = new SqlCommand("select item_table.item_name,stktrn_table.nt_qty from stktrn_table,item_table where stktrn_table.item_no=item_table.Item_no and stktrn_table.strn_no=@tStrnNo and strn_date=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table  where Id=(Select MAX(EndOfDayId) from NumberTable))", con);
                        //cmdVoidDet.Parameters.AddWithValue("@tStrnNo", dtChk.Rows[ij]["smas_no"].ToString());

                        SqlCommand cmdVoidDet = new SqlCommand("select item_table.item_name,stktrn_table.nt_qty from stktrn_table,item_table where stktrn_table.item_no=item_table.Item_no and stktrn_table.strn_no=@tStrnNo and strn_date=@tDate", con);
                        cmdVoidDet.Parameters.AddWithValue("@tStrnNo", dtChk.Rows[ij]["smas_no"].ToString());
                        cmdVoidDet.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                        SqlDataAdapter adpVoidDet = new SqlDataAdapter(cmdVoidDet);
                        adpVoidDet.Fill(dtVoidDet);
                        for (int mn = 0; mn < dtVoidDet.Rows.Count; mn++)
                        {
                            dt_griddiaplay1.Rows.Add(dtVoidDet.Rows[mn]["item_name"].ToString(), dtVoidDet.Rows[mn]["nt_qty"].ToString());
                        }
                    }
                    dt_griddiaplay1.Rows.Add("", "");

                }
                gridItemsManager.DataSource = dt_griddiaplay1;
                gridItemsManager.Columns[0].Width = 290;
                gridItemsManager.Columns[1].Width = 90;

                funDrawerPrint();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnGroupReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                //lblItemGroupName.Content = "Group Name";
                gridItemsManager.DataSource = null;
                listDisplay.Items.Clear();
                groupReport();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void groupReport()
        {
            try
            {
                mainStr = "";
                SqlCommand cmd1 = new SqlCommand("sp_GroupNameOnly", con);
                cmd1.CommandType = CommandType.StoredProcedure;
                //cmd1.Parameters.AddWithValue("@tFromDate", currentDate);
                //cmd1.Parameters.AddWithValue("@tToDate", currentDate);
                cmd1.Parameters.AddWithValue("@tFromDate", dpBillDate.SelectedDate.Value);
                cmd1.Parameters.AddWithValue("@tToDate", dpBillDate.SelectedDate.Value);
                SqlDataAdapter adp1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                dt1.Rows.Clear();
                adp1.Fill(dt1);



                //  SqlCommand cmd_selectgroup = new SqlCommand("Select Item_Grouptable.Item_groupname as GroupName,SUM(stktrn_table.nt_qty)  as Qty,CONVERT(numeric(18,2),avg((stktrn_table.nt_qty*stktrn_table.Rate))/avg(stktrn_table.nt_qty)) as Rate,convert(Numeric(18,2),(SUM(stktrn_table.nt_qty) * (avg((stktrn_table.nt_qty*stktrn_table.Rate))/avg(stktrn_table.nt_qty)))) as Amount from stktrn_table,Item_table,Item_Grouptable  Where Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and Stktrn_table.strn_cancel<>1 and stktrn_table.strn_type='1' and stktrn_table.strn_date between (SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table  where Id=(Select MAX(EndOfDayId) from NumberTable)) and (SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table  where Id=(Select MAX(EndOfDayId) from NumberTable))  group by Item_Grouptable.Item_groupname", con);

                string tCmd_SelectGroup = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmd_SelectGroup = "Select Item_Grouptable.Item_groupname as GroupName,SUM(stktrn_table.nt_qty- stktrn_table.rnt_qty)  as Qty,CONVERT(numeric(18,2),avg(((stktrn_table.nt_qty- stktrn_table.rnt_qty)*stktrn_table.Rate))/avg(stktrn_table.nt_qty- stktrn_table.rnt_qty)) as Rate,convert(Numeric(18,2),(SUM((Amount/nt_Qty)*(stktrn_table.nt_qty-rnt_Qty)))) as Amount from stktrn_table,Item_table,Item_Grouptable  Where Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and stktrn_table.strn_type='1' and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_Cancel=0  and stktrn_table.strn_rtno=0 and stktrn_table.strn_date  between @FromDate and @tEnd  group by Item_Grouptable.Item_groupname";
                }
                else
                {
                    tCmd_SelectGroup = "Select Item_Grouptable.Item_groupname as GroupName,SUM(stktrn_table.nt_qty- stktrn_table.rnt_qty)  as Qty,CONVERT(numeric(18,2),avg(((stktrn_table.nt_qty- stktrn_table.rnt_qty)*stktrn_table.Rate))/avg(stktrn_table.nt_qty- stktrn_table.rnt_qty)) as Rate,convert(Numeric(18,2),(SUM((Amount/nt_Qty)*(stktrn_table.nt_qty-rnt_Qty)))) as Amount from stktrn_table,Item_table,Item_Grouptable  Where stktrn_table.ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and stktrn_table.strn_type='1' and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_Cancel=0  and stktrn_table.strn_rtno=0 and stktrn_table.strn_date  between @FromDate and @tEnd  group by Item_Grouptable.Item_groupname";
                }
                SqlCommand cmd_selectgroup = new SqlCommand(tCmd_SelectGroup, con);
                //cmd_selectgroup.Parameters.AddWithValue("@FromDate", currentDate);
                //cmd_selectgroup.Parameters.AddWithValue("@tEnd", currentDate);
                cmd_selectgroup.Parameters.AddWithValue("@FromDate", dpBillDate.SelectedDate.Value);
                cmd_selectgroup.Parameters.AddWithValue("@tEnd", dpBillDate.SelectedDate.Value);
                cmd_selectgroup.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);

                SqlDataAdapter apd_selectgruop = new SqlDataAdapter(cmd_selectgroup);
                DataTable dt_selegroup = new DataTable();
                if (dtGroupReport.Columns.Count > 0)
                {
                    dtGroupReport.Columns.Clear();
                    dtGroupReport.Columns.Add("GroupName", typeof(string));
                    dtGroupReport.Columns.Add("Qty", typeof(string));
                    dtGroupReport.Columns.Add("Rate", typeof(string));
                    dtGroupReport.Columns.Add("Amount", typeof(string));
                }
                dtGroupReport.Rows.Clear();
                apd_selectgruop.Fill(dtGroupReport);


                double tTotQty = 0, tTotProfit = 0;
                for (int i = 0; i < dtGroupReport.Rows.Count; i++)
                {
                    if (dtGroupReport.Rows[i]["Qty"].ToString().Trim() != "")
                    {
                        tTotQty += (dtGroupReport.Rows[i]["Qty"].ToString() == "") ? 0.00 : double.Parse(dtGroupReport.Rows[i]["Qty"].ToString());

                    }
                    if (dtGroupReport.Rows[i]["Amount"].ToString().Trim() != "")
                    {
                        tTotProfit += (dtGroupReport.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtGroupReport.Rows[i]["Amount"].ToString());
                    }
                }
                dtGroupReport.Rows.Add("", "", "", "");

                dtGroupReport.Rows.Add("Total", tTotQty, "", string.Format("{0:0.00}", tTotProfit));
                //  gridItems.DataSource = dtgropProfit.DefaultView;  


                string tCmd = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table where  smas_Cancel<>1 and smas_billdate=@tDate )";
                }
                else
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_Cancel<>1 and smas_billdate=@tDate )";
                }
                DataTable dtDiscountAmt = new DataTable();
                dtDiscountAmt.Rows.Clear();
                SqlCommand cmdDiscount = new SqlCommand(tCmd, con);
                cmdDiscount.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                adpDiscount.Fill(dtDiscountAmt);
                //double tDiscountAmt = 0.00;
                //if (dtDiscountAmt.Rows.Count > 0)
                //{
                //    tDiscountAmt = (string.IsNullOrEmpty(Convert.ToString(dtDiscountAmt.Rows[0]["DiscountAmt"])) == true) ? 0 : Convert.ToDouble(Convert.ToString(dtDiscountAmt.Rows[0]["DiscountAmt"]));
                //    dtGroupReport.Rows.Add("Discount Amount(-)", "", "", string.Format("{0:0.00}", tDiscountAmt));
                //    dtGroupReport.Rows.Add("Total Amount", "", "", string.Format("{0:0.00}", tTotProfit - tDiscountAmt));
                //}

                gridItemsManager.DataSource = dtGroupReport.DefaultView;
                gridItemsManager.Columns[0].Width = 210;
                gridItemsManager.Columns[1].Width = 60;
                gridItemsManager.Columns[2].Width = 60;
                gridItemsManager.Columns[3].Width = 60;
                this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                this.gridItemsManager.Columns[3].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

                //for (int i1 = 0; i1 < dtPrint.Rows.Count - 1; i1++)
                //{
                //    if (dtPrint.Rows[i1]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i1]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i1]["Describ"].ToString() == "Print Line Below Logo")
                //    {
                //        lineBelowLogo = dtPrint.Rows[i1]["Property"].ToString();
                //        if (lineBelowLogo == "No Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += " ";
                //            }
                //            mainStr += "\n";
                //        }
                //        if (lineBelowLogo == "Single Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += "-";
                //            }
                //            mainStr += "\n";
                //        }
                //        else if (lineBelowLogo == "Double Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += "=";
                //            }
                //            mainStr += "\n";
                //        }
                //        break;
                //    }
                //}

                ////top design start
                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                //    }

                //    // Top Line1
                //    //  topLine1="";
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 1")
                //    {
                //        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                //        {
                //            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                //            {
                //                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line1")
                //                {
                //                    topLine1 = dtPrint.Rows[k]["Property"].ToString();
                //                    if (topLine1.Length <= double.Parse(charPerLine))
                //                    {
                //                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                //                        if (findCenterPosition % 2 == 0)
                //                        {
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine1;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine1;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        mainStr += "\n";
                //                    }
                //                    break;
                //                }

                //            }
                //        }
                //    }

                //    // Top Line2
                //    // topLine1="";
                //    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 2")
                //    {
                //        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                //        {
                //            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                //            {
                //                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line2")
                //                {
                //                    topLine2 = dtPrint.Rows[k]["Property"].ToString();
                //                    if (topLine2.Length <= double.Parse(charPerLine))
                //                    {
                //                        findCenterPosition = (double.Parse(charPerLine) - topLine2.Length);
                //                        if (findCenterPosition % 2 == 0)
                //                        {
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine2;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine2;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        mainStr += "\n";
                //                    }
                //                    break;
                //                }
                //            }
                //        }
                //    }

                //    // Top Line3
                //    // topLine1 = "";
                //    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 3")
                //    {
                //        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                //        {
                //            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                //            {
                //                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line3")
                //                {
                //                    topLine3 = dtPrint.Rows[k]["Property"].ToString();
                //                    if (topLine3.Length <= double.Parse(charPerLine))
                //                    {
                //                        findCenterPosition = (double.Parse(charPerLine) - topLine3.Length);
                //                        if (findCenterPosition % 2 == 0)
                //                        {
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine3;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine3;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        mainStr += "\n";
                //                    }
                //                    break;
                //                }
                //            }
                //        }
                //    }


                //    // Top Line4
                //    //topLine1 = "";
                //    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 4")
                //    {
                //        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                //        {
                //            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                //            {
                //                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line4")
                //                {
                //                    topLine4 = dtPrint.Rows[k]["Property"].ToString();
                //                    if (topLine4.Length <= double.Parse(charPerLine))
                //                    {
                //                        findCenterPosition = (double.Parse(charPerLine) - topLine4.Length);
                //                        if (findCenterPosition % 2 == 0)
                //                        {
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine4;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine4;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        mainStr += "\n";
                //                    }
                //                    break;
                //                }
                //            }
                //        }
                //    }

                //   // Top Line5
                //    // topLine1 = "";
                //    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 5")
                //    {
                //        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                //        {
                //            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                //            {
                //                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line5")
                //                {
                //                    topLine5 = dtPrint.Rows[k]["Property"].ToString();
                //                    if (topLine5.Length <= double.Parse(charPerLine))
                //                    {
                //                        findCenterPosition = (double.Parse(charPerLine) - topLine5.Length);
                //                        if (findCenterPosition % 2 == 0)
                //                        {
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine5;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                            mainStr += topLine5;
                //                            for (int j = 0; j < (findCenterPosition / 2); j++)
                //                            {
                //                                mainStr += " ";
                //                            }
                //                        }
                //                        mainStr += "\n";
                //                    }
                //                    break;
                //                }
                //            }
                //        }
                //    }
                //}
                ////header design start
                //for (int i2 = 0; i2 < dtPrint.Rows.Count - 1; i2++)
                //{
                //    if (dtPrint.Rows[i2]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i2]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i2]["Describ"].ToString() == "Print Line Below Header")
                //    {
                //        lineBelowLogo = dtPrint.Rows[i2]["Property"].ToString();
                //        if (lineBelowLogo == "No Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += " ";
                //            }
                //            mainStr += "\n";
                //        }
                //        if (lineBelowLogo == "Single Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += "-";
                //            }
                //            mainStr += "\n";
                //        }
                //        else if (lineBelowLogo == "Double Line")
                //        {
                //            for (int j = 0; j < double.Parse(charPerLine); j++)
                //            {
                //                mainStr += "=";
                //            }
                //            mainStr += "\n";
                //        }
                //        break;
                //    }
                //}
                funPrintHeaderPart();

                charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                topLine1 = "GROUP SALES REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}

                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}

                //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                //{
                //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}


                //Print Line Below Header
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                //dtPrint.Rows[i4]["Property"].ToString();
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                // ds.Tables.Clear();
                // double location = 0.00;
                string tempStr = null;
                //for (int i1 = 0; i1 < dtPrint.Rows.Count - 1; i1++)
                //{
                //    if (dtPrint.Rows[i1]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i1]["Property"].ToString();
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 22));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += "  Qty  ";
                tQtyHeading += "U/Rate ";
                tQtyHeading += " Amount";
                mainStr += tQtyHeading;
                mainStr += "\n";
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                //dtPrint.Rows[i4]["Property"].ToString();
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}

                for (int mn = 0; mn < dtGroupReport.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;
                    if (isChk == false)
                    {
                        for (int i = 0; i < 4; i++)
                        {
                            tempStr = dtGroupReport.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 22);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 18; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadRight(7, ' ');
                                }
                            }
                            if (i == 2)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 3)
                            {
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                //    }
                //}
                // lblPrint.Content = mainStr;
                //Print Line Below Header
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                //dtPrint.Rows[i4]["Property"].ToString();
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                // listDisplay.Items.Add(mainStr);

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }
        DataTable dtCreditcard1 = new DataTable();
        private void btnCreditCardRpt_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (con.State != ConnectionState.Open)
                {
                    con.Open();
                }
                //SqlCommand cmd1 = new SqlCommand("SP_SelectQuery", con);               
                //cmd1.CommandType = CommandType.StoredProcedure;
                //cmd1.Parameters.AddWithValue("@ActionType", "CreditCardSe");
                //cmd1.Parameters.AddWithValue("@ItemName", "");
                //cmd1.Parameters.AddWithValue("@ItemCode", "");
                SqlCommand cmd1 = new SqlCommand("select SalRecv_Amt as [Rec Amt] from SalRecv_table,Ledger_table where SalRecv_Led= Ledger_no and Ledger_groupno=5 and Ledger_no<>14", con);
                SqlDataAdapter aadp = new SqlDataAdapter(cmd1);
                dtCreditcard1.Rows.Clear();
                dt_griddiaplay1.Rows.Clear();
                aadp.Fill(dtCreditcard1);
                double totamount = 0.00;
                dtGroupReport.Rows.Clear();
                if (dtCreditcard1.Rows.Count > 0)
                {
                    //gridItems.DataSource = dtCreditcard1.DefaultView;
                    for (int i = 0; i < dtCreditcard1.Rows.Count; i++)
                    {
                        totamount += Convert.ToDouble(dtCreditcard1.Rows[i]["Rec Amt"].ToString());
                    }
                    dtCreditcard1.Rows.Add("", "", "", "");
                    dtCreditcard1.Rows.Add("", "", "", "");
                    dtCreditcard1.Rows.Add("Total", "", "", totamount.ToString("0.00"));

                    gridItemsManager.DataSource = dtCreditcard1.DefaultView;
                }
                else
                {
                    if (dtCreditcard1.Rows.Count <= 0)
                    {
                        dtCreditcard1.Rows.Add("Total", "", "", totamount.ToString("0.00"));
                        gridItemsManager.DataSource = dtCreditcard1.DefaultView;
                    }
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        string savefilename;
        public void savedialog()
        {
            try
            {
                System.Windows.Forms.SaveFileDialog savefiledialog = new System.Windows.Forms.SaveFileDialog();
                savefiledialog.InitialDirectory = Convert.ToString(Environment.SpecialFolder.MyDocuments);
                savefiledialog.DefaultExt = "Pdf";
                savefiledialog.Filter = "Your extension here (*.pdf)|*.pdf";
                savefiledialog.FilterIndex = 1;
                savefiledialog.RestoreDirectory = true;
                savefiledialog.FileName = "";
                savefiledialog.ShowDialog();
                savefilename = savefiledialog.FileName;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        private void btnItemPDFExport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                gridItemsManager.DataSource = null;
                gridItemsManager.ColumnHeadersVisible = true;
                tPrintingType = "PDF";
                SqlCommand cmd = new SqlCommand("Select Item_table.Item_code as ItemCode,Item_table.Item_name as ItemName,Item_table.Item_cost as Cost,Item_table.Item_mrsp as Rate,Item_table.nt_cloqty as Stock from Item_table", con);
                //cmd.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
                //cmd.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                dt.Rows.Clear();
                adp.Fill(dt);
                dtPDF.Rows.Clear();
                for (int mn = 0; mn < dt.Rows.Count; mn++)
                {
                    dtPDF.Rows.Add(dt.Rows[mn]["ItemCode"].ToString(), dt.Rows[mn]["ItemName"].ToString(), "0", dt.Rows[mn]["Cost"].ToString(), dt.Rows[mn]["Rate"].ToString(), dt.Rows[mn]["Stock"].ToString());
                }

                SqlCommand cmd1 = new SqlCommand("Select Item_table.Item_name as ItemName,sum(stktrn_table.nt_qty-stktrn_table.rnt_Qty) as SalesQty from Item_table,stktrn_table where stktrn_table.strn_cancel<>1 and stktrn_table.strn_type=1 and Item_table.Item_no=stktrn_table.item_no and stktrn_table.strn_date between @tFromDate and @tToDate group by item_table.Item_name", con);
                cmd1.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
                cmd1.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
                SqlDataAdapter adp1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                dt1.Rows.Clear();
                adp1.Fill(dt1);
                for (int mn = 0; mn < dt1.Rows.Count; mn++)
                {
                    for (int mnk = 0; mnk < dtPDF.Rows.Count; mnk++)
                    {
                        if (dt1.Rows[mn]["ItemName"].ToString().Trim() == dtPDF.Rows[mnk]["ItemName"].ToString().Trim())
                        {
                            dtPDF.Rows[mnk]["SalesQty"] = dt1.Rows[mn][1].ToString();
                        }
                    }
                }
                gridItemsManager.DataSource = dtPDF.DefaultView;
                gridItemsManager.Columns["ItemCode"].Width = 100;
                gridItemsManager.Columns["ItemName"].Width = 100;
                gridItemsManager.Columns["Stock"].Width = 75;
                gridItemsManager.Columns["SalesQty"].Width = 75;
                gridItemsManager.Columns["Cost"].Width = 75;
                gridItemsManager.Columns["Rate"].Width = 75;
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }

        }

        private void btnItemExcelExport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                gridItemsManager.DataSource = null;
                gridItemsManager.ColumnHeadersVisible = true;
                tPrintingType = "EXCEL";
                SqlCommand cmd = new SqlCommand("Select Item_table.Item_code as ItemCode,Item_table.Item_name as ItemName,Item_table.Item_cost as Cost,Item_table.Item_mrsp as Rate,Item_table.nt_cloqty as Stock from Item_table", con);
                //cmd.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
                //cmd.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                dt.Rows.Clear();
                adp.Fill(dt);
                dtPDF.Rows.Clear();
                for (int mn = 0; mn < dt.Rows.Count; mn++)
                {
                    dtPDF.Rows.Add(dt.Rows[mn]["ItemCode"].ToString(), dt.Rows[mn]["ItemName"].ToString(), "0", dt.Rows[mn]["Cost"].ToString(), dt.Rows[mn]["Rate"].ToString(), dt.Rows[mn]["Stock"].ToString());
                }

                SqlCommand cmd1 = new SqlCommand("Select Item_table.Item_name as ItemName,sum(stktrn_table.nt_qty-stktrn_table.rnt_Qty) as SalesQty from Item_table,stktrn_table where stktrn_table.strn_cancel<>1 and stktrn_table.strn_type=1 and Item_table.Item_no=stktrn_table.item_no and stktrn_table.strn_date between @tFromDate and @tToDate group by item_table.Item_name", con);
                cmd1.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
                cmd1.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
                SqlDataAdapter adp1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                dt1.Rows.Clear();
                adp1.Fill(dt1);
                for (int mn = 0; mn < dt1.Rows.Count; mn++)
                {
                    for (int mnk = 0; mnk < dtPDF.Rows.Count; mnk++)
                    {
                        if (dt1.Rows[mn]["ItemName"].ToString().Trim() == dtPDF.Rows[mnk]["ItemName"].ToString().Trim())
                        {
                            dtPDF.Rows[mnk]["SalesQty"] = dt1.Rows[mn][1].ToString();
                        }
                    }
                }
                gridItemsManager.DataSource = dtPDF.DefaultView;
                gridItemsManager.Columns["ItemCode"].Width = 100;
                gridItemsManager.Columns["ItemName"].Width = 100;
                gridItemsManager.Columns["Stock"].Width = 75;
                gridItemsManager.Columns["SalesQty"].Width = 75;
                gridItemsManager.Columns["Cost"].Width = 75;
                gridItemsManager.Columns["Rate"].Width = 75;
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }

        }

        private void btnIndividualReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_Class.clsVariables.tViewReport == true)
                {
                    tPrintingType = "";
                    lblTitle.Content = "INDIVIDUAL REPORTS";
                    gridItemsManager.DataSource = null;
                    dt_selecttable.Rows.Clear();
                    dt_griddiaplay.Rows.Clear();

                    pnlCommon.Visibility = Visibility.Visible;
                    pnlCounterBtn.Visibility = Visibility.Hidden;
                    pnlPaymentReport.Visibility = Visibility.Hidden;

                    pnlCounterBtn.Visibility = Visibility.Hidden;
                    pnlCommon.Visibility = Visibility.Visible;
                    pnlCashDrawer.Visibility = Visibility.Collapsed;
                    pnlReport.Visibility = Visibility.Collapsed;
                    pnlEndOfDay.Visibility = Visibility.Collapsed;
                    pnlProfitReport.Visibility = Visibility.Collapsed;
                    pnlIndividualReport.Visibility = Visibility.Visible;
                    Uccommission.Visibility = Visibility.Hidden;
                    //   dpFrom.SelectedDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
                    // dpFrom.SelectedDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
                }
                else
                {
                    MyMessageBox.ShowBox("You are not having permission to view this report", "Warning");
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnCreditCardView_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";

                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                dtCash.Rows.Clear();
                gridItemsManager.ColumnHeadersVisible = true;

                tIndividualReportType = "Credit Card";

                // funConnectionStateCheck();
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                //SqlCommand cmd = new SqlCommand("select Ledger_name as Card_Name from Ledger_table where  Ledger_groupno=5 and Ledger_no<>14 order by Ledger_name ASC", con);
                SqlCommand cmd = new SqlCommand("select distinct(Ledger_name) as Card_Name from Ledger_table,SalRecv_table, salmas_table where SalRecv_table.SalRecv_Salno= salmas_table.smas_billno and Ledger_table.Ledger_no=SalRecv_table.SalRecv_Led and Ledger_groupno=5 and Ledger_no<>14 and smas_billdate between @tFrom and @tTo order by Ledger_name ASC", con);
                cmd.Parameters.AddWithValue("@tFrom", dtpFrom.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tTo", dtpTo.SelectedDate.Value);
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                string tLoadLetter = "";
                pnlCreditCardList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    tLoadLetter = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 25;

                    //TextBlock textBlock = new TextBlock();
                    //textBlock.Inlines.Add(dtNew.Rows[mn]["Card_Name"].ToString());
                    //txtCardName = "";
                    //txtCardName = dtNew.Rows[mn]["Card_Name"].ToString();
                    //textBlock.Inlines.Add(new LineBreak());
                    //textBlock.FontSize = 40;
                    ////newBtn.Content = textBlock;
                    //  newBtn.Content = txtCardName;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    //newBtn.Content = dr["DiscountName"].ToString();
                    newBtn.Name = "HACL" + i;
                    //newBtn.Name ="Discount"+i+dr["DiscountName"].ToString();
                    newBtn.Width = 400;
                    newBtn.Height = 65;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    // newBtn.Style = this.Resources["btnGroup"] as Style;
                    //Every Button Name Calles As newBtnGroup_Click
                    newBtn.Click += new RoutedEventHandler(newBtnGroupChar_Click);
                    //newBtn.Style = "btnnoborder";
                    //newBtn.Template = this.FindResource("btnnoborder") as ControlTemplate;
                    pnlCreditCardList.Children.Add(newBtn);
                    pnlCreditCardList.Height = (i * 65) + 50;
                    funCardDetailLoad(dtNew.Rows[mn]["Card_Name"].ToString());
                }
                funIndividualReportPrint();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        string tIndividualReportType = "";
        private void btnHouseACView_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";

                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                dtCash.Rows.Clear();
                gridItemsManager.ColumnHeadersVisible = true;
                gtot = 0.00;

                tIndividualReportType = "House Account";
                // funConnectionStateCheck();
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                //SqlCommand cmd = new SqlCommand("select Ledger_name as Card_Name from Ledger_table where  Ledger_groupno=32 and Ledger_no<>2 order by Ledger_name ASC", con);
                SqlCommand cmd = new SqlCommand("select distinct(Ledger_name) as Card_Name from Ledger_table,SalRecv_table, salmas_table where SalRecv_table.SalRecv_Salno= salmas_table.smas_billno and Ledger_table.Ledger_no=SalRecv_table.SalRecv_Led and Ledger_groupno=32 and Ledger_no<>2 and smas_billdate between @tFrom and @tTo order by Ledger_name ASC", con);
                cmd.Parameters.AddWithValue("@tFrom", dtpFrom.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tTo", dtpTo.SelectedDate.Value);
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                string tLoadLetter = "";
                pnlCreditCardList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    tLoadLetter = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 25;

                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    //newBtn.Content = dr["DiscountName"].ToString();
                    newBtn.Name = "HACL" + i;
                    //newBtn.Name ="Discount"+i+dr["DiscountName"].ToString();
                    newBtn.Width = 400;
                    newBtn.Height = 65;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    // newBtn.Style = this.Resources["btnGroup"] as Style;
                    //Every Button Name Calles As newBtnGroup_Click
                    newBtn.Click += new RoutedEventHandler(newBtnGroupChar_Click);
                    //newBtn.Style = "btnnoborder";
                    //newBtn.Template = this.FindResource("btnnoborder") as ControlTemplate;
                    pnlCreditCardList.Children.Add(newBtn);
                    pnlCreditCardList.Height = (i * 65) + 50;
                    funCardDetailLoad(dtNew.Rows[mn]["Card_Name"].ToString());

                }
                dtCash.Rows.Add("Grand Total ", "", string.Format("{0:0.00}", gtot));
                funIndividualReportPrint();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }

        }
        public void funCardDetailLoad(string clickedButton)
        {
            try
            {
                //   funlLoadList(clickedButton.Content.ToString());

                if (tIndividualReportType == "House Account Payment")
                {
                    string pno = "";
                    DataTable dtCash1 = new DataTable();
                    dtCash1.Rows.Clear();
                    SqlCommand cmd = new SqlCommand("select (Select Ledger_table.Ledger_name from Ledger_table where Ledger_no=PaymentDetail_table.PaymentLedger_No) as Mode,CONVERT(varchar,DATEPART(DAY,PaymentDetail_table.EndOfDay))+'/'+CONVERT(varchar,DATEPART(MONTH,PaymentDetail_table.EndOfDay))+'/'+CONVERT(varchar,DATEPART(YEAR,PaymentDetail_table.EndOfDay)) as Date,PaymentDetail_table.Payment_Amt as Amount from Ledger_table,PaymentDetail_table where Ledger_table.Ledger_no=PaymentDetail_table.Ledger_no and PaymentDetail_table.Ledger_no=(Select Ledger_no from Ledger_table where Ledger_name=@tPartyName) and PaymentDetail_table.EndOfDay between @tDate and @tToDate", con);
                    cmd.Parameters.AddWithValue("@tDate", dtpFrom.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tToDate", dtpTo.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tPartyName", clickedButton.ToString().Trim());
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtCash1);

                    SqlCommand comd = new SqlCommand("Select Ledger_no from Ledger_table where Ledger_name=@tPartyName", con);
                    comd.Parameters.AddWithValue("@tPartyName", clickedButton.ToString().Trim());
                    SqlDataReader reader = comd.ExecuteReader();
                    if (reader.Read())
                    {
                        pno = reader[0].ToString();
                    }
                    reader.Close();

                    dtHACPayment.Rows.Add(clickedButton.ToString(), "", "Cus.No:" + pno);
                    double tTotal = 0.00;
                    for (int ijk = 0; ijk < dtCash1.Rows.Count; ijk++)
                    {
                        dtHACPayment.Rows.Add(dtCash1.Rows[ijk]["Mode"].ToString(), dtCash1.Rows[ijk]["Date"].ToString(), dtCash1.Rows[ijk]["Amount"].ToString());
                        tTotal += (dtCash1.Rows[ijk]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCash1.Rows[ijk]["Amount"].ToString());
                    }
                    //double tTotal = 0.00;
                    //for (int i = 0; i < dtCash.Rows.Count; i++)
                    //{
                    //    tTotal += (dtCash.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCash.Rows[i]["Amount"].ToString());
                    //}
                    gtot = gtot + tTotal;
                    dtHACPayment.Rows.Add("Total ", "", string.Format("{0:0.00}", tTotal));
                    dtHACPayment.Rows.Add("", "", "");

                    gridItemsManager.DataSource = dtHACPayment.DefaultView;
                    gridItemsManager.Columns[0].Width = 150;
                    gridItemsManager.Columns[1].Width = 120;
                    gridItemsManager.Columns[2].Width = 120;
                    this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

                }

                if (tIndividualReportType == "House Account Detail")
                {

                    DataTable dtVoid = new DataTable();
                    dtVoid.Rows.Clear();

                    SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where Smas_Cancel<>1 and smas_rtno<>0 and party_no=(Select Ledger_no from Ledger_table where Ledger_name=@tPartyName) and Smas_billdate between @tDate and @tToDate group by smas_rtno, party_no", con);
                    cmdVoid.Parameters.AddWithValue("@tDate", dpFrom.SelectedDate.Value);
                    cmdVoid.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
                    cmdVoid.Parameters.AddWithValue("@tPartyName", clickedButton.ToString().Trim());

                    SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                    adpVoid.Fill(dtVoid);
                    double tHouseACReturnValue = 0.00;
                    for (int i = 0; i < dtVoid.Rows.Count; i++)
                    {
                        tHouseACReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                    DataTable dtCash2 = new DataTable();
                    dtCash2.Rows.Clear();
                    // For Heading Purpose
                    // dtCash.Rows.Add("Ledger Name ", "Sales Amount  ", " Paid Amount ");

                    // SqlCommand cmd = new SqlCommand("select convert(numeric(18,2),sum(Payment_Amt)) as PaidAmount  from PaymentDetail_table where Ledger_no=(select ledger_no from Ledger_table where Ledger_name=@tPartyName)", con);
                    //SqlCommand cmd = new SqlCommand("select @tPartyName as Name, (select convert(numeric(18,2),isnull(sum(Payment_Amt),0))   from PaymentDetail_table where Ledger_no =(select ledger_no from Ledger_table where Ledger_name=@tPartyName) and EndOfDay between @tDate and @tToDate) as paidamount,(select convert(numeric(18,2),sum(smas_NetAmount))   from salmas_table where party_no  =(select ledger_no from Ledger_table where Ledger_name=@tPartyName) and smas_billdate between @tDate and @tToDate) as saleamount, ((select convert(numeric(18,2),sum(smas_NetAmount))   from salmas_table where party_no  =(select ledger_no from Ledger_table where Ledger_name=@tPartyName)) -(select convert(numeric(18,2),isnull(sum(Payment_Amt),0))   from PaymentDetail_table where Ledger_no =(select ledger_no from Ledger_table where Ledger_name=@tPartyName) and EndOfDay between @tDate and @tToDate)) as balamount", con);
                    //SqlCommand cmd = new SqlCommand("select @tPartyName as Name, (select convert(numeric(18,2),isnull(sum(smas_NetAmount),0))   from salmas_table where party_no  =(select ledger_no from Ledger_table where Ledger_name=@tPartyName) and smas_billdate between @tDate and @tToDate) AS saleamount,(select convert(numeric(18,2),isnull(sum(Payment_Amt),0)) from PaymentDetail_table where Ledger_no =(select ledger_no from Ledger_table where Ledger_name=@tPartyName) and EndOfDay between @tDate and @tToDate) AS paidamount,(select convert(numeric(18,2),isnull(sum(smas_NetAmount),0)) from salmas_table where party_no =(select ledger_no from Ledger_table where Ledger_name=@tPartyName) and smas_billdate between @tDate and @tToDate) - (select convert(numeric(18,2),isnull(sum(Payment_Amt),0)) from PaymentDetail_table where Ledger_no =(select ledger_no from Ledger_table where Ledger_name=@tPartyName) and EndOfDay between @tDate and @tToDate) AS balamount", con);
                    SqlCommand cmd = new SqlCommand("select (select Ledger_Code from ledger_table where Ledger_name=@tPartyName) as Code, (select convert(numeric(18,2),isnull(sum(smas_NetAmount),0))   from salmas_table where party_no  =(select ledger_no from Ledger_table where Ledger_name=@tPartyName) and smas_billdate between @tDate and @tToDate) AS saleamount,(select convert(numeric(18,2),isnull(sum(Payment_Amt),0)) from PaymentDetail_table where Ledger_no =(select ledger_no from Ledger_table where Ledger_name=@tPartyName) and EndOfDay between @tDate and @tToDate) AS paidamount,((select abs(convert(numeric(18,2),isnull(sum(ledger_open),0))) from ledger_table where  Ledger_name=@tPartyName)+(select convert(numeric(18,2),isnull(sum(smas_NetAmount),0)) from salmas_table where party_no =(select ledger_no from Ledger_table where Ledger_name=@tPartyName))) - (select convert(numeric(18,2),isnull(sum(Payment_Amt),0)) from PaymentDetail_table where Ledger_no =(select ledger_no from Ledger_table where Ledger_name=@tPartyName)) AS balamount", con);
                    cmd.Parameters.AddWithValue("@tDate", dpFrom.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tPartyName", clickedButton.ToString().Trim());
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtCash2);


                    //dtCash.Rows.Add(clickedButton.ToString()+" Sales Amount", "", "");

                    for (int ijk = 0; ijk < dtCash2.Rows.Count; ijk++)
                    {
                        //dtCash.Rows.Add(dtCash1.Rows[ijk]["Payment_Amt"].ToString(), dtCash1.Rows[ijk]["Sales Amount"].ToString(), dtCash1.Rows[ijk]["Paied Amount"].ToString(), dtCash1.Rows[ijk]["Balance Amount"].ToString());
                        // dtPDF.Rows.Add(dt.Rows[mn]["ItemCode"].ToString(), dt.Rows[mn]["ItemName"].ToString(), "0", dt.Rows[mn]["Cost"].ToString(), dt.Rows[mn]["Rate"].ToString(), dt.Rows[mn]["Stock"].ToString());
                        //dtCash.Rows.Add(dtCash2.Rows[ijk]["PaidAmount"].ToString());

                        dtPayment.Rows.Add(dtCash2.Rows[ijk]["Code"].ToString(), dtCash2.Rows[ijk]["saleamount"].ToString(), dtCash2.Rows[ijk]["paidamount"].ToString(), dtCash2.Rows[ijk]["balamount"].ToString());
                        tTotal1 += (dtCash2.Rows[ijk]["balamount"].ToString() == "") ? 0.00 : double.Parse(dtCash2.Rows[ijk]["balamount"].ToString());
                        tTotal2 += (dtCash2.Rows[ijk]["saleamount"].ToString() == "") ? 0.00 : double.Parse(dtCash2.Rows[ijk]["saleamount"].ToString());
                        tTotal3 += (dtCash2.Rows[ijk]["paidamount"].ToString() == "") ? 0.00 : double.Parse(dtCash2.Rows[ijk]["paidamount"].ToString());
                    }
                    //double tTotal = 0.00;
                    //for (int i = 0; i < dtCash.Rows.Count; i++)
                    //{
                    //    tTotal += (dtCash.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCash.Rows[i]["Amount"].ToString());
                    //}



                    if (tHouseACReturnValue > 0)
                    {
                        //  dtCash.Rows.Add("", "", "");
                        dtPayment.Rows.Add("Return Item Amount(-)", "", string.Format("{0:0.00}", tHouseACReturnValue));
                        dtPayment.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal1 - tHouseACReturnValue)));
                    }
                    gridItemsManager.DataSource = dtPayment.DefaultView;
                    gridItemsManager.Columns[0].Width = 100;
                    gridItemsManager.Columns[1].Width = 90;
                    gridItemsManager.Columns[2].Width = 90;
                    gridItemsManager.Columns[3].Width = 90;

                    this.gridItemsManager.Columns[1].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                    this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                    this.gridItemsManager.Columns[3].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

                }


                if (tIndividualReportType == "House Account")
                {

                    string pno = "";

                    //Return Item Values
                    DataTable dtVoid = new DataTable();
                    dtVoid.Rows.Clear();
                    //SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=@tCounter and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno, party_no", con);
                    //cmdVoid.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);

                    SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where Smas_Cancel<>1 and smas_rtno<>0 and party_no=(Select Ledger_no from Ledger_table where Ledger_name=@tPartyName) and Smas_billdate between @tDate and @tToDate group by smas_rtno, party_no", con);
                    cmdVoid.Parameters.AddWithValue("@tDate", dtpFrom.SelectedDate.Value);
                    cmdVoid.Parameters.AddWithValue("@tToDate", dtpTo.SelectedDate.Value);
                    cmdVoid.Parameters.AddWithValue("@tPartyName", clickedButton.ToString().Trim());

                    SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                    adpVoid.Fill(dtVoid);
                    double tHouseACReturnValue = 0.00;
                    for (int i = 0; i < dtVoid.Rows.Count; i++)
                    {
                        tHouseACReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }



                    //parthi Coding--
                    // SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),smas_NetAmount) as Amount from salmas_table where smas_rtno=0 and smas_name='Cash Sales' and smas_billdate=(SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table where Id=(select EndOfDayId from NumberTable))", con);
                    //Anbu Change Coding:
                    // SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where smas_rtno=0  and smas_Cancel<>1 and smas_billdate=(SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt", con);
                    DataTable dtCash1 = new DataTable();
                    dtCash1.Rows.Clear();
                    SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,CONVERT(VARCHAR(10),CONVERT(date,smas_billdate,108),111) as Date,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where smas_rtno=0  and smas_Cancel<>1 and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=(Select Ledger_no from Ledger_table where Ledger_name=@tPartyName) and smas_billdate between @tDate and @tToDate group by salmas_table.smas_billno,salmas_table.smas_billdate ,SalRecv_Amt", con);
                    cmd.Parameters.AddWithValue("@tDate", dtpFrom.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tToDate", dtpTo.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tPartyName", clickedButton.ToString().Trim());
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtCash1);

                    SqlCommand comd = new SqlCommand("Select Ledger_no from Ledger_table where Ledger_name=@tPartyName", con);
                    comd.Parameters.AddWithValue("@tPartyName", clickedButton.ToString().Trim());
                    SqlDataReader reader = comd.ExecuteReader();
                    if (reader.Read())
                    {
                        pno = reader[0].ToString();
                    }
                    reader.Close();

                    dtCash.Rows.Add(clickedButton.ToString(), "", "Cus.No:" + pno);
                    double tTotal = 0.00;
                    for (int ijk = 0; ijk < dtCash1.Rows.Count; ijk++)
                    {
                        dtCash.Rows.Add(dtCash1.Rows[ijk]["BillNo"].ToString(), dtCash1.Rows[ijk]["Date"].ToString(), dtCash1.Rows[ijk]["Amount"].ToString());
                        tTotal += (dtCash1.Rows[ijk]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCash1.Rows[ijk]["Amount"].ToString());
                    }
                    //double tTotal = 0.00;
                    //for (int i = 0; i < dtCash.Rows.Count; i++)
                    //{
                    //    tTotal += (dtCash.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCash.Rows[i]["Amount"].ToString());
                    //}
                    gtot = gtot + tTotal;
                    dtCash.Rows.Add("Total ", "", string.Format("{0:0.00}", tTotal));
                    dtCash.Rows.Add("", "", "");

                    if (tHouseACReturnValue > 0)
                    {
                        //  dtCash.Rows.Add("", "", "");
                        dtCash.Rows.Add("Return Item Amount(-)", "", string.Format("{0:0.00}", tHouseACReturnValue));
                        dtCash.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal - tHouseACReturnValue)));
                    }
                    gridItemsManager.DataSource = dtCash.DefaultView;
                    gridItemsManager.Columns[0].Width = 150;
                    gridItemsManager.Columns[1].Width = 120;
                    gridItemsManager.Columns[2].Width = 120;
                    this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                }


                if (tIndividualReportType == "Credit Card")
                {

                    //Return Item Values
                    DataTable dtVoid = new DataTable();
                    dtVoid.Rows.Clear();
                    //SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=@tCounter and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno, party_no", con);
                    //cmdVoid.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);

                    SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where Smas_Cancel<>1 and smas_rtno<>0 and party_no=(Select Ledger_no from Ledger_table where Ledger_name=@tPartyName) and Smas_billdate between @tDate and @tToDate group by smas_rtno, party_no", con);
                    cmdVoid.Parameters.AddWithValue("@tDate", dtpFrom.SelectedDate.Value);
                    cmdVoid.Parameters.AddWithValue("@tToDate", dtpTo.SelectedDate.Value);
                    cmdVoid.Parameters.AddWithValue("@tPartyName", clickedButton.ToString().Trim());

                    SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                    adpVoid.Fill(dtVoid);
                    double tHouseACReturnValue = 0.00;
                    for (int i = 0; i < dtVoid.Rows.Count; i++)
                    {
                        tHouseACReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }


                    DataTable dtCash1 = new DataTable();
                    dtCash1.Rows.Clear();
                    //parthi Coding--
                    // SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),smas_NetAmount) as Amount from salmas_table where smas_rtno=0 and smas_name='Cash Sales' and smas_billdate=(SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table where Id=(select EndOfDayId from NumberTable))", con);
                    //Anbu Change Coding:
                    // SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where smas_rtno=0  and smas_Cancel<>1 and smas_billdate=(SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table where Id=(select EndOfDayId from NumberTable)) and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt", con);
                    SqlCommand cmd = new SqlCommand("select smas_billno as BillNo,CONVERT(VARCHAR(10),CONVERT(date,smas_billdate,108),111) as Date,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where smas_rtno=0  and smas_Cancel<>1  and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=(Select Ledger_no from Ledger_table where Ledger_name=@tPartyName) and smas_billdate between @tDate and @tToDate group by salmas_table.smas_billno,salmas_table.smas_billdate ,SalRecv_Amt", con);
                    cmd.Parameters.AddWithValue("@tDate", dtpFrom.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tToDate", dtpTo.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tPartyName", clickedButton.ToString().Trim());
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtCash1);


                    dtCash.Rows.Add(clickedButton.ToString(), "", "");
                    double tTotal = 0.00;
                    for (int ijk = 0; ijk < dtCash1.Rows.Count; ijk++)
                    {
                        dtCash.Rows.Add(dtCash1.Rows[ijk]["BillNo"].ToString(), dtCash1.Rows[ijk]["Date"].ToString(), dtCash1.Rows[ijk]["Amount"].ToString());
                        tTotal += (dtCash1.Rows[ijk]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCash1.Rows[ijk]["Amount"].ToString());
                    }
                    //double tTotal = 0.00;
                    //for (int i = 0; i < dtCash.Rows.Count; i++)
                    //{
                    //    tTotal += (dtCash.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCash.Rows[i]["Amount"].ToString());
                    //}                
                    dtCash.Rows.Add("Total ", "", string.Format("{0:0.00}", tTotal));
                    dtCash.Rows.Add("", "", "");

                    if (tHouseACReturnValue > 0)
                    {
                        //  dtCash.Rows.Add("", "", "");
                        dtCash.Rows.Add("Return Item Amount(-)", "", string.Format("{0:0.00}", tHouseACReturnValue));
                        dtCash.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal - tHouseACReturnValue)));
                    }
                    gridItemsManager.DataSource = dtCash.DefaultView;
                    gridItemsManager.Columns[0].Width = 150;
                    gridItemsManager.Columns[1].Width = 120;
                    gridItemsManager.Columns[2].Width = 120;
                    this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                    dtCash.Rows.Clear();
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void newBtnGroupChar_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                dtCash.Rows.Clear();
                dtHACPayment.Rows.Clear();
                gridItemsManager.ColumnHeadersVisible = true;

                //Getting Click Button Name values here:
                Button clickedButton = (Button)sender;
                funCardDetailLoad(clickedButton.Content.ToString());
                funIndividualReportPrint();

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }

        }
        public void funIndividualReportPrint()
        {
            try
            {
                //Getting Click Button Name values here:

                for (int i1 = 0; i1 < dtPrint.Rows.Count - 1; i1++)
                {
                    if (dtPrint.Rows[i1]["Describ"].ToString() == "Characters Per Line*")
                    {
                        charPerLine = dtPrint.Rows[i1]["Property"].ToString();
                    }

                    // print lint below logo
                    if (dtPrint.Rows[i1]["Describ"].ToString() == "Print Line Below Logo")
                    {
                        lineBelowLogo = dtPrint.Rows[i1]["Property"].ToString();
                        if (lineBelowLogo == "No Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += "\n";
                        }
                        if (lineBelowLogo == "Single Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "-";
                            }
                            mainStr += "\n";
                        }
                        else if (lineBelowLogo == "Double Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "=";
                            }
                            mainStr += "\n";
                        }
                        break;
                    }
                }

                //top design start
                for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                {
                    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    {
                        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                    }

                    // Top Line1
                    //  topLine1="";
                    if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 1")
                    {
                        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                        {
                            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                            {
                                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line1")
                                {
                                    topLine1 = dtPrint.Rows[k]["Property"].ToString();
                                    if (topLine1.Length <= double.Parse(charPerLine))
                                    {
                                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                                        if (findCenterPosition % 2 == 0)
                                        {
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += topLine1;
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                        }
                                        else
                                        {
                                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += topLine1;
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                        }
                                        mainStr += "\n";
                                    }
                                    break;
                                }
                            }
                        }
                    }

                    // Top Line2
                    // topLine1="";
                    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 2")
                    {
                        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                        {
                            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                            {
                                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line2")
                                {
                                    topLine2 = dtPrint.Rows[k]["Property"].ToString();
                                    if (topLine2.Length <= double.Parse(charPerLine))
                                    {
                                        findCenterPosition = (double.Parse(charPerLine) - topLine2.Length);
                                        if (findCenterPosition % 2 == 0)
                                        {
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += topLine2;
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                        }
                                        else
                                        {
                                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += topLine2;
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                        }
                                        mainStr += "\n";
                                    }
                                    break;
                                }
                            }
                        }
                    }

                    // Top Line3
                    // topLine1 = "";
                    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 3")
                    {
                        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                        {
                            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                            {
                                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line3")
                                {
                                    topLine3 = dtPrint.Rows[k]["Property"].ToString();
                                    if (topLine3.Length <= double.Parse(charPerLine))
                                    {
                                        findCenterPosition = (double.Parse(charPerLine) - topLine3.Length);
                                        if (findCenterPosition % 2 == 0)
                                        {
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += topLine3;
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                        }
                                        else
                                        {
                                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += topLine3;
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                        }
                                        mainStr += "\n";
                                    }
                                    break;
                                }
                            }
                        }
                    }


                    // Top Line4
                    //topLine1 = "";
                    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 4")
                    {
                        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                        {
                            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                            {
                                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line4")
                                {
                                    topLine4 = dtPrint.Rows[k]["Property"].ToString();
                                    if (topLine4.Length <= double.Parse(charPerLine))
                                    {
                                        findCenterPosition = (double.Parse(charPerLine) - topLine4.Length);
                                        if (findCenterPosition % 2 == 0)
                                        {
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += topLine4;
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                        }
                                        else
                                        {
                                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += topLine4;
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                        }
                                        mainStr += "\n";
                                    }
                                    break;
                                }
                            }
                        }
                    }

                   // Top Line5
                    // topLine1 = "";
                    else if (dtPrint.Rows[i]["Describ"].ToString() == "Print Top Line 5")
                    {
                        if (dtPrint.Rows[i]["Property"].ToString() == "Yes")
                        {
                            for (int k = 0; k < dtPrint.Rows.Count - 1; k++)
                            {
                                if (dtPrint.Rows[k]["Describ"].ToString() == "Top Line5")
                                {
                                    topLine5 = dtPrint.Rows[k]["Property"].ToString();
                                    if (topLine5.Length <= double.Parse(charPerLine))
                                    {
                                        findCenterPosition = (double.Parse(charPerLine) - topLine5.Length);
                                        if (findCenterPosition % 2 == 0)
                                        {
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += topLine5;
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                        }
                                        else
                                        {
                                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += topLine5;
                                            for (int j = 0; j < (findCenterPosition / 2); j++)
                                            {
                                                mainStr += " ";
                                            }
                                        }
                                        mainStr += "\n";
                                    }
                                    break;
                                }
                            }
                        }
                    }



                }
                //header design start
                for (int i2 = 0; i2 < dtPrint.Rows.Count - 1; i2++)
                {
                    if (dtPrint.Rows[i2]["Describ"].ToString() == "Characters Per Line*")
                    {
                        charPerLine = dtPrint.Rows[i2]["Property"].ToString();
                    }

                    // print lint below logo
                    if (dtPrint.Rows[i2]["Describ"].ToString() == "Print Line Below Header")
                    {
                        lineBelowLogo = dtPrint.Rows[i2]["Property"].ToString();
                        if (lineBelowLogo == "No Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += "\n";
                        }
                        if (lineBelowLogo == "Single Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "-";
                            }
                            mainStr += "\n";
                        }
                        else if (lineBelowLogo == "Double Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "=";
                            }
                            mainStr += "\n";
                        }
                        break;
                    }
                }
                for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                {
                    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    {
                        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                        if (tIndividualReportType != "House Account Payment")
                        {
                            topLine1 = tIndividualReportType.ToUpper() + " SALES REPORT";
                        }
                        else
                        {
                            topLine1 = tIndividualReportType.ToUpper() + " REPORT";
                        }
                        if (topLine1.Length <= double.Parse(charPerLine))
                        {
                            findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                            if (findCenterPosition % 2 == 0)
                            {
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            else
                            {
                                for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            mainStr += "\n";
                        }
                        break;
                    }



                }


                for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                {
                    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    {
                        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                        topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                        if (topLine1.Length <= double.Parse(charPerLine))
                        {
                            findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                            if (findCenterPosition % 2 == 0)
                            {
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            else
                            {
                                for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            mainStr += "\n";
                        }
                        break;
                    }

                }

                for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                {
                    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    {
                        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                        topLine1 = "Report Date : " + dtpFrom.SelectedDate.Value.Day + "/" + dtpFrom.SelectedDate.Value.Month + "/" + dtpFrom.SelectedDate.Value.Year + " - " + dtpTo.SelectedDate.Value.Day + "/" + dtpTo.SelectedDate.Value.Month + "/" + dtpTo.SelectedDate.Value.Year;
                        if (topLine1.Length <= double.Parse(charPerLine))
                        {
                            findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                            if (findCenterPosition % 2 == 0)
                            {
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            else
                            {
                                for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            mainStr += "\n";
                        }
                        break;
                    }
                }



                //Print Line Below Header
                for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                {
                    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    {
                        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    }

                    // print lint below logo
                    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    {
                        lineBelowLogo = dtPrint.Rows[i4]["Property"].ToString();
                        if (lineBelowLogo == "No Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += "\n";
                        }
                        if (lineBelowLogo == "Single Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "-";
                            }
                            mainStr += "\n";
                        }
                        else if (lineBelowLogo == "Double Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "=";
                            }
                            mainStr += "\n";
                        }
                        break;
                    }
                }

                //receipt No  double location = 0.00;
                for (int i5 = 0; i5 < dtPrint.Rows.Count - 1; i5++)
                {
                    if (dtPrint.Rows[i5]["Describ"].ToString() == "Characters Per Line*")
                    {
                        charPerLine = dtPrint.Rows[i5]["Property"].ToString();
                    }

                    //   double location = 0.00;
                    string tempStr = null;
                    if (dtPrint.Rows[i5]["Describ"].ToString() == "Print Qunatity and Rate")
                    {
                        string tQtyHeading = "";
                        if (tIndividualReportType != "House Account Payment")
                        {
                            tQtyHeading = "BillNo";
                            //  mainStr += tQtyHeading;
                            double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 18));
                            for (int j = 0; j < chkCount; j++)
                            {
                                tQtyHeading += " ";
                            }
                            tQtyHeading += " Time  ";
                            // tQtyHeading += "U/Rate ";
                            tQtyHeading += "   Amount";
                            mainStr += tQtyHeading;
                            mainStr += "\n";
                        }
                        else
                        {
                            tQtyHeading = "Mode";
                            //  mainStr += tQtyHeading;
                            double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 18));
                            for (int j = 0; j < chkCount; j++)
                            {
                                tQtyHeading += " ";
                            }
                            tQtyHeading += " Date  ";
                            // tQtyHeading += "U/Rate ";
                            tQtyHeading += "   Amount";
                            mainStr += tQtyHeading;
                            mainStr += "\n";
                        }
                        for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                        {
                            if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                            {
                                charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                            }

                            // print lint below logo
                            if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                            {
                                lineBelowLogo = dtPrint.Rows[i4]["Property"].ToString();
                                if (lineBelowLogo == "No Line")
                                {
                                    for (int j = 0; j < double.Parse(charPerLine); j++)
                                    {
                                        mainStr += " ";
                                    }
                                    mainStr += "\n";
                                }
                                if (lineBelowLogo == "Single Line")
                                {
                                    for (int j = 0; j < double.Parse(charPerLine); j++)
                                    {
                                        mainStr += "-";
                                    }
                                    mainStr += "\n";
                                }
                                else if (lineBelowLogo == "Double Line")
                                {
                                    for (int j = 0; j < double.Parse(charPerLine); j++)
                                    {
                                        mainStr += "=";
                                    }
                                    mainStr += "\n";
                                }
                                break;
                            }
                        }

                        if (tIndividualReportType != "House Account Payment")
                        {

                            for (int mn = 0; mn < dtCash.Rows.Count; mn++)
                            //foreach (DataRow row in dgsales.Rows)
                            {
                                // object[] array = dgsales.Rows[mn].;
                                bool isChk = false;
                                //for (int z = 0; z < 4; z++)
                                //{
                                //    if (dtItemProfit.Rows[mn][z].ToString().Trim() == "")
                                //    {
                                //        isChk = true;
                                //        break;
                                //    }
                                //}
                                if (isChk == false)
                                {
                                    for (int i = 0; i < 3; i++)
                                    {
                                        tempStr = dtCash.Rows[mn][i].ToString();
                                        //  MessageBox.Show(tempStr.Length.ToString());
                                        findCenterPosition = (double.Parse(charPerLine) - 20);
                                        if (i == 0)
                                        {
                                            if (tempStr.Length <= (int)findCenterPosition)
                                            {
                                                mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                            }
                                            else
                                            {
                                                string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                                //    MessageBox.Show(temp);
                                                int chkSpace = temp.LastIndexOf(" ");
                                                int loc = (temp.Length - temp.LastIndexOf(" "));
                                                //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                                if (chkSpace != -1)
                                                {
                                                    mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                                    //   MessageBox.Show(mainStr.ToString());
                                                    for (int j = 0; j < loc + 20; j++)
                                                    {
                                                        mainStr += " ";
                                                    }
                                                    mainStr += "\n";
                                                    string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                                    // mainStr += temp1;
                                                    if (temp1.Length <= (int)findCenterPosition)
                                                    {
                                                        mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                                    }
                                                }
                                                else
                                                {
                                                    mainStr += temp.ToString();
                                                }

                                            }
                                        }

                                        if (i == 1)
                                        {
                                            if (tempStr.Length < 11)
                                            {
                                                mainStr += tempStr.PadRight(10, ' ');
                                            }
                                        }
                                        if (i == 10)
                                        {
                                            // mainStr += tempStr.PadRight(7, ' ');
                                            if (tempStr.Length <= 7)
                                            {
                                                mainStr += tempStr.PadLeft(7, ' ');
                                            }
                                        }
                                        if (i == 2)
                                        {
                                            if (tempStr.Length <= 10)
                                            {
                                                mainStr += tempStr.PadLeft(10, ' ');
                                            }
                                        }
                                        // tPrintText += tempStr;
                                    }
                                    mainStr += "\n";
                                }
                            }
                        }
                        else
                        {

                            for (int mn = 0; mn < dtHACPayment.Rows.Count; mn++)
                            //foreach (DataRow row in dgsales.Rows)
                            {
                                // object[] array = dgsales.Rows[mn].;
                                bool isChk = false;
                                //for (int z = 0; z < 4; z++)
                                //{
                                //    if (dtItemProfit.Rows[mn][z].ToString().Trim() == "")
                                //    {
                                //        isChk = true;
                                //        break;
                                //    }
                                //}
                                if (isChk == false)
                                {
                                    for (int i = 0; i < 3; i++)
                                    {
                                        tempStr = dtHACPayment.Rows[mn][i].ToString();
                                        //  MessageBox.Show(tempStr.Length.ToString());
                                        findCenterPosition = (double.Parse(charPerLine) - 20);
                                        if (i == 0)
                                        {
                                            if (tempStr.Length <= (int)findCenterPosition)
                                            {
                                                mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                            }
                                            else
                                            {
                                                string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                                //    MessageBox.Show(temp);
                                                int chkSpace = temp.LastIndexOf(" ");
                                                int loc = (temp.Length - temp.LastIndexOf(" "));
                                                //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                                if (chkSpace != -1)
                                                {
                                                    mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                                    //   MessageBox.Show(mainStr.ToString());
                                                    for (int j = 0; j < loc + 20; j++)
                                                    {
                                                        mainStr += " ";
                                                    }
                                                    mainStr += "\n";
                                                    string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                                    // mainStr += temp1;
                                                    if (temp1.Length <= (int)findCenterPosition)
                                                    {
                                                        mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                                    }
                                                }
                                                else
                                                {
                                                    mainStr += temp.ToString();
                                                }

                                            }
                                        }

                                        if (i == 1)
                                        {
                                            if (tempStr.Length < 11)
                                            {
                                                mainStr += tempStr.PadRight(10, ' ');
                                            }
                                        }
                                        if (i == 10)
                                        {
                                            // mainStr += tempStr.PadRight(7, ' ');
                                            if (tempStr.Length <= 7)
                                            {
                                                mainStr += tempStr.PadLeft(7, ' ');
                                            }
                                        }
                                        if (i == 2)
                                        {
                                            if (tempStr.Length <= 10)
                                            {
                                                mainStr += tempStr.PadLeft(10, ' ');
                                            }
                                        }
                                        // tPrintText += tempStr;
                                    }
                                    mainStr += "\n";
                                }
                            }
                        }
                    }
                }



                // lblPrint.Content = mainStr;
                //Print Line Below Header
                for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                {
                    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    {
                        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    }

                    // print lint below logo
                    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    {
                        lineBelowLogo = dtPrint.Rows[i4]["Property"].ToString();
                        if (lineBelowLogo == "No Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += "\n";
                        }
                        if (lineBelowLogo == "Single Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "-";
                            }
                            mainStr += "\n";
                        }
                        else if (lineBelowLogo == "Double Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "=";
                            }
                            mainStr += "\n";
                        }
                        break;
                    }
                }
                //listDisplay.Items.Add(mainStr);

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void btnDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                svBtn.PageDown();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }

        }

        private void btnUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                svBtn.PageUp();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void txtCurrency_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            //if (!Char.IsDigit((char)KeyInterop.VirtualKeyFromKey(e.Key)) & e.Key != Key.Back | e.Key == Key.Space)
            //{
            //    e.Handled = true;
            //    MessageBox.Show("I only accept numbers, sorry. :(", "This textbox says...");
            //}

            ////////if (char.IsControl((char)e.Key) && char.IsDigit((char)e.Key) &&(char)e.Key == '.')
            ////////{
            ////////    e.Handled = true;
            ////////}
            ////////// allow one decimal point
            ////////if ((char)e.Key != '.' && (sender as TextBox).Text.IndexOf('.') > -1)
            ////////{
            ////////    e.Handled = true;
            ////////}

        }

        private void txtName_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            CheckIsNumeric(e);
        }

        private void CheckIsNumeric(TextCompositionEventArgs e)
        {
            int result;

            if (!(int.TryParse(e.Text, out result) || (e.Text == "." && e.Text.IndexOf('.') > -1)))
            {
                e.Handled = true;
            }
        }

        private void txtCurrency_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBox txt = (TextBox)sender;
            int curPOS = txt.SelectionStart;
            //  txt.Text = UppercaseWords(txt.Text);
            txt.Select(curPOS, 0);
        }

        private void btnPaymentReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_Class.clsVariables.HAPaymentReport == true)
                {
                    SqlCommand cmdTrigger = new SqlCommand("sp_LedgerTrigger", con);
                    cmdTrigger.CommandType = CommandType.StoredProcedure;
                    cmdTrigger.ExecuteNonQuery();

                    tPrintingType = "";
                    lblTitle.Content = "HOUSE ACCOUNT PAYMENT";
                    gridItemsManager.DataSource = null;
                    dt_selecttable.Rows.Clear();
                    dt_griddiaplay.Rows.Clear();
                    pnlCounterBtn.Visibility = Visibility.Hidden;
                    pnlCommon.Visibility = Visibility.Collapsed;
                    pnlCashDrawer.Visibility = Visibility.Collapsed;
                    pnlReport.Visibility = Visibility.Collapsed;
                    pnlEndOfDay.Visibility = Visibility.Collapsed;
                    pnlProfitReport.Visibility = Visibility.Collapsed;
                    pnlIndividualReport.Visibility = Visibility.Hidden;
                    pnlIndividualReport.Visibility = Visibility.Collapsed;
                    pnlCommon.Visibility = Visibility.Collapsed;
                    pnlCounterBtn.Visibility = Visibility.Collapsed;
                    pnlPaymentReport.Visibility = Visibility.Visible;
                    pnlSupplierPayment.Visibility = Visibility.Hidden;
                    pnlHouseACPayment.Visibility = Visibility.Visible;
                    Uccommission.Visibility = Visibility.Hidden;
                    txtHACName.Text = string.Empty;
                    txtHACCode.Text = string.Empty;
                    txtHACAccountLimit.Text = "0.00";
                    txtHACAvailableCredit.Text = "0.00";
                    txtHACBalanceDue.Text = "0.00";
                    txtHACPaymentAmt.Text = "";
                    funLoadCustomerDetails();
                    funPaymentAmtDetail(currentDate, _Class.clsVariables.tCounter);
                    btnPaymentIn_Click(sender, e);
                }
                else
                    MyMessageBox.ShowBox("Please, Get user rights to open Payment!", "Warning");
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        public void funPaymentAmtDetail(DateTime tdate, string tCounterNo)
        {
            try
            {
                SqlCommand cmdTrigger = new SqlCommand("sp_LedgerTrigger", con);
                cmdTrigger.CommandType = CommandType.StoredProcedure;
                cmdTrigger.ExecuteNonQuery();

                //If any changes you made here also change Payment Collection button 
                DataTable dtPaymentAmt = new DataTable();
                dtPaymentAmt.Rows.Clear();
                SqlCommand cmd = new SqlCommand(@"Create Table #TempTable1 (PaymentLedger_No varchar(400),Ledger_groupno1 varchar(400),Payment_Amt Numeric(18,2)) 
INSERT INTO #TempTable1 (PaymentLedger_No,Ledger_groupno1,Payment_Amt) (Select PaymentLedger_No as PaymentLedger_No,Ledger_groupno1 as Ledger_groupno1,(case when Ledger_groupno1=32 then  SUM(Payment_Amt) else -(SUM(Payment_Amt)) EnD) as Payment_Amt  from PaymentDetail_table where EndOfDay=@tDate and Ctr_no=@tCounterNo group by PaymentLedger_No,Ledger_GroupNo1)
Select 'Payment '+Ledger_table.Ledger_name as PaymentMode,SUM(Payment_Amt) as Amount from #TempTable1, Ledger_table where #TempTable1.PaymentLedger_No=Ledger_table.Ledger_no group by Ledger_table.Ledger_name
DROP TABLE #TempTable1", con);
                cmd.Parameters.AddWithValue("@tDate", tdate);
                cmd.Parameters.AddWithValue("@tCounterNo", tCounterNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtPaymentAmt);
                gridPayment.DataSource = dtPaymentAmt;

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        public void funLoadSupplierDetails()
        {
            // funConnectionStateCheck();
            DataTable dtNew = new DataTable();
            dtNew.Rows.Clear();
            SqlCommand cmd = new SqlCommand("select distinct(SUBSTRING(LTrim(UPPER(Ledger_name)),0,2)) as Card_Name from Ledger_table where Ledger_groupno=31 and Ledger_no<>8", con);
            dr = cmd.ExecuteReader();
            dtNew.Load(dr);
            int i = 0;
            string tLoadLetter = "";
            pnlPaymentListLetter.Children.Clear();
            pnlPaymentList.Children.Clear();
            for (int mn = 0; mn < dtNew.Rows.Count; mn++)
            {
                i += 1;
                Button newBtn = new Button();
                newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                tLoadLetter = dtNew.Rows[mn]["Card_Name"].ToString();
                newBtn.FontSize = 30;

                //TextBlock textBlock = new TextBlock();
                //textBlock.Inlines.Add(dtNew.Rows[mn]["Card_Name"].ToString());
                //txtCardName = "";
                //txtCardName = dtNew.Rows[mn]["Card_Name"].ToString();
                //textBlock.Inlines.Add(new LineBreak());
                //textBlock.FontSize = 40;
                ////newBtn.Content = textBlock;
                //  newBtn.Content = txtCardName;
                newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                newBtn.VerticalAlignment = VerticalAlignment.Center;
                //newBtn.Content = dr["DiscountName"].ToString();
                newBtn.Name = "HACL" + i;
                //newBtn.Name ="Discount"+i+dr["DiscountName"].ToString();
                newBtn.Width = 85;
                newBtn.Height = 68;
                newBtn.Margin = new Thickness(1, 1, 1, 1);
                // newBtn.Style = this.Resources["btnGroup"] as Style;
                //Every Button Name Calles As newBtnGroup_Click
                newBtn.Click += new RoutedEventHandler(newBtnSupplierListLetter_Click);
                //newBtn.Style = "btnnoborder";
                //newBtn.Template = this.FindResource("btnnoborder") as ControlTemplate;
                pnlPaymentListLetter.Children.Add(newBtn);
                pnlPaymentListLetter.Width = (i * 85) + 50;

            }
            if (tLoadLetter != "")
            {
                funSupplierLoadListAll();
            }
            // con.Close();
        }

        public void funLoadCustomerDetails()
        {
            //   funConnectionStateCheck();
            DataTable dtNew = new DataTable();
            dtNew.Rows.Clear();
            SqlCommand cmd = new SqlCommand("select distinct(SUBSTRING(LTrim(UPPER(Ledger_name)),0,2)) as Card_Name from Ledger_table where Ledger_groupno=32 and Ledger_no<>2", con);
            dr = cmd.ExecuteReader();
            dtNew.Load(dr);
            int i = 0;
            string tLoadLetter = "";
            pnlPaymentListLetter.Children.Clear();
            pnlPaymentList.Children.Clear();
            for (int mn = 0; mn < dtNew.Rows.Count; mn++)
            {
                i += 1;
                Button newBtn = new Button();
                newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                tLoadLetter = dtNew.Rows[mn]["Card_Name"].ToString();
                newBtn.FontSize = 30;

                //TextBlock textBlock = new TextBlock();
                //textBlock.Inlines.Add(dtNew.Rows[mn]["Card_Name"].ToString());
                //txtCardName = "";
                //txtCardName = dtNew.Rows[mn]["Card_Name"].ToString();
                //textBlock.Inlines.Add(new LineBreak());
                //textBlock.FontSize = 40;
                ////newBtn.Content = textBlock;
                //  newBtn.Content = txtCardName;
                newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                newBtn.VerticalAlignment = VerticalAlignment.Center;
                //newBtn.Content = dr["DiscountName"].ToString();
                newBtn.Name = "HACL" + i;
                //newBtn.Name ="Discount"+i+dr["DiscountName"].ToString();
                newBtn.Width = 85;
                newBtn.Height = 68;
                newBtn.Margin = new Thickness(1, 1, 1, 1);
                // newBtn.Style = this.Resources["btnGroup"] as Style;
                //Every Button Name Calles As newBtnGroup_Click
                newBtn.Click += new RoutedEventHandler(newBtnGroupCharLetter_Click);
                //newBtn.Style = "btnnoborder";
                //newBtn.Template = this.FindResource("btnnoborder") as ControlTemplate;
                pnlPaymentListLetter.Children.Add(newBtn);
                pnlPaymentListLetter.Width = (i * 85) + 50;

            }
            if (tLoadLetter != "")
            {
                funCustomerLoadListAll();
            }
            // con.Close();
        }


        private void newBtnSupplierListLetter_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //Getting Click Button Name values here:
                Button clickedButton = (Button)sender;
                funlSupplierLoadList(clickedButton.Content.ToString());
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void newBtnGroupCharLetter_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //Getting Click Button Name values here:
                Button clickedButton = (Button)sender;
                funlCustomerLoadList(clickedButton.Content.ToString());
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        public void funlSupplierLoadList(string tStartLetter)
        {
            try
            {
                // funConnectionStateCheck();
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select Ledger_name as Card_Name from Ledger_table where  Ledger_groupno=31 and Ledger_no<>8 and Ledger_name like @tStart order by Ledger_name ASC", con);
                cmd.Parameters.AddWithValue("@tStart", tStartLetter + "%");
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                pnlPaymentList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 16;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    newBtn.Name = "HouseAC" + i;
                    newBtn.Width = 260;
                    newBtn.Height = 60;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    newBtn.Click += new RoutedEventHandler(newBtnSupplierName_Click);
                    pnlPaymentList.Children.Add(newBtn);
                    pnlPaymentList.Height = (i * 60) + 50;
                }
                // con.Close();

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        public void funlCustomerLoadList(string tStartLetter)
        {
            try
            {

                //  funConnectionStateCheck();
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select Ledger_name as Card_Name from Ledger_table where  Ledger_groupno=32 and Ledger_no<>2 and Ledger_name like @tStart order by Ledger_name ASC", con);
                cmd.Parameters.AddWithValue("@tStart", tStartLetter + "%");
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                pnlPaymentList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 16;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    newBtn.Name = "HouseAC" + i;
                    newBtn.Width = 260;
                    newBtn.Height = 60;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    newBtn.Click += new RoutedEventHandler(newBtnHACCustomerName_Click);
                    pnlPaymentList.Children.Add(newBtn);
                    pnlPaymentList.Height = (i * 60) + 50;

                }
                // con.Close();

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }


        public void funCustomerLoadListAll()
        {
            try
            {

                //  funConnectionStateCheck();
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select Ledger_name as Card_Name from Ledger_table where  Ledger_groupno=32 and Ledger_no<>2 order by Ledger_name ASC", con);
                //  cmd.Parameters.AddWithValue("@tStart", tStartLetter + "%");
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;

                pnlPaymentList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 16;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    newBtn.Name = "HouseAC" + i;
                    newBtn.Width = 260;
                    newBtn.Height = 60;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    newBtn.Click += new RoutedEventHandler(newBtnHACCustomerName_Click);
                    pnlPaymentList.Children.Add(newBtn);
                    pnlPaymentList.Height = (i * 60) + 50;

                }
                //  con.Close();

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        public void funSupplierLoadListAll()
        {
            try
            {

                //   funConnectionStateCheck();
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select Ledger_name as Card_Name from Ledger_table where  Ledger_groupno=31 and Ledger_no<>8 order by Ledger_name ASC", con);
                //  cmd.Parameters.AddWithValue("@tStart", tStartLetter + "%");
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                pnlPaymentList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 16;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    newBtn.Name = "HouseAC" + i;
                    newBtn.Width = 260;
                    newBtn.Height = 60;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    newBtn.Click += new RoutedEventHandler(newBtnSupplierName_Click);
                    pnlPaymentList.Children.Add(newBtn);
                    pnlPaymentList.Height = (i * 60) + 50;

                }
                //  con.Close();

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        string tLedgerNo = "";
        double tHACAvailableCredit = 0.00;
        private void newBtnHACCustomerName_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //SqlCommand cmdTrigger = new SqlCommand("sp_LedgerTrigger", con);
                //cmdTrigger.CommandType = CommandType.StoredProcedure;
                //cmdTrigger.ExecuteNonQuery();

                tHACAvailableCredit = 0.00;
                Button clickedButton = (Button)sender;
                // _Class.clsVariables.funControlSetting();
                DataTable dtLedgerDetails = new DataTable();
                dtLedgerDetails.Rows.Clear();
                SqlCommand cmdLedgerDetails = new SqlCommand("Select * from Ledger_table where Ledger_name=@tLedgerName and Ledger_groupno=32", con);
                cmdLedgerDetails.Parameters.AddWithValue("@tLedgerName", clickedButton.Content.ToString());
                SqlDataAdapter adpLedgerDetails = new SqlDataAdapter(cmdLedgerDetails);
                adpLedgerDetails.Fill(dtLedgerDetails);

                if (dtLedgerDetails.Rows.Count > 0)
                {
                    tLedgerNo = dtLedgerDetails.Rows[0]["Ledger_No"].ToString();
                    txtHACName.Text = dtLedgerDetails.Rows[0]["Ledger_Name"].ToString();
                    txtHACCode.Text = (dtLedgerDetails.Rows[0]["Ledger_Code"].ToString().Trim() == "0") ? "" : dtLedgerDetails.Rows[0]["Ledger_Code"].ToString();
                    txtHACAccountLimit.Text = dtLedgerDetails.Rows[0]["Limit_Amount"].ToString();
                    double tLimitAmt = (dtLedgerDetails.Rows[0]["Limit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["Limit_Amount"].ToString());
                    double tCreditAmt = (dtLedgerDetails.Rows[0]["CLimit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["CLimit_Amount"].ToString());
                    double tPaidAmt = (dtLedgerDetails.Rows[0]["PLimit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["PLimit_Amount"].ToString());
                    txtHACBalanceDue.Text = string.Format("{0:0.00}", ((tCreditAmt - tPaidAmt) < 0) ? 0.00 : (tCreditAmt - tPaidAmt));
                    txtHACAvailableCredit.Text = string.Format("{0:0.00}", (tLimitAmt - (tCreditAmt - tPaidAmt)));
                    tHACAvailableCredit = txtHACAvailableCredit.Text == "" ? 0.00 : Convert.ToDouble(txtHACAvailableCredit.Text.Trim()) - (txtHACAccountLimit.Text == "" ? 0.00 : Convert.ToDouble(txtHACAccountLimit.Text));

                    //  funPaymentAmtDetail(currentDate, _Class.clsVariables.tCounter);
                }
                else
                {
                    MyMessageBox.ShowBox("House Account Name not Valid", "Warning");
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void newBtnSupplierName_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Button clickedButton = (Button)sender;
                // _Class.clsVariables.funControlSetting();
                DataTable dtLedgerDetails = new DataTable();
                dtLedgerDetails.Rows.Clear();
                SqlCommand cmdLedgerDetails = new SqlCommand("Select * from Ledger_table where Ledger_name=@tLedgerName and Ledger_groupno=31", con);
                cmdLedgerDetails.Parameters.AddWithValue("@tLedgerName", clickedButton.Content.ToString());
                SqlDataAdapter adpLedgerDetails = new SqlDataAdapter(cmdLedgerDetails);
                adpLedgerDetails.Fill(dtLedgerDetails);
                txtSupplierPaymentAmt.Text = "";
                if (dtLedgerDetails.Rows.Count > 0)
                {
                    tLedgerNo = dtLedgerDetails.Rows[0]["Ledger_No"].ToString();
                    txtSupName.Text = dtLedgerDetails.Rows[0]["Ledger_Name"].ToString();
                    txtSupCode.Text = (dtLedgerDetails.Rows[0]["Ledger_Code"].ToString().Trim() == "0") ? "" : dtLedgerDetails.Rows[0]["Ledger_Code"].ToString();
                    // txtHACAccountLimit.Text = dtLedgerDetails.Rows[0]["Limit_Amount"].ToString();
                    double tLimitAmt = (dtLedgerDetails.Rows[0]["Limit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["Limit_Amount"].ToString());
                    double tCreditAmt = (dtLedgerDetails.Rows[0]["CLimit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["CLimit_Amount"].ToString());
                    double tPaidAmt = (dtLedgerDetails.Rows[0]["PLimit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["PLimit_Amount"].ToString());
                    txtSupplierBalanceDue.Text = string.Format("{0:0.00}", (tCreditAmt - tPaidAmt));
                    txtSupplierAvailableCredit.Text = string.Format("{0:0.00}", ((tCreditAmt - tPaidAmt)));
                }
                else
                {
                    MyMessageBox.ShowBox("Supplier Account Name not Valid", "Warning");
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnHACPrev_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                svBtnHACLetter.PageLeft();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnHACNext_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                svBtnHACLetter.PageRight();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnHACUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                svBtnHAC.PageUp();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnHACDown_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                svBtnHAC.PageDown();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnCash_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (pnlHouseACPayment.Visibility == Visibility.Visible)
                {
                    if (tLedgerNo != "")
                    {
                        //if (_Class.clsVariables.tViewCash == true)
                        //{
                        SqlCommand cmdPayment = new SqlCommand(@"sp_PaymentDetailHACInsert", con);
                        cmdPayment.CommandType = CommandType.StoredProcedure;
                        cmdPayment.Parameters.AddWithValue("@tLedger_no", tLedgerNo);
                        cmdPayment.Parameters.AddWithValue("@tPaymentLedger_NoType", "CASH");
                        cmdPayment.Parameters.AddWithValue("@tPayment_Amt", (txtHACPaymentAmt.Text.Trim() == "") ? 0.00 : double.Parse(txtHACPaymentAmt.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tAccount_Limit", (txtHACAccountLimit.Text.Trim() == "") ? 0.00 : double.Parse(txtHACAccountLimit.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tBalance_Due", (txtHACBalanceDue.Text.Trim() == "") ? 0.00 : double.Parse(txtHACBalanceDue.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tAvaliable_Credit", (txtHACAvailableCredit.Text.Trim() == "") ? 0.00 : double.Parse(txtHACAvailableCredit.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                        cmdPayment.ExecuteNonQuery();
                        lblPaymentTitle.Content = "House Account Payment";

                        pnlHouseACPayment.Visibility = Visibility.Visible;
                        txtHACName.Text = string.Empty;
                        txtHACCode.Text = string.Empty;
                        txtHACAccountLimit.Text = "0.00";
                        txtHACAvailableCredit.Text = "0.00";
                        txtHACBalanceDue.Text = "0.00";
                        txtHACPaymentAmt.Text = "";
                        funLoadCustomerDetails();
                        // }
                        // else
                        // {
                        //     MyMessageBox.ShowBox("You not have permission", "Message");
                        // }

                    }
                }

                if (pnlSupplierPayment.Visibility == Visibility.Visible)
                {
                    if (tLedgerNo != "")
                    {
                        SqlCommand cmdPayment = new SqlCommand(@"sp_PaymentDetailHACInsert", con);
                        cmdPayment.CommandType = CommandType.StoredProcedure;
                        cmdPayment.Parameters.AddWithValue("@tLedger_no", tLedgerNo);
                        cmdPayment.Parameters.AddWithValue("@tPaymentLedger_NoType", "CASH");
                        cmdPayment.Parameters.AddWithValue("@tPayment_Amt", (txtSupplierPaymentAmt.Text.Trim() == "") ? 0.00 : double.Parse(txtSupplierPaymentAmt.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tAccount_Limit", "0.00");
                        cmdPayment.Parameters.AddWithValue("@tBalance_Due", (txtSupplierBalanceDue.Text.Trim() == "") ? 0.00 : double.Parse(txtSupplierBalanceDue.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tAvaliable_Credit", (txtSupplierAvailableCredit.Text.Trim() == "") ? 0.00 : double.Parse(txtSupplierAvailableCredit.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                        cmdPayment.ExecuteNonQuery();

                        lblPaymentTitle.Content = "Payment Out - Supplier";
                        pnlSupplierPayment.Visibility = Visibility.Visible;
                        txtSupName.Text = string.Empty;
                        txtSupCode.Text = string.Empty;
                        //txtHACAccountLimit.Text = "0.00";
                        txtSupplierAvailableCredit.Text = "0.00";
                        txtSupplierBalanceDue.Text = "0.00";
                        txtSupplierPaymentAmt.Text = "";
                        funLoadSupplierDetails();
                    }
                }
                if (pnlExpansesDisplay.Visibility == Visibility.Visible)
                {
                    if (tLedgerNo != "")
                    {
                        if (txtExptAmt.Text.Trim() != string.Empty)
                        {
                            SqlCommand cmdPayment = new SqlCommand(@"sp_PaymentDetailHACInsert", con);
                            cmdPayment.CommandType = CommandType.StoredProcedure;
                            cmdPayment.Parameters.AddWithValue("@tLedger_no", tLedgerNo);
                            cmdPayment.Parameters.AddWithValue("@tPaymentLedger_NoType", "CASH");
                            cmdPayment.Parameters.AddWithValue("@tPayment_Amt", (txtExptAmt.Text.Trim() == "") ? 0.00 : double.Parse(txtExptAmt.Text.Trim()));
                            cmdPayment.Parameters.AddWithValue("@tAccount_Limit", "0.00");
                            cmdPayment.Parameters.AddWithValue("@tBalance_Due", "0.00");
                            cmdPayment.Parameters.AddWithValue("@tAvaliable_Credit", "0.0");
                            cmdPayment.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                            cmdPayment.ExecuteNonQuery();
                            txtExpType.Text = string.Empty;
                            txtExptAmt.Text = string.Empty;
                        }
                        else
                        {
                            MyMessageBox.ShowBox("Please Enter Expenses Amount", "Warning");
                            txtExptAmt.Focus();
                        }
                    }
                }
                funPaymentAmtDetail(currentDate, _Class.clsVariables.tCounter);
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void btnNETS_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (pnlHouseACPayment.Visibility == Visibility.Visible)
                {
                    if (tLedgerNo != "")
                    {
                        // if (_Class.clsVariables.tViewCash == true)
                        // {
                        SqlCommand cmdPayment = new SqlCommand(@"sp_PaymentDetailHACInsert", con);
                        cmdPayment.CommandType = CommandType.StoredProcedure;
                        cmdPayment.Parameters.AddWithValue("@tLedger_no", tLedgerNo);
                        cmdPayment.Parameters.AddWithValue("@tPaymentLedger_NoType", "NETS");
                        cmdPayment.Parameters.AddWithValue("@tPayment_Amt", (txtHACPaymentAmt.Text.Trim() == "") ? 0.00 : double.Parse(txtHACPaymentAmt.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tAccount_Limit", (txtHACAccountLimit.Text.Trim() == "") ? 0.00 : double.Parse(txtHACAccountLimit.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tBalance_Due", (txtHACBalanceDue.Text.Trim() == "") ? 0.00 : double.Parse(txtHACBalanceDue.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tAvaliable_Credit", (txtHACAvailableCredit.Text.Trim() == "") ? 0.00 : double.Parse(txtHACAvailableCredit.Text.Trim()));
                        cmdPayment.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                        cmdPayment.ExecuteNonQuery();

                        lblPaymentTitle.Content = "House Account Payment";
                        pnlHouseACPayment.Visibility = Visibility.Visible;
                        txtHACName.Text = string.Empty;
                        txtHACCode.Text = string.Empty;
                        txtHACAccountLimit.Text = "0.00";
                        txtHACAvailableCredit.Text = "0.00";
                        txtHACBalanceDue.Text = "0.00";
                        txtHACPaymentAmt.Text = "";
                        funLoadCustomerDetails();

                        // }
                        //  else
                        //  {                             
                        //      MyMessageBox.ShowBox("You not have permission", "Message");                        
                        //  }
                    }
                }
                funPaymentAmtDetail(currentDate, _Class.clsVariables.tCounter);
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnCreditCard_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                pnlPaymentList.Children.Clear();
                if (pnlHouseACPayment.Visibility == Visibility.Visible)
                {
                    if (txtHACName.Text.Trim() != "")
                    {
                        CreditCardHouseAccount();
                    }
                    else
                    {
                        MyMessageBox.ShowBox("Select House Account First", "Warning");
                    }
                    // pnlPaymentList.Children.Clear();
                }
                else if (pnlSupplierPayment.Visibility == Visibility.Visible)
                {
                    CreditCardHouseAccount();
                }
                else if (pnlExpansesDisplay.Visibility == Visibility.Visible)
                {
                    CreditCardHouseAccount();
                }
                // con.Close();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        public void CreditCardHouseAccount()
        {
            try
            {
                //  funConnectionStateCheck();
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                //  pnlPaymentList.Children.Clear();
                SqlCommand cmd = new SqlCommand("select Ledger_name as Card_Name from Ledger_table where  Ledger_groupno=5 and Ledger_no<>14 order by Ledger_name ASC", con);
                //  cmd.Parameters.AddWithValue("@tStart", tStartLetter + "%");
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                if (dtNew.Rows.Count <= 0)
                {
                    MyMessageBox.ShowBox("Credit Card Details Not Found", "Warning");
                }
                else
                {
                    pnlPaymentList.Children.Clear();
                }
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 16;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    newBtn.Name = "HouseAC" + i;
                    newBtn.Width = 260;
                    newBtn.Height = 60;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    newBtn.Click += new RoutedEventHandler(newBtnCreditCardName_Click);
                    pnlPaymentList.Children.Add(newBtn);
                    pnlPaymentList.Height = (i * 60) + 50;

                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }

        private void newBtnCreditCardName_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (((txtHACPaymentAmt.Text.Trim() == "") ? 0.00 : double.Parse(txtHACPaymentAmt.Text.Trim())) > 0)
                {
                    if (pnlHouseACPayment.Visibility == Visibility.Visible)
                    {

                        Button clickedButton = (Button)sender;
                        // _Class.clsVariables.funControlSetting();
                        DataTable dtLedgerDetails = new DataTable();
                        dtLedgerDetails.Rows.Clear();
                        SqlCommand cmdLedgerDetails = new SqlCommand("Select * from Ledger_table where Ledger_name=@tLedgerName and Ledger_groupno=5", con);
                        cmdLedgerDetails.Parameters.AddWithValue("@tLedgerName", clickedButton.Content.ToString());
                        SqlDataAdapter adpLedgerDetails = new SqlDataAdapter(cmdLedgerDetails);
                        adpLedgerDetails.Fill(dtLedgerDetails);

                        if (dtLedgerDetails.Rows.Count > 0)
                        {
                            // tLedgerNo = dtLedgerDetails.Rows[0]["Ledger_No"].ToString();
                            txtHACName.Text = dtLedgerDetails.Rows[0]["Ledger_Name"].ToString();
                            if (tLedgerNo != "")
                            {
                                SqlCommand cmdPayment = new SqlCommand(@"sp_PaymentDetailHACInsert", con);
                                cmdPayment.CommandType = CommandType.StoredProcedure;
                                cmdPayment.Parameters.AddWithValue("@tLedger_no", tLedgerNo);
                                cmdPayment.Parameters.AddWithValue("@tPaymentLedger_NoType", dtLedgerDetails.Rows[0]["Ledger_Name"].ToString());
                                cmdPayment.Parameters.AddWithValue("@tPayment_Amt", (txtHACPaymentAmt.Text.Trim() == "") ? 0.00 : double.Parse(txtHACPaymentAmt.Text.Trim()));
                                cmdPayment.Parameters.AddWithValue("@tAccount_Limit", (txtHACAccountLimit.Text.Trim() == "") ? 0.00 : double.Parse(txtHACAccountLimit.Text.Trim()));
                                cmdPayment.Parameters.AddWithValue("@tBalance_Due", (txtHACBalanceDue.Text.Trim() == "") ? 0.00 : double.Parse(txtHACBalanceDue.Text.Trim()));
                                cmdPayment.Parameters.AddWithValue("@tAvaliable_Credit", (txtHACAvailableCredit.Text.Trim() == "") ? 0.00 : double.Parse(txtHACAvailableCredit.Text.Trim()));
                                cmdPayment.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                                cmdPayment.ExecuteNonQuery();


                                lblPaymentTitle.Content = "House Account Payment";
                                pnlHouseACPayment.Visibility = Visibility.Visible;
                                txtHACName.Text = string.Empty;
                                txtHACCode.Text = string.Empty;
                                txtHACAccountLimit.Text = "0.00";
                                txtHACAvailableCredit.Text = "0.00";
                                txtHACBalanceDue.Text = "0.00";
                                txtHACPaymentAmt.Text = "";
                                funLoadCustomerDetails();
                            }
                        }
                        else
                        {
                            MyMessageBox.ShowBox("House Account Name not Valid", "Warning");
                        }

                    }
                    if (pnlSupplierPayment.Visibility == Visibility.Visible)
                    {
                        Button clickedButton = (Button)sender;
                        // _Class.clsVariables.funControlSetting();
                        DataTable dtLedgerDetails = new DataTable();
                        dtLedgerDetails.Rows.Clear();
                        SqlCommand cmdLedgerDetails = new SqlCommand("Select * from Ledger_table where Ledger_name=@tLedgerName and Ledger_groupno=5", con);
                        cmdLedgerDetails.Parameters.AddWithValue("@tLedgerName", clickedButton.Content.ToString());
                        SqlDataAdapter adpLedgerDetails = new SqlDataAdapter(cmdLedgerDetails);
                        adpLedgerDetails.Fill(dtLedgerDetails);

                        if (dtLedgerDetails.Rows.Count > 0)
                        {
                            // tLedgerNo = dtLedgerDetails.Rows[0]["Ledger_No"].ToString();
                            txtSupName.Text = dtLedgerDetails.Rows[0]["Ledger_Name"].ToString();
                            if (tLedgerNo != "")
                            {
                                SqlCommand cmdPayment = new SqlCommand(@"sp_PaymentDetailHACInsert", con);
                                cmdPayment.CommandType = CommandType.StoredProcedure;
                                cmdPayment.Parameters.AddWithValue("@tLedger_no", tLedgerNo);
                                cmdPayment.Parameters.AddWithValue("@tPaymentLedger_NoType", dtLedgerDetails.Rows[0]["Ledger_Name"].ToString());
                                cmdPayment.Parameters.AddWithValue("@tPayment_Amt", (txtSupplierPaymentAmt.Text.Trim() == "") ? 0.00 : double.Parse(txtSupplierPaymentAmt.Text.Trim()));
                                cmdPayment.Parameters.AddWithValue("@tAccount_Limit", "0.00");
                                cmdPayment.Parameters.AddWithValue("@tBalance_Due", (txtSupplierBalanceDue.Text.Trim() == "") ? 0.00 : double.Parse(txtSupplierBalanceDue.Text.Trim()));
                                cmdPayment.Parameters.AddWithValue("@tAvaliable_Credit", (txtSupplierAvailableCredit.Text.Trim() == "") ? 0.00 : double.Parse(txtSupplierAvailableCredit.Text.Trim()));
                                cmdPayment.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                                cmdPayment.ExecuteNonQuery();


                                lblPaymentTitle.Content = "Payment Out - Supplier";
                                pnlSupplierPayment.Visibility = Visibility.Visible;
                                txtSupName.Text = string.Empty;
                                txtSupCode.Text = string.Empty;
                                //  txtHACAccountLimit.Text = "0.00";
                                txtSupplierAvailableCredit.Text = "0.00";
                                txtSupplierBalanceDue.Text = "0.00";
                                txtSupplierPaymentAmt.Text = "";
                                funLoadSupplierDetails();
                            }
                        }
                        else
                        {
                            MyMessageBox.ShowBox("Supplier Name not Valid", "Warning");
                        }
                    }
                    if (pnlExpansesDisplay.Visibility == Visibility.Visible)
                    {
                        // txtSupName.Text = dtLedgerDetails.Rows[0]["Ledger_Name"].ToString();
                        if (tLedgerNo != "")
                        {
                            if (txtExpType.Text.Trim() != string.Empty)
                            {
                                SqlCommand cmdPayment = new SqlCommand(@"sp_PaymentDetailHACInsert", con);
                                cmdPayment.CommandType = CommandType.StoredProcedure;
                                cmdPayment.Parameters.AddWithValue("@tLedger_no", tLedgerNo);
                                cmdPayment.Parameters.AddWithValue("@tPaymentLedger_NoType", txtExpType.Text.Trim());
                                cmdPayment.Parameters.AddWithValue("@tPayment_Amt", txtExptAmt.Text == "" ? "0.00" : Convert.ToDouble(txtExptAmt.Text).ToString("0.00"));
                                cmdPayment.Parameters.AddWithValue("@tAccount_Limit", "0.00");
                                cmdPayment.Parameters.AddWithValue("@tBalance_Due", "0.00");
                                cmdPayment.Parameters.AddWithValue("@tAvaliable_Credit", "0.00");
                                cmdPayment.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                                cmdPayment.ExecuteNonQuery();
                                txtExpType.Text = string.Empty;
                                txtExptAmt.Text = string.Empty;

                                FunExpenessAllL();
                                FunExpencess();
                            }
                            else
                            {
                                MyMessageBox.ShowBox("Please Enter Expenses Amount", "Warning");
                            }
                        }
                    }
                    funPaymentAmtDetail(currentDate, _Class.clsVariables.tCounter);
                }
                else
                {
                    MyMessageBox.ShowBox("You should enter Amount", "Warning");
                    txtHACPaymentAmt.Focus();
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        string temp = "";
        private void btnOne_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (pnlHouseACPayment.Visibility == Visibility.Visible)
                {
                    if (txtHACName.Text.Trim() != "")
                    {
                        txtHACPaymentAmt.Focus();
                        Button btn = (Button)sender;
                        if (txtHACPaymentAmt.Text != "")
                        {
                            temp = txtHACPaymentAmt.Text;
                            txtHACPaymentAmt.Text = "";
                            txtHACPaymentAmt.Text = temp + btn.Content.ToString();
                        }
                        if (txtHACPaymentAmt.Text == "")
                        {
                            txtHACPaymentAmt.Text = btn.Content.ToString();
                        }
                        txtHACPaymentAmt.Select(txtHACPaymentAmt.Text.Length, 0);
                    }
                }
                if (pnlSupplierPayment.Visibility == Visibility.Visible)
                {
                    if (txtSupName.Text.Trim() != "")
                    {
                        txtSupplierPaymentAmt.Focus();
                        Button btn = (Button)sender;
                        if (txtSupplierPaymentAmt.Text != "")
                        {
                            temp = txtSupplierPaymentAmt.Text;
                            txtSupplierPaymentAmt.Text = "";
                            txtSupplierPaymentAmt.Text = temp + btn.Content.ToString();
                        }
                        if (txtSupplierPaymentAmt.Text == "")
                        {
                            txtSupplierPaymentAmt.Text = btn.Content.ToString();
                        }
                        txtSupplierPaymentAmt.Select(txtSupplierPaymentAmt.Text.Length, 0);
                    }
                }
                if (pnlExpansesDisplay.Visibility == Visibility.Visible)
                {
                    if (txtExpType.Text.Trim() != "")
                    {
                        txtExptAmt.Focus();
                        Button btn = (Button)sender;
                        if (txtExptAmt.Text != "")
                        {
                            temp = txtExptAmt.Text;
                            txtExptAmt.Text = "";
                            txtExptAmt.Text = temp + btn.Content.ToString();
                        }
                        if (txtExptAmt.Text == "")
                        {
                            txtExptAmt.Text = btn.Content.ToString();
                        }
                        txtExptAmt.Select(txtExptAmt.Text.Length, 0);
                    }
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void txtHACPaymentAmt_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                double tLimitAmt = (txtHACAccountLimit.Text.Trim() == "") ? 0.00 : double.Parse(txtHACAccountLimit.Text.Trim());
                double tBalanceAmt = (txtHACBalanceDue.Text.Trim() == "") ? 0.00 : double.Parse(txtHACBalanceDue.Text.Trim());
                double tPaymentAmt = 0.00;
                if (txtHACPaymentAmt.Text.Trim() != "" && txtHACName.Text.Trim() != "")
                {

                    if (txtHACPaymentAmt.Text.Trim() != "")
                    {
                        tPaymentAmt = double.Parse(txtHACPaymentAmt.Text.Trim());
                    }
                    txtHACAvailableCredit.Text = string.Format("{0:0.00}", (tLimitAmt + (tPaymentAmt - tBalanceAmt)));
                }
                else
                {
                    tHACAvailableCredit = 0.00;
                    tPaymentAmt = txtHACPaymentAmt.Text.Trim() == "" ? 0.00 : Convert.ToDouble(txtHACPaymentAmt.Text.Trim());
                    txtHACAvailableCredit.Text = string.Format("{0:0.00}", (tLimitAmt + (tPaymentAmt + tHACAvailableCredit - tBalanceAmt)));
                }
            }

            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnPaymentIn_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //if (_Class.clsVariables.tViewCash == true)
                {
                    tHACAvailableCredit = 0.00;
                    txtHACAvailableCredit.Text = tHACAvailableCredit.ToString();
                    lblPaymentTitle.Content = "House Account Payment";
                    pnlHouseACPayment.Visibility = Visibility.Visible;
                    pnlSupplierPayment.Visibility = Visibility.Hidden;
                    pnlExpansesDisplay.Visibility = Visibility.Hidden;

                    txtHACName.Text = string.Empty;
                    txtHACCode.Text = string.Empty;
                    txtHACAccountLimit.Text = "0.00";
                    txtHACAvailableCredit.Text = "0.00";
                    txtHACBalanceDue.Text = "0.00";
                    txtHACPaymentAmt.Text = "";
                    funLoadCustomerDetails();
                    tLedgerNo = "";
                }
            }

            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnPaymentOut_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                lblPaymentTitle.Content = "Payment Out - Supplier";
                pnlHouseACPayment.Visibility = Visibility.Hidden;
                pnlSupplierPayment.Visibility = Visibility.Visible;
                pnlExpansesDisplay.Visibility = Visibility.Hidden;
                txtSupCode.Text = string.Empty;
                txtSupName.Text = string.Empty;
                txtSupplierPaymentAmt.Text = "";
                txtSupplierBalanceDue.Text = "0.00";
                funLoadSupplierDetails();
                tLedgerNo = "";
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void btnExpenses_Click(object sender, RoutedEventArgs e)
        {

            lblPaymentTitle.Content = "Payment Out - Expenses";
            pnlHouseACPayment.Visibility = Visibility.Hidden;
            pnlSupplierPayment.Visibility = Visibility.Hidden;
            pnlExpansesDisplay.Visibility = Visibility.Visible;
            txtExptAmt.Text = string.Empty;
            txtExpType.Text = string.Empty;
            FunExpenessAllL();
            FunExpencess();
            tLedgerNo = "";
        }
        public void FunExpencess()
        {
            try
            {
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select Ledger_name as Card_Name from Ledger_table where  Ledger_groupno in (25,26) order by Ledger_name ASC", con);
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                pnlPaymentList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 16;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    newBtn.Name = "HouseACExpeness" + i;
                    newBtn.Width = 260;
                    newBtn.Height = 60;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    newBtn.Click += new RoutedEventHandler(newBtnHACExpenessrName_Click);
                    pnlPaymentList.Children.Add(newBtn);
                    pnlPaymentList.Height = (i * 60) + 50;
                }
                //  con.Close();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void newBtnHACExpenessrName_Click(object sender, EventArgs e)
        {
            try
            {
                Button ClickedButton1 = (Button)sender;
                txtExpType.Text = ClickedButton1.Content.ToString();
                //Getting First Letter Only:
                if (txtExpType.Text.Trim() != string.Empty)
                {
                    SqlCommand cmd_new = new SqlCommand("select * from ledger_table where ledger_name=@LedgerName", con);
                    // cmd_new.CommandType = CommandType.StoredProcedure;
                    cmd_new.Parameters.AddWithValue("@LedgerName", txtExpType.Text.ToString().Trim());
                    tLedgerNo = Convert.ToString(cmd_new.ExecuteScalar().ToString() == string.Empty ? "" : cmd_new.ExecuteScalar().ToString()).ToString();
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }

        }
        public void FunExpenessAllL()
        {
            DataTable dtNew = new DataTable();
            dtNew.Rows.Clear();
            SqlCommand cmd = new SqlCommand("select distinct(SUBSTRING(LTrim(UPPER(Ledger_name)),0,2)) as Card_Name from Ledger_table where Ledger_groupno in (25,26) and Ledger_no<>8", con);
            dr = cmd.ExecuteReader();
            dtNew.Load(dr);
            int i = 0;
            string tLoadLetter = "";
            pnlPaymentListLetter.Children.Clear();
            for (int mn = 0; mn < dtNew.Rows.Count; mn++)
            {
                i += 1;
                Button newBtn = new Button();
                newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                tLoadLetter = dtNew.Rows[mn]["Card_Name"].ToString();
                newBtn.FontSize = 30;

                //TextBlock textBlock = new TextBlock();
                //textBlock.Inlines.Add(dtNew.Rows[mn]["Card_Name"].ToString());
                //txtCardName = "";
                //txtCardName = dtNew.Rows[mn]["Card_Name"].ToString();
                //textBlock.Inlines.Add(new LineBreak());
                //textBlock.FontSize = 40;
                ////newBtn.Content = textBlock;
                //  newBtn.Content = txtCardName;
                newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                newBtn.VerticalAlignment = VerticalAlignment.Center;
                //newBtn.Content = dr["DiscountName"].ToString();
                newBtn.Name = "HACLedgerExpeness" + i;
                //newBtn.Name ="Discount"+i+dr["DiscountName"].ToString();
                newBtn.Width = 85;
                newBtn.Height = 68;
                newBtn.Margin = new Thickness(1, 1, 1, 1);
                // newBtn.Style = this.Resources["btnGroup"] as Style;
                //Every Button Name Calles As newBtnGroup_Click
                newBtn.Click += new RoutedEventHandler(newBtnExpenesesListLetter_Click);
                //newBtn.Style = "btnnoborder";
                //newBtn.Template = this.FindResource("btnnoborder") as ControlTemplate;
                pnlPaymentListLetter.Children.Add(newBtn);
                pnlPaymentListLetter.Width = (i * 85) + 50;

            }
        }
        private void newBtnExpenesesListLetter_Click(object sender, EventArgs e)
        {
            Button ClickedButton = (Button)sender;
            FunExpenesesLAll(ClickedButton.Content.ToString());
        }
        private void FunExpenesesLAll(string tStartLetter)
        {
            try
            {
                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select Ledger_name as Card_Name from Ledger_table where  Ledger_groupno in (25,26)  and Ledger_name like @tStart order by Ledger_name ASC", con);

                cmd.Parameters.AddWithValue("@tStart", tStartLetter + "%");
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                pnlPaymentList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 16;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    newBtn.Name = "HouseAC" + i;
                    newBtn.Width = 260;
                    newBtn.Height = 60;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    newBtn.Click += new RoutedEventHandler(newBtnHACExpenessrName_Click);
                    pnlPaymentList.Children.Add(newBtn);
                    pnlPaymentList.Height = (i * 60) + 50;

                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnAccountCodeLoad_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                frmKeyBoard frm = new frmKeyBoard();
                _Class.clsVariables.tVoidActionType = "PAYMENTIN";
                if (_Class.clsVariables.tVoidActionType == "PAYMENTIN")
                {
                    frm.SalesCreationEventHandlerNew += new EventHandler(CloseEventItemCode);
                    frm.ShowDialog();
                    txtHACCode.Focus();
                    //  txtEnterValue.se.Select(txtEnterValue.Password.Length, 0);
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message);
            }
        }
        public void CloseEventItemCode(object sender, EventArgs e)
        {
            try
            {
                txtHACCode.Text = _Class.clsVariables.tVoidValue;
                txtHACCode.Focus();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        public void CloseEventSupplierCode(object sender, EventArgs e)
        {
            try
            {
                txtSupCode.Text = _Class.clsVariables.tVoidValue;
                txtSupCode.Focus();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void btnHACEnter_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (pnlHouseACPayment.Visibility == Visibility.Visible)
                {
                    funHACCodeSearch();
                }

                if (pnlSupplierPayment.Visibility == Visibility.Visible)
                {
                    funSupplierCodeSearch();
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }



        public void funSupplierCodeSearch()
        {
            if (txtSupCode.Text.Trim() != "")
            {
                try
                {
                    DataTable dtLedgerDetails = new DataTable();
                    dtLedgerDetails.Rows.Clear();
                    SqlCommand cmdLedgerDetails = new SqlCommand("Select * from Ledger_table where Ledger_code=@tLedgerName and Ledger_groupno=31", con);
                    cmdLedgerDetails.Parameters.AddWithValue("@tLedgerName", txtSupCode.Text.Trim());
                    SqlDataAdapter adpLedgerDetails = new SqlDataAdapter(cmdLedgerDetails);
                    adpLedgerDetails.Fill(dtLedgerDetails);

                    if (dtLedgerDetails.Rows.Count > 0)
                    {
                        tLedgerNo = dtLedgerDetails.Rows[0]["Ledger_No"].ToString();
                        txtSupName.Text = dtLedgerDetails.Rows[0]["Ledger_Name"].ToString();
                        txtSupCode.Text = (dtLedgerDetails.Rows[0]["Ledger_Code"].ToString().Trim() == "0") ? "" : dtLedgerDetails.Rows[0]["Ledger_Code"].ToString();
                        // txtHACAccountLimit.Text = dtLedgerDetails.Rows[0]["Limit_Amount"].ToString();
                        double tLimitAmt = (dtLedgerDetails.Rows[0]["Limit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["Limit_Amount"].ToString());
                        double tCreditAmt = (dtLedgerDetails.Rows[0]["CLimit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["CLimit_Amount"].ToString());
                        double tPaidAmt = (dtLedgerDetails.Rows[0]["PLimit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["PLimit_Amount"].ToString());
                        txtSupplierBalanceDue.Text = string.Format("{0:0.00}", (tCreditAmt - tPaidAmt));
                        txtSupplierAvailableCredit.Text = string.Format("{0:0.00}", (tLimitAmt - (tCreditAmt - tPaidAmt)));
                    }
                    else
                    {
                        MyMessageBox.ShowBox("Supplier Code not Found", "Warning");
                    }

                }
                catch (Exception ex)
                {
                    MyMessageBox.ShowBox(ex.Message, "Warning");
                }
            }
        }

        public void funHACCodeSearch()
        {
            if (txtHACCode.Text.Trim() != "")
            {
                try
                {
                    DataTable dtLedgerDetails = new DataTable();
                    dtLedgerDetails.Rows.Clear();
                    SqlCommand cmdLedgerDetails = new SqlCommand("Select * from Ledger_table where Ledger_code=@tLedgerName and Ledger_groupno=32", con);
                    cmdLedgerDetails.Parameters.AddWithValue("@tLedgerName", txtHACCode.Text.Trim());
                    SqlDataAdapter adpLedgerDetails = new SqlDataAdapter(cmdLedgerDetails);
                    adpLedgerDetails.Fill(dtLedgerDetails);

                    if (dtLedgerDetails.Rows.Count > 0)
                    {
                        tLedgerNo = dtLedgerDetails.Rows[0]["Ledger_No"].ToString();
                        txtHACName.Text = dtLedgerDetails.Rows[0]["Ledger_Name"].ToString();
                        txtHACCode.Text = (dtLedgerDetails.Rows[0]["Ledger_Code"].ToString().Trim() == "0") ? "" : dtLedgerDetails.Rows[0]["Ledger_Code"].ToString();
                        txtHACAccountLimit.Text = dtLedgerDetails.Rows[0]["Limit_Amount"].ToString();
                        double tLimitAmt = (dtLedgerDetails.Rows[0]["Limit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["Limit_Amount"].ToString());
                        double tCreditAmt = (dtLedgerDetails.Rows[0]["CLimit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["CLimit_Amount"].ToString());
                        double tPaidAmt = (dtLedgerDetails.Rows[0]["PLimit_Amount"].ToString() == "") ? 0.00 : double.Parse(dtLedgerDetails.Rows[0]["PLimit_Amount"].ToString());
                        txtHACBalanceDue.Text = string.Format("{0:0.00}", (tCreditAmt - tPaidAmt));
                        txtHACAvailableCredit.Text = string.Format("{0:0.00}", (tLimitAmt - (tCreditAmt - tPaidAmt)));
                    }
                    else
                    {
                        MyMessageBox.ShowBox("House Account Code not Found", "Warning");
                    }

                }
                catch (Exception ex)
                {
                    MyMessageBox.ShowBox(ex.Message, "Warning");
                }
            }
        }

        private void txtHACCode_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.Key == Key.Enter)
                {
                    funHACCodeSearch();
                    txtHACPaymentAmt.Focus();
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnPaymentCollectionRpt_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (cmbCounterName.Text != "All Counter")
                {
                    tPrintingType = "";
                    gridItemsManager.DataSource = null;
                    // DataTable dtPayment = new DataTable();
                    dtDebitCredit.Rows.Clear();
                    string tCmdPayment = "";
                    if (cmbCounterName.Text == "All Counter")
                    {

                    }
                    else
                    {
                        tCmdPayment = "Select Ledger_table.Ledger_name as Particular,(case when Ledger_table.Ledger_groupno=31  then PaymentDetail_table.Payment_Amt else 0.00 end) as Debit, (case when Ledger_table.Ledger_groupno=32 or Ledger_table.Ledger_groupno=25 OR Ledger_table.Ledger_groupno=26 then PaymentDetail_table.Payment_Amt else 0.00 end) as Credit  from PaymentDetail_table,Ledger_table where PaymentDetail_table.Ledger_no=Ledger_table.Ledger_no and PaymentDetail_table.EndOfDay=@tDate and PaymentDetail_table.Ctr_no=(select ctr_no from Counter_table  where Ctr_Name=@tCounterNo)";
                    }
                    SqlCommand cmdPayment = new SqlCommand(tCmdPayment, con);
                    cmdPayment.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    cmdPayment.Parameters.AddWithValue("@tCounterNo", cmbCounterName.Text);
                    SqlDataAdapter adpPayment = new SqlDataAdapter(cmdPayment);
                    adpPayment.Fill(dtDebitCredit);

                    double tTotalDebit = 0.00;
                    double tTotalCredit = 0.00;
                    for (int i = 0; i < dtDebitCredit.Rows.Count; i++)
                    {
                        tTotalDebit += (dtDebitCredit.Rows[i]["Debit"].ToString() == "") ? 0.00 : double.Parse(dtDebitCredit.Rows[i]["Debit"].ToString());
                        tTotalCredit += (dtDebitCredit.Rows[i]["Credit"].ToString() == "") ? 0.00 : double.Parse(dtDebitCredit.Rows[i]["Credit"].ToString());
                    }
                    dtDebitCredit.Rows.Add("", "", "");
                    dtDebitCredit.Rows.Add("Total ", string.Format("{0:0.00}", tTotalDebit), string.Format("{0:0.00}", tTotalCredit));
                    dtDebitCredit.Rows.Add("", "", "");

                    //If any changes Made Here kindly change Counter Drawer Button -- Payment Detail Change Here
                    DataTable dtPaymentAmt = new DataTable();
                    dtPaymentAmt.Rows.Clear();
                    SqlCommand cmd = new SqlCommand(@"Create Table #TempTable1 (PaymentLedger_No varchar(400),Ledger_groupno1 varchar(400),Payment_Amt Numeric(18,2)) 
INSERT INTO #TempTable1 (PaymentLedger_No,Ledger_groupno1,Payment_Amt) (Select PaymentLedger_No as PaymentLedger_No,Ledger_groupno1 as Ledger_groupno1,(case when Ledger_groupno1=32 then  SUM(Payment_Amt) else -(SUM(Payment_Amt)) EnD) as Payment_Amt  from PaymentDetail_table where EndOfDay=@tDate and Ctr_no=(select ctr_no from Counter_table where ctr_name=@tCounterNo) group by PaymentLedger_No,Ledger_GroupNo1)
Select 'Payment '+Ledger_table.Ledger_name as PaymentMode,SUM(Payment_Amt) as Amount from #TempTable1, Ledger_table where #TempTable1.PaymentLedger_No=Ledger_table.Ledger_no group by Ledger_table.Ledger_name
DROP TABLE #TempTable1", con);
                    cmd.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                    cmd.Parameters.AddWithValue("@tCounterNo", cmbCounterName.Text);
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(dtPaymentAmt);

                    for (int mn = 0; mn < dtPaymentAmt.Rows.Count; mn++)
                    {
                        dtDebitCredit.Rows.Add(dtPaymentAmt.Rows[mn]["PaymentMode"].ToString(), "", dtPaymentAmt.Rows[mn]["Amount"].ToString());
                    }


                    gridItemsManager.DataSource = dtDebitCredit;
                    gridItemsManager.ColumnHeadersVisible = true;
                    gridItemsManager.Columns[0].Width = 230;
                    gridItemsManager.Columns[1].Width = 90;
                    gridItemsManager.Columns[2].Width = 90;
                    this.gridItemsManager.Columns[1].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                    this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

                    funPrintHeaderPart();
                    charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                    topLine1 = "PAYMENT REPORT";
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }
                    //break;
                    //    }



                    //}

                    //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                    //{
                    //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                    topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }

                    //}

                    //for (int i = 0; i < dtPrint.Rows.Count - 1; i++)
                    //{
                    //    if (dtPrint.Rows[i]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i]["Property"].ToString();
                    topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }
                    topLine1 = "Report Counter : " + cmbCounterName.Text;
                    if (topLine1.Length <= double.Parse(charPerLine))
                    {
                        findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                        if (findCenterPosition % 2 == 0)
                        {
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        else
                        {
                            for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += topLine1;
                            for (int j = 0; j < (findCenterPosition / 2); j++)
                            {
                                mainStr += " ";
                            }
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }

                    //}

                    ////Print Line Below Header
                    //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                    //{
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    //    }

                    //    // print lint below logo
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    //    {
                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    //dtPrint.Rows[i4]["Property"].ToString();
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }
                    //}

                    ////receipt No  double location = 0.00;
                    //for (int i5 = 0; i5 < dtPrint.Rows.Count - 1; i5++)
                    //{
                    //    if (dtPrint.Rows[i5]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i5]["Property"].ToString();
                    //    }

                    ////   double location = 0.00;
                    string tempStr = null;
                    //if (dtPrint.Rows[i5]["Describ"].ToString() == "Print Qunatity and Rate")
                    //{
                    string tQtyHeading = "";
                    tQtyHeading = "Particular";
                    //  mainStr += tQtyHeading;
                    double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 18));
                    for (int j = 0; j < chkCount; j++)
                    {
                        tQtyHeading += " ";
                    }
                    tQtyHeading += "  Debit";
                    // tQtyHeading += "U/Rate ";
                    tQtyHeading += "   Credit";
                    mainStr += tQtyHeading;
                    mainStr += "\n";
                    //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                    //{
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    //    }

                    //    // print lint below logo
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    //    {
                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    //dtPrint.Rows[i4]["Property"].ToString();
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                    //        break;
                    //    }
                    //}
                    for (int mn = 0; mn < dtDebitCredit.Rows.Count; mn++)
                    //foreach (DataRow row in dgsales.Rows)
                    {
                        // object[] array = dgsales.Rows[mn].;
                        bool isChk = false;
                        //for (int z = 0; z < 4; z++)
                        //{
                        //    if (dtItemProfit.Rows[mn][z].ToString().Trim() == "")
                        //    {
                        //        isChk = true;
                        //        break;
                        //    }
                        //}
                        if (isChk == false)
                        {
                            for (int i = 0; i < 3; i++)
                            {
                                tempStr = dtDebitCredit.Rows[mn][i].ToString();
                                //  MessageBox.Show(tempStr.Length.ToString());
                                findCenterPosition = (double.Parse(charPerLine) - 20);
                                if (i == 0)
                                {
                                    if (tempStr.Length <= (int)findCenterPosition)
                                    {
                                        mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                    }
                                    else
                                    {
                                        string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                        //    MessageBox.Show(temp);
                                        int chkSpace = temp.LastIndexOf(" ");
                                        int loc = (temp.Length - temp.LastIndexOf(" "));
                                        //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                        if (chkSpace != -1)
                                        {
                                            mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                            //   MessageBox.Show(mainStr.ToString());
                                            for (int j = 0; j < loc + 20; j++)
                                            {
                                                mainStr += " ";
                                            }
                                            mainStr += "\n";
                                            string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                            // mainStr += temp1;
                                            if (temp1.Length <= (int)findCenterPosition)
                                            {
                                                mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                            }
                                        }
                                        else
                                        {
                                            mainStr += temp.ToString();
                                        }

                                    }
                                }

                                if (i == 1)
                                {
                                    if (tempStr.Length < 11)
                                    {
                                        mainStr += tempStr.PadLeft(10, ' ');
                                    }
                                }
                                if (i == 10)
                                {
                                    // mainStr += tempStr.PadRight(7, ' ');
                                    if (tempStr.Length <= 7)
                                    {
                                        mainStr += tempStr.PadLeft(7, ' ');
                                    }
                                }
                                if (i == 2)
                                {
                                    if (tempStr.Length <= 10)
                                    {
                                        mainStr += tempStr.PadLeft(10, ' ');
                                    }
                                }
                                // tPrintText += tempStr;
                            }
                            mainStr += "\n";
                        }
                    }
                    //    }
                    //}



                    //// lblPrint.Content = mainStr;
                    ////Print Line Below Header
                    //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                    //{
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                    //    {
                    //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                    //    }

                    //    // print lint below logo
                    //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                    //    {
                    lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                    //dtPrint.Rows[i4]["Property"].ToString();
                    if (lineBelowLogo == "No Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += "\n";
                    }
                    if (lineBelowLogo == "Single Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "-";
                        }
                        mainStr += "\n";
                    }
                    else if (lineBelowLogo == "Double Line")
                    {
                        for (int j = 0; j < double.Parse(charPerLine); j++)
                        {
                            mainStr += "=";
                        }
                        mainStr += "\n";
                    }
                }
                else
                {
                    MyMessageBox.ShowBox("This report not supporting for all counter", "Warning");
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        public void funPaymentPrint()
        {
            try
            {
                if (pnlHouseACPayment.Visibility == Visibility.Visible)
                {
                    DataTable dtPaymentPrint = new DataTable();
                    if (dtPaymentPrint.Columns.Count == 0)
                    {
                        dtPaymentPrint.Columns.Add("Particulars", typeof(string));
                        dtPaymentPrint.Columns.Add("Amount", typeof(string));
                    }
                    dtPaymentPrint.Rows.Clear();

                    if (txtHACName.Text.Trim() != "" && txtHACPaymentAmt.Text.Trim() != "")
                    {
                        dtPaymentPrint.Rows.Add("Name", txtHACName.Text.Trim());
                        if (txtHACCode.Text.Trim() != "")
                        {
                            dtPaymentPrint.Rows.Add("Code", txtHACCode.Text.Trim());
                        }
                        dtPaymentPrint.Rows.Add("Payment Amount", string.IsNullOrEmpty(Convert.ToString(txtHACPaymentAmt.Text)) ? "0.00" : string.Format("{0:0.00}", Convert.ToDouble(Convert.ToString(txtHACPaymentAmt.Text))));
                        dtPaymentPrint.Rows.Add("Account Limit", txtHACAccountLimit.Text.Trim());
                        dtPaymentPrint.Rows.Add("Balance Due", txtHACBalanceDue.Text.Trim());
                        dtPaymentPrint.Rows.Add("Available Credit", txtHACAvailableCredit.Text.Trim());
                        // dtPaymentPrint.Rows.Add("Available Credit", txtHACAvailableCredit.Text.Trim());

                        mainStr = "";
                        funPrintHeaderPart();
                        charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                        topLine1 = "HOUSE ACCOUNT PAYMENT REPORT";
                        if (topLine1.Length <= double.Parse(charPerLine))
                        {
                            findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                            if (findCenterPosition % 2 == 0)
                            {
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            else
                            {
                                for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            mainStr += "\n";
                        }


                        topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                        if (topLine1.Length <= double.Parse(charPerLine))
                        {
                            findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                            if (findCenterPosition % 2 == 0)
                            {
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            else
                            {
                                for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            mainStr += "\n";
                        }


                        topLine1 = "Report Date : " + currentDate.Day.ToString() + "/" + currentDate.Month.ToString() + "/" + currentDate.Year.ToString();
                        if (topLine1.Length <= double.Parse(charPerLine))
                        {
                            findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                            if (findCenterPosition % 2 == 0)
                            {
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            else
                            {
                                for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            mainStr += "\n";
                        }

                        topLine1 = txtHACName.Text.Trim();
                        if (topLine1.Length <= double.Parse(charPerLine))
                        {
                            findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                            if (findCenterPosition % 2 == 0)
                            {
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            else
                            {
                                for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                                {
                                    mainStr += " ";
                                }
                                mainStr += topLine1;
                                for (int j = 0; j < (findCenterPosition / 2); j++)
                                {
                                    mainStr += " ";
                                }
                            }
                            mainStr += "\n";
                        }

                        //Print Line Below Header
                        //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                        //{
                        //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                        //    {
                        //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                        //    }

                        //    // print lint below logo
                        //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                        //    {
                        lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                        if (lineBelowLogo == "No Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += "\n";
                        }
                        if (lineBelowLogo == "Single Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "-";
                            }
                            mainStr += "\n";
                        }
                        else if (lineBelowLogo == "Double Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "=";
                            }
                            mainStr += "\n";
                        }

                        ds.Tables.Clear();
                        // mainStrSub = "";
                        //   dt_griddiaplay.Rows.Clear();
                        string amount_string = "0.00";

                        findCenterPosition = (double.Parse(charPerLine) - 15);
                        topLine1 = "Payment Amount";
                        string rate = String.Format("{0:0.00}", Convert.ToDouble(Convert.ToString(txtHACPaymentAmt.Text.Trim())));
                        amount_string = txtHACPaymentAmt.Text.Trim();
                        mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                        if (rate.Length <= 15)
                        {
                            mainStr += rate.PadLeft(15, ' ');
                        }
                        mainStr += "\n";

                        //  dt_griddiaplay.Rows.Add("Payment Amount", amount_string, "", "");

                        findCenterPosition = (double.Parse(charPerLine) - 15);
                        topLine1 = "Account Limit";
                        rate = String.Format("{0:0.00}", (double.Parse(txtHACAccountLimit.Text.ToString())));
                        amount_string = rate.ToString();
                        mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                        if (rate.Length <= 15)
                        {
                            mainStr += rate.PadLeft(15, ' ');
                        }
                        mainStr += "\n";

                        //  dt_griddiaplay.Rows.Add("Account Limit", String.Format("{0:0.00}", (double.Parse(txtHACAccountLimit.Text.ToString()))), "", "");

                        findCenterPosition = (double.Parse(charPerLine) - 15);
                        topLine1 = "Balance Due";
                        rate = txtHACBalanceDue.Text.ToString().Trim();
                        amount_string = rate.ToString();
                        mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                        if (rate.Length <= 15)
                        {
                            mainStr += rate.PadLeft(15, ' ');
                        }
                        mainStr += "\n";
                        //break;

                        // dt_griddiaplay.Rows.Add("Balance Due", amount_string, "", "");


                        findCenterPosition = (double.Parse(charPerLine) - 15);
                        topLine1 = "Available Credit";
                        rate = (txtHACAvailableCredit.Text.Trim() != "") ? ((double.Parse(txtHACAvailableCredit.Text.Trim()) > 0) ? txtHACAvailableCredit.Text.Trim() : "0.00") : "0.00";
                        amount_string = rate.ToString();
                        mainStr += topLine1.PadRight((int)findCenterPosition, ' ');
                        if (rate.Length <= 15)
                        {
                            mainStr += rate.PadLeft(15, ' ');
                        }
                        mainStr += "\n";
                        //break;

                        //  dt_griddiaplay.Rows.Add("Available Credit", amount_string, "", "");

                        // lblPrint.Content = mainStr;
                        //Print Line Below Header

                        // print lint below logo

                        lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                        if (lineBelowLogo == "No Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += " ";
                            }
                            mainStr += "\n";
                        }
                        if (lineBelowLogo == "Single Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "-";
                            }
                            mainStr += "\n";
                        }
                        else if (lineBelowLogo == "Double Line")
                        {
                            for (int j = 0; j < double.Parse(charPerLine); j++)
                            {
                                mainStr += "=";
                            }
                            mainStr += "\n";
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                MyMessageBox1.ShowBox(ex.Message, "Warning");
            }
        }
        private void btnPaymentPrint_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (txtHACName.Text.Trim() != "")
                {
                    if (txtHACPaymentAmt.Text.Trim() != "")
                    {

                        funPaymentPrint();
                        btnPrint_Click(sender, e);
                    }
                    else
                    {
                        MyMessageBox.ShowBox("Enter Payment Amount", "Warning");
                    }
                }
                else
                {
                    MyMessageBox.ShowBox("Select House Account Name", "Warning");
                }
            }
            catch (Exception ex)
            {
                MyMessageBox1.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnHACPaymentINDetailRpt_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                dtHACPayment.Rows.Clear();
                gridItemsManager.ColumnHeadersVisible = true;
                gtot = 0.00;
                tIndividualReportType = "House Account Payment";

                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select distinct(Ledger_table.Ledger_name) as Card_Name from PaymentDetail_table,Ledger_table where PaymentDetail_table.Ledger_no=Ledger_table.Ledger_no and Ledger_table.Ledger_groupno='32' and   endOfDay between @tFrom and @tTo order by Ledger_name ASC", con);
                cmd.Parameters.AddWithValue("@tFrom", dtpFrom.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tTo", dtpTo.SelectedDate.Value);
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                string tLoadLetter = "";
                pnlCreditCardList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    tLoadLetter = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 25;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    newBtn.Name = "HACL" + i;
                    newBtn.Width = 400;
                    newBtn.Height = 65;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    newBtn.Click += new RoutedEventHandler(newBtnGroupChar_Click);
                    pnlCreditCardList.Children.Add(newBtn);
                    pnlCreditCardList.Height = (i * 65) + 50;
                    funCardDetailLoad(dtNew.Rows[mn]["Card_Name"].ToString());
                }
                dtHACPayment.Rows.Add("Grand Total ", "", string.Format("{0:0.00}", gtot));
                funIndividualReportPrint();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }


        }

        private void txtSupplierPaymentAmt_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                double tPaymentAmt = 0.00;
                double tBalanceAmt = (txtSupplierBalanceDue.Text.Trim() == "") ? 0.00 : double.Parse(txtSupplierBalanceDue.Text.Trim());
                if (txtSupplierPaymentAmt.Text.Trim() != "" && txtSupName.Text.Trim() != "")
                {
                    if (txtSupplierPaymentAmt.Text.Trim() != "")
                    {
                        tPaymentAmt = double.Parse(txtSupplierPaymentAmt.Text.Trim());
                    }

                    double tLimitAmt = 0.00;
                    txtSupplierAvailableCredit.Text = string.Format("{0:0.00}", (tLimitAmt + (tBalanceAmt - tPaymentAmt)));
                }
                else
                {
                    double tLimitAmt = 0.00;

                    txtSupplierAvailableCredit.Text = string.Format("{0:0.00}", (tLimitAmt + (tBalanceAmt - tPaymentAmt)));
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }

        }

        private void btnSupplierCodeLoad_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                frmKeyBoard frm = new frmKeyBoard();
                _Class.clsVariables.tVoidActionType = "PAYMENTOUT";
                if (_Class.clsVariables.tVoidActionType == "PAYMENTOUT")
                {
                    frm.SalesCreationEventHandlerNew += new EventHandler(CloseEventSupplierCode);
                    frm.ShowDialog();
                    txtSupCode.Focus();
                    //  txtEnterValue.se.Select(txtEnterValue.Password.Length, 0);
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message);
            }
        }

        private void txtSupCode_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.Key == Key.Enter)
                {
                    funSupplierCodeSearch();
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnPaymentOutDetailRptt_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                dtHACPayment.Rows.Clear();
                gridItemsManager.ColumnHeadersVisible = true;


                tIndividualReportType = "House Account Payment";

                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select distinct(Ledger_table.Ledger_name) as Card_Name from PaymentDetail_table,Ledger_table where PaymentDetail_table.Ledger_no=Ledger_table.Ledger_no and Ledger_table.Ledger_groupno='31' and   endOfDay between @tFrom and @tTo order by Ledger_name ASC", con);
                cmd.Parameters.AddWithValue("@tFrom", dtpFrom.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tTo", dtpTo.SelectedDate.Value);
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                string tLoadLetter = "";
                pnlCreditCardList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    tLoadLetter = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 25;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    newBtn.Name = "HACLPayOut" + i;
                    newBtn.Width = 400;
                    newBtn.Height = 65;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    newBtn.Click += new RoutedEventHandler(newBtnGroupCharPayOut_Click);
                    pnlCreditCardList.Children.Add(newBtn);
                    pnlCreditCardList.Height = (i * 65) + 50;
                    funCardDetailLoad(dtNew.Rows[mn]["Card_Name"].ToString());
                }
                funIndividualReportPrint();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void newBtnGroupCharPayOut_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                dtCash.Rows.Clear();
                dtHACPayment.Rows.Clear();
                gridItemsManager.ColumnHeadersVisible = true;

                //Getting Click Button Name values here:
                Button clickedButton = (Button)sender;
                funCardDetailLoad(clickedButton.Content.ToString());
                funIndividualReportPrint();

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }

        }

        private void btnExpenseDetailRpt_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                dtHACPayment.Rows.Clear();
                gridItemsManager.ColumnHeadersVisible = true;


                tIndividualReportType = "House Account Payment";

                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select distinct(Ledger_table.Ledger_name) as Card_Name from PaymentDetail_table,Ledger_table where PaymentDetail_table.Ledger_no=Ledger_table.Ledger_no and Ledger_table.Ledger_groupno in(25,26) and   endOfDay between @tFrom and @tTo order by Ledger_name ASC", con);
                cmd.Parameters.AddWithValue("@tFrom", dtpFrom.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tTo", dtpTo.SelectedDate.Value);
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                string tLoadLetter = "";
                pnlCreditCardList.Children.Clear();
                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    Button newBtn = new Button();
                    newBtn.Content = dtNew.Rows[mn]["Card_Name"].ToString();
                    tLoadLetter = dtNew.Rows[mn]["Card_Name"].ToString();
                    newBtn.FontSize = 25;
                    newBtn.HorizontalContentAlignment = HorizontalAlignment.Center;
                    newBtn.HorizontalAlignment = HorizontalAlignment.Center;
                    newBtn.VerticalAlignment = VerticalAlignment.Center;
                    newBtn.Name = "HACLPayExpenses" + i;
                    newBtn.Width = 400;
                    newBtn.Height = 65;
                    newBtn.Margin = new Thickness(1, 1, 1, 1);
                    newBtn.Click += new RoutedEventHandler(newBtnGroupCharPayExpencess_Click);
                    pnlCreditCardList.Children.Add(newBtn);
                    pnlCreditCardList.Height = (i * 65) + 50;
                    funCardDetailLoad(dtNew.Rows[mn]["Card_Name"].ToString());
                }
                funIndividualReportPrint();
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void newBtnGroupCharPayExpencess_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                dtCash.Rows.Clear();
                dtHACPayment.Rows.Clear();
                gridItemsManager.ColumnHeadersVisible = true;
                //Getting Click Button Name values here:
                Button clickedButton = (Button)sender;
                funCardDetailLoad(clickedButton.Content.ToString());
                funIndividualReportPrint();

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnItemExcelExportRpt_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                btnItemReport_Click(sender, e);
                //  btnPrint_Click(sender, e);
                tPrintingType = "ITEMTREPORT";
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void btnEODExcelExportRpt_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                btnEndOfDayReport_Click(sender, e);
                //  btnPrint_Click(sender, e);
                tPrintingType = "EODREPORT";
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        public void funTaxReport(DatePicker tFromDate, DatePicker tToDate)
        {
            try
            {
                //Inclusive Exclusive Tax Calculation 
                //Return Qty Caluclation

                tPrintingType = "";
                tReportTitle = "TAX REPORT";
                dtTaxReport.Rows.Clear();

                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();
                // SqlCommand cmdVoid = new SqlCommand("select smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno", con);
                string tCmdVoid = "";
                string tCmdReturn = "";
                if (cmbCounterName.Text == "All Counter")
                {


                    tCmdVoid = @"Select salmas_table.smas_billno as BillNo,convert(numeric(18,2),SUM(stktrn_table.tax_amt)) as Tax_Amt
from SalMas_table, stktrn_table where salmas_table.smas_no=stktrn_table.strn_no and smas_Cancel=0 and smas_rtno=0 and strn_type=1 and
smas_billdate between @tDate and @tToDate group by smas_billno,Smas_Gross,stktrn_table.strn_remarks order by smas_billno";

                    tCmdReturn = @"Select salMas_table.smas_billno as BillNo,  Result.Tax_Amt from salMas_table,
(Select SalMas_table.smas_rtno as BillNo,convert(numeric(18,2),SUM(tax_amt)) as Tax_Amt from SalMas_table, stktrn_table where salmas_table.smas_no=stktrn_table.strn_no and smas_Cancel=0 and smas_rtno<>0 and strn_type=2 and smas_billdate between @tDate and @tToDate group by smas_rtno,Smas_Gross ) as Result where Result.BillNo=salMas_table.smas_no";
                }
                else
                {

                    tCmdVoid = @"Select salmas_table.smas_billno as BillNo,convert(numeric(18,2),SUM(stktrn_table.tax_amt)) as Tax_Amt
from SalMas_table, stktrn_table where salmas_table.ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and salmas_table.smas_no=stktrn_table.strn_no and smas_Cancel=0 and smas_rtno=0 and strn_type=1 and
smas_billdate between @tDate and @tToDate group by smas_billno,Smas_Gross,stktrn_table.strn_remarks order by smas_billno";

                    tCmdReturn = @"Select salMas_table.smas_billno as BillNo, Result.Tax_Amt from salMas_table,
(Select SalMas_table.smas_rtno as BillNo,convert(numeric(18,2),SUM(tax_amt)) as Tax_Amt from SalMas_table, stktrn_table where salmas_table.ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and salmas_table.smas_no=stktrn_table.strn_no and smas_Cancel=0 and smas_rtno<>0 and strn_type=2 and smas_billdate between @tDate and @tToDate group by smas_rtno,Smas_Gross ) as Result where Result.BillNo=salMas_table.smas_no";
                }
                DataTable dtReturnTax = new DataTable();
                dtReturnTax.Rows.Clear();
                SqlCommand cmdReturn = new SqlCommand(tCmdReturn, con);
                cmdReturn.Parameters.AddWithValue("@tDate", tFromDate.SelectedDate.Value);
                cmdReturn.Parameters.AddWithValue("@tToDate", tToDate.SelectedDate.Value);
                cmdReturn.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adpRetrun = new SqlDataAdapter(cmdReturn);
                adpRetrun.Fill(dtReturnTax);

                SqlCommand cmdVoid = new SqlCommand(tCmdVoid, con);
                cmdVoid.Parameters.AddWithValue("@tDate", tFromDate.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@tToDate", tToDate.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);
                double tGrossAmt = 0.00, tTaxAmt = 0.00, tTotalAmt = 0.00, tReturnTax = 0;

                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    tReturnTax = 0;
                    DataRow[] dtReturnRow = dtReturnTax.Select("BillNo='" + dtVoid.Rows[i]["BillNo"].ToString() + "'");
                    for (int mn = 0; mn < dtReturnRow.Length; mn++)
                    {
                        tReturnTax += (dtReturnRow[mn]["Tax_Amt"].ToString().Trim() == "") ? 0.00 : double.Parse(dtReturnRow[mn]["Tax_Amt"].ToString());
                    }

                    //tGrossAmt += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0.00 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    tTaxAmt += (dtVoid.Rows[i]["Tax_Amt"].ToString().Trim() == "") ? 0.00 : (double.Parse(dtVoid.Rows[i]["Tax_Amt"].ToString()) - tReturnTax);
                    // tTotalAmt += (dtVoid.Rows[i]["Total"].ToString().Trim() == "") ? 0.00 : double.Parse(dtVoid.Rows[i]["Total"].ToString());
                    dtTaxReport.Rows.Add(dtVoid.Rows[i]["BillNo"].ToString(), string.Format("{0:0.00}", Convert.ToDouble(dtVoid.Rows[i]["Tax_Amt"].ToString()) - tReturnTax));
                }
                if (dtVoid.Rows.Count > 0)
                {
                    dtTaxReport.Rows.Add("", "");
                    //dtTaxReport.Rows.Add("", string.Format("{0:0.00}", tGrossAmt), string.Format("{0:0.00}", tTaxAmt), string.Format("{0:0.00}", tTotalAmt));
                    dtTaxReport.Rows.Add("", string.Format("{0:0.00}", tTaxAmt));
                }
                gridItemsManager.ColumnHeadersVisible = true;
                gridItemsManager.DataSource = dtTaxReport;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 80;
                //gridItemsManager.Columns[2].Width = 60;
                //gridItemsManager.Columns[3].Width = 60;

                funPrintHeaderPart();
                charPerLine = _Class.clsVariables.tempGCharactersPerLine;// dtPrint.Rows[i]["Property"].ToString();
                topLine1 = tReportTitle;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "/" + dpFrom.SelectedDate.Value.Month + "/" + dpFrom.SelectedDate.Value.Year + " - " + dpTo.SelectedDate.Value.Day + "/" + dpTo.SelectedDate.Value.Month + "/" + dpTo.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                string tempStr = null;
                //if (dtPrint.Rows[i5]["Describ"].ToString() == "Print Qunatity and Rate")
                //{
                string tQtyHeading = "";
                tQtyHeading = "BillNo";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 8));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                //tQtyHeading += "        ";
                tQtyHeading += " Tax_Amt";
                //tQtyHeading += "        ";
                mainStr += tQtyHeading;
                mainStr += "\n";
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //    }
                //}
                for (int mn = 0; mn < dtTaxReport.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;
                    //for (int z = 0; z < 4; z++)
                    //{
                    //    if (dtItemProfit.Rows[mn][z].ToString().Trim() == "")
                    //    {
                    //        isChk = true;
                    //        break;
                    //    }
                    //}
                    if (isChk == false)
                    {
                        for (int i = 0; i <= 1; i++)
                        {
                            tempStr = dtTaxReport.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 8);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 8; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 9)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            if (i == 2)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            if (i == 3)
                            {
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        DataTable dtNameTaxReport = new DataTable();
        public void funNamewiseTaxReport(DatePicker tFromDate, DatePicker tToDate, string tReportType)
        {
            try
            {
                tPrintingType = "";
                string tQuery = "";
                string tQueryReturn = "";
                if (tReportType == "Item")
                {
                    tReportTitle = "ITEMWISE TAX REPORT";
                    tQuery = "Select Item_table.Item_name as Name,CONVERT(numeric(18,2),sum(Tax_Amt)) as TaxAmount from item_table,stktrn_table where item_table.Item_no=stktrn_table.item_no and stktrn_table.Strn_Cancel=0 and stktrn_table.strn_rtno=0 and strn_type=1 and stktrn_table.strn_date between @tDate and @tToDate group by stktrn_table.item_no,Item_table.Item_name having SUM(Tax_Amt)>0";
                    tQueryReturn = "Select Item_table.Item_name as Name,CONVERT(numeric(18,2),sum(Tax_Amt)) as TaxAmount from item_table,stktrn_table where item_table.Item_no=stktrn_table.item_no and stktrn_table.Strn_Cancel=0 and stktrn_table.strn_rtno<>0 and strn_type=2 and stktrn_table.strn_date between @tDate and @tToDate group by stktrn_table.item_no,Item_table.Item_name having SUM(Tax_Amt)>0";
                }
                else
                {
                    tReportTitle = "GROUPWISE TAX REPORT";
                    tQuery = "Select Item_Grouptable.Item_groupname as Name,CONVERT(numeric(18,2),sum(Tax_Amt)) as TaxAmount from Item_Grouptable,item_table,stktrn_table where item_table.item_Groupno=Item_Grouptable.Item_groupno and item_table.Item_no=stktrn_table.item_no and stktrn_table.Strn_Cancel=0 and stktrn_table.strn_rtno=0 and strn_type=1 and stktrn_table.strn_date between @tDate and @tToDate group by Item_Grouptable.Item_groupno, Item_Grouptable.Item_groupname having SUM(Tax_Amt)>0";
                    tQueryReturn = "Select Item_Grouptable.Item_groupname as Name,CONVERT(numeric(18,2),sum(Tax_Amt)) as TaxAmount from Item_Grouptable,item_table,stktrn_table where item_table.item_Groupno=Item_Grouptable.Item_groupno and item_table.Item_no=stktrn_table.item_no and stktrn_table.Strn_Cancel=0 and stktrn_table.strn_rtno<>0 and strn_type=2 and stktrn_table.strn_date between @tDate and @tToDate group by Item_Grouptable.Item_groupno, Item_Grouptable.Item_groupname having SUM(Tax_Amt)>0";
                }
                dtNameTaxReport.Rows.Clear();

                DataTable dtReturn = new DataTable();
                dtReturn.Rows.Clear();
                // SqlCommand cmdVoid = new SqlCommand("select smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno", con);
                SqlCommand cmdReturnTax = new SqlCommand(tQueryReturn, con);
                cmdReturnTax.Parameters.AddWithValue("@tDate", tFromDate.SelectedDate.Value);
                cmdReturnTax.Parameters.AddWithValue("@tToDate", tToDate.SelectedDate.Value);
                SqlDataAdapter adpReturnTax = new SqlDataAdapter(cmdReturnTax);
                adpReturnTax.Fill(dtReturn);

                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();
                // SqlCommand cmdVoid = new SqlCommand("select smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno", con);
                SqlCommand cmdVoid = new SqlCommand(tQuery, con);
                cmdVoid.Parameters.AddWithValue("@tDate", tFromDate.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@tToDate", tToDate.SelectedDate.Value);
                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);
                double tTotalAmt = 0.00, tReturnTax = 0;
                string tItemGroupName = "";
                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    tReturnTax = 0;
                    tItemGroupName = Convert.ToString(dtVoid.Rows[i]["Name"].ToString());
                    tItemGroupName = (tItemGroupName.IndexOf("'") == -1) ? tItemGroupName : tItemGroupName.Replace("'", "''");
                    DataRow[] dtReturnTaxRow = dtReturn.Select("Name='" + tItemGroupName + "'");
                    for (int mn = 0; mn < dtReturnTaxRow.Length; mn++)
                    {
                        tReturnTax += (dtReturnTaxRow[mn]["TaxAmount"].ToString().Trim() == "") ? 0.00 : double.Parse(dtReturnTaxRow[mn]["TaxAmount"].ToString());
                    }
                    // tGrossAmt += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0.00 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    // tTaxAmt += (dtVoid.Rows[i]["Tax_Amt"].ToString().Trim() == "") ? 0.00 : double.Parse(dtVoid.Rows[i]["Tax_Amt"].ToString());
                    tTotalAmt += (dtVoid.Rows[i]["TaxAmount"].ToString().Trim() == "") ? 0.00 : Convert.ToDouble(dtVoid.Rows[i]["TaxAmount"].ToString()) - tReturnTax;
                    dtNameTaxReport.Rows.Add(dtVoid.Rows[i]["Name"].ToString(), string.Format("{0:0.00}", Convert.ToDouble(dtVoid.Rows[i]["TaxAmount"].ToString()) - tReturnTax));


                }
                if (dtVoid.Rows.Count > 0)
                {
                    dtNameTaxReport.Rows.Add("", "");
                    dtNameTaxReport.Rows.Add("Total", string.Format("{0:0.00}", tTotalAmt));
                }
                gridItemsManager.ColumnHeadersVisible = true;
                gridItemsManager.DataSource = dtNameTaxReport;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 80;


                funPrintHeaderPart();
                charPerLine = _Class.clsVariables.tempGCharactersPerLine;// dtPrint.Rows[i]["Property"].ToString();
                topLine1 = tReportTitle;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "/" + dpFrom.SelectedDate.Value.Month + "/" + dpFrom.SelectedDate.Value.Year + " - " + dpTo.SelectedDate.Value.Day + "/" + dpTo.SelectedDate.Value.Month + "/" + dpTo.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

                string tempStr = null;
                //if (dtPrint.Rows[i5]["Describ"].ToString() == "Print Qunatity and Rate")
                //{
                string tQtyHeading = "";
                tQtyHeading = "Name";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 10));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += " TaxAmount";
                mainStr += tQtyHeading;
                mainStr += "\n";
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //    }
                //}
                for (int mn = 0; mn < dtNameTaxReport.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;
                    //for (int z = 0; z < 4; z++)
                    //{
                    //    if (dtItemProfit.Rows[mn][z].ToString().Trim() == "")
                    //    {
                    //        isChk = true;
                    //        break;
                    //    }
                    //}
                    if (isChk == false)
                    {
                        for (int i = 0; i <= 1; i++)
                        {
                            tempStr = dtNameTaxReport.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 10);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 10; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 11)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            if (i == 2)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            if (i == 3)
                            {
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnTaxReport_Click(object sender, RoutedEventArgs e)
        {
            funTaxReport(dpBillDate, dpBillDate);
        }

        private void btnSalesTaxReport_Click(object sender, RoutedEventArgs e)
        {

            funTaxReport(dpFrom, dpTo);
        }

        private void btnItemwiseTaxReport_Click(object sender, RoutedEventArgs e)
        {
            funNamewiseTaxReport(dpFrom, dpTo, "Item");
        }

        private void btnGroupwiseTaxReport_Click(object sender, RoutedEventArgs e)
        {
            funNamewiseTaxReport(dpFrom, dpTo, "Group");
        }

        private void btnFreeItemReport_Click(object sender, RoutedEventArgs e)
        {
            funFreeItemReport(dpBillDate);
        }


        DataTable dtFree = new DataTable();
        public void funFreeItemReport(DatePicker tFromDate)
        {
            try
            {
                if (dtFree.Columns.Count == 0)
                {
                    dtFree.Columns.Add("Item_name", typeof(string));
                    dtFree.Columns.Add("Disc_Amt", typeof(string));
                }
                dtFree.Rows.Clear();
                DataTable dtTempId = new DataTable();
                DataTable dtTempSno = new DataTable();

                dtTempId.Rows.Clear();
                dtTempSno.Rows.Clear();



                string tCmdFreeItem = "";
                string tCmdSum = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    // tCmdFreeItem = "Select Item_name, sum(Disc_Amt) as Disc_Amt from stktrn_table, Item_table where Item_table.Item_no=stktrn_table.Item_no and strn_cancel=0 and strn_rtno=0 and strn_date=@tFromDate group by Item_table.Item_no, Item_table.Item_name having sum(Disc_Amt)>0";
                    tCmdFreeItem = @"
select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as Disc,convert(numeric(18,2), (Disc1.OthDisc-Disc2.ROthDisc)) as OthDisc,convert(numeric(18,2), (Disc1.SDisc-Disc2.RSDisc)) as SDisc,convert(numeric(18,2), (Disc1.TotDisc-Disc2.RTotDisc)) as TotDisc from 
(Select (case when SUM(disc_Amt) is null then 0 else SUM(disc_Amt) end) as Disc,(case when SUM(Othdisc_Amt) is null then 0 else SUM(Othdisc_Amt) end) as OthDisc,(case when SUM(spl_discamt) is null then 0 else SUM(spl_discamt) end) as SDisc, (case when SUM(Disc_Amt+Othdisc_Amt+spl_discamt) is null then 0 else SUM(Disc_Amt+Othdisc_Amt+spl_discamt) end) as TotDisc  from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date =@tFromDate) as Disc1,
(Select (case when SUM(disc_Amt) is null then 0 else SUM(disc_Amt) end) as RDisc,(case when SUM(Othdisc_Amt) is null then 0 else SUM(Othdisc_Amt) end) as ROthDisc,(case when SUM(spl_discamt) is null then 0 else SUM(spl_discamt) end) as RSDisc,(case when SUM(Disc_Amt+Othdisc_Amt+spl_discamt) is null then 0 else SUM(Disc_Amt+Othdisc_Amt+spl_discamt) end) as RTotDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date= @tFromDate) as Disc2";
                    tCmdSum = "Select sum(Amount) as Disc_Amt from DiscountDetail_table, SalMas_table where SalMas_table.smas_billno=DiscountDetail_table.Bill_No and smas_cancel=0 and smas_rtno=0 and smas_billdate=@tFromDate";
                }
                else
                {
                    //tCmdFreeItem = "Select Item_name, sum(Disc_Amt) as Disc_Amt from stktrn_table, Item_table where Item_table.Item_no=stktrn_table.Item_no and strn_cancel=0 and strn_rtno=0 and strn_date=@tFromDate and ctr_no=(Select ctr_no from Counter_table where ctr_Name=@tCounter) group by Item_table.Item_no, Item_table.Item_name having sum(Disc_Amt)>0";
                    tCmdFreeItem = @"
select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as Disc,convert(numeric(18,2), (Disc1.OthDisc-Disc2.ROthDisc)) as OthDisc,convert(numeric(18,2), (Disc1.SDisc-Disc2.RSDisc)) as SDisc,convert(numeric(18,2), (Disc1.TotDisc-Disc2.RTotDisc)) as TotDisc from 
(Select (case when SUM(disc_Amt) is null then 0 else SUM(disc_Amt) end) as Disc,(case when SUM(Othdisc_Amt) is null then 0 else SUM(Othdisc_Amt) end) as OthDisc,(case when SUM(spl_discamt) is null then 0 else SUM(spl_discamt) end) as SDisc, (case when SUM(Disc_Amt+Othdisc_Amt+spl_discamt) is null then 0 else SUM(Disc_Amt+Othdisc_Amt+spl_discamt) end) as TotDisc  from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date =@tFromDate and ctr_no=(Select ctr_no from Counter_table where ctr_Name=@tCounter)) as Disc1,
(Select (case when SUM(disc_Amt) is null then 0 else SUM(disc_Amt) end) as RDisc,(case when SUM(Othdisc_Amt) is null then 0 else SUM(Othdisc_Amt) end) as ROthDisc,(case when SUM(spl_discamt) is null then 0 else SUM(spl_discamt) end) as RSDisc,(case when SUM(Disc_Amt+Othdisc_Amt+spl_discamt) is null then 0 else SUM(Disc_Amt+Othdisc_Amt+spl_discamt) end) as RTotDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date= @tFromDate and ctr_no=(Select ctr_no from Counter_table where ctr_Name=@tCounter)) as Disc2";
                    tCmdSum = "Select sum(Amount) as Disc_Amt from DiscountDetail_table, SalMas_table where SalMas_table.smas_billno=DiscountDetail_table.Bill_No and smas_cancel=0 and smas_rtno=0 and smas_billdate=@tFromDate and ctr_no=(Select ctr_no from Counter_table where ctr_Name=@tCounter)";
                }
                SqlCommand cmdFreeItem = new SqlCommand(tCmdFreeItem, con);
                cmdFreeItem.Parameters.AddWithValue("@tFromDate", dpBillDate.SelectedDate.Value);
                cmdFreeItem.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adpFreeItem = new SqlDataAdapter(cmdFreeItem);
                adpFreeItem.Fill(dtTempId);



                double tDisc = 0.00, tOthDisc = 0.00, tSDisc = 0.00, tTotDisc = 0.00;

                for (int i = 0; i < dtTempId.Rows.Count; i++)
                {
                    tDisc += (Convert.ToString(dtTempId.Rows[i]["Disc"]) == "") ? 0.00 : Convert.ToDouble(Convert.ToString(dtTempId.Rows[i]["Disc"]));
                    tOthDisc += (Convert.ToString(dtTempId.Rows[i]["OthDisc"]) == "") ? 0.00 : Convert.ToDouble(Convert.ToString(dtTempId.Rows[i]["OthDisc"]));
                    tSDisc += (Convert.ToString(dtTempId.Rows[i]["SDisc"]) == "") ? 0.00 : Convert.ToDouble(Convert.ToString(dtTempId.Rows[i]["SDisc"]));
                    tTotDisc += (Convert.ToString(dtTempId.Rows[i]["TotDisc"]) == "") ? 0.00 : Convert.ToDouble(Convert.ToString(dtTempId.Rows[i]["TotDisc"]));
                }
                dtFree.Rows.Add("", "");
                if (dtTempId.Rows.Count > 0)
                {
                    dtFree.Rows.Add("Item or Groupwise Discount : ", string.Format("{0:0.00}", tDisc));
                    dtFree.Rows.Add("Other Discount  :", string.Format("{0:0.00}", tOthDisc));
                    dtFree.Rows.Add("Special Discount  : ", string.Format("{0:0.00}", tSDisc));
                    dtFree.Rows.Add("", "");
                    dtFree.Rows.Add("Total Discount Amt : ", string.Format("{0:0.00}", tTotDisc));
                }


                gridItemsManager.DataSource = dtFree;
                gridItemsManager.ColumnHeadersVisible = true;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 90;

                funPrintHeaderPart();

                topLine1 = "DISCOUNT REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                ds.Tables.Clear();
                //  mainStrSub = "";
                dt_griddiaplay.Rows.Clear();

                string tempStr = null;
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 8));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += "DiscAmt";
                // tQtyHeading += "U/Rate ";
                //tQtyHeading += "   Profit";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                for (int mn = 0; mn < dtFree.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;

                    if (isChk == false)
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            tempStr = dtFree.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 8);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 8; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 4)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        double Totnoofreceipt = 0.00, totSubTotal = 0.00, TotRefundedAmt = 0.00, totDiscount = 0.00, TotGst = 0.00, TotGrossSales = 0.00, TotsalProdit = 0.00, TotProCost = 0.00;
        private void btnTotalSalesReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Totnoofreceipt = 0.00;
                totSubTotal = 0.00;
                TotRefundedAmt = 0.00;
                totDiscount = 0.00;
                TotGst = 0.00;
                TotGrossSales = 0.00;
                TotsalProdit = 0.00;
                TotProCost = 0.00;

                SqlCommand cmd = new SqlCommand("select (case when (Sum(salrecv_table.SalRecv_Amt)) is null then 0 else Sum(salrecv_table.SalRecv_Amt) end)  As Total from salrecv_table join salmas_table on salmas_table.smas_billno=salrecv_table.SalRecv_Salno Where  salmas_table.Smas_rtno=0 and salmas_table.smas_billdate>=@FromDate and salmas_table.smas_billdate<=@ToDate", con);
                cmd.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmd.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);
                SqlDataAdapter adpTsales = new SqlDataAdapter(cmd);
                DataTable dtItemTotalSales = new DataTable();
                dtItemTotalSales.Rows.Clear();
                adpTsales.Fill(dtItemTotalSales);
                if (dtItemTotalSales.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dtItemTotalSales.Rows[0]["Total"].ToString()))
                    {
                        totSubTotal = Convert.ToDouble(dtItemTotalSales.Rows[0]["Total"].ToString());
                    }
                }
                //Total Discount
                SqlCommand cmdDiscount = new SqlCommand(@"select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as DiscountAmt from 
(Select (case when (SUM(disc_amt+Othdisc_Amt+spl_discamt)) is null then 0 else (SUM(disc_amt+Othdisc_Amt+spl_discamt)) end) as Disc from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate ) as Disc1,
(Select (case when (SUM(disc_amt+Othdisc_Amt+spl_discamt)) is null then 0 else (SUM(disc_amt+Othdisc_Amt+spl_discamt)) end) as RDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate ) as Disc2", con);
                cmdDiscount.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmdDiscount.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);
                SqlDataAdapter adpTDiscountsales = new SqlDataAdapter(cmdDiscount);

                DataTable dtItemTotalDiscountSales = new DataTable();
                dtItemTotalDiscountSales.Rows.Clear();
                adpTDiscountsales.Fill(dtItemTotalDiscountSales);
                if (dtItemTotalDiscountSales.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dtItemTotalDiscountSales.Rows[0]["DiscountAmt"].ToString()))
                    {
                        totDiscount = Convert.ToDouble(dtItemTotalDiscountSales.Rows[0]["DiscountAmt"].ToString());
                    }
                }
                //TotalGst(Tax) Geting

                //                SqlCommand cmdGst = new SqlCommand(@"select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as GstAmt from 
                //(Select (case when SUM(tax_amt) is null then 0 else SUM(tax_amt) end) as Disc from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate ) as Disc1,
                //(Select (case when SUM(tax_amt) is null then 0 else SUM(tax_amt) end) as RDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate) as Disc2", con);

                SqlCommand cmdGst = new SqlCommand(@"select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as GstAmt from 
(Select (case when SUM(amount*7/107) is null then 0 else SUM(amount*7/107) end) as Disc from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate ) as Disc1,
(Select (case when SUM(amount*7/107) is null then 0 else SUM(amount*7/107) end) as RDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate) as Disc2", con);

                SqlDataAdapter adpGst = new SqlDataAdapter(cmdGst);
                cmdGst.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmdGst.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);
                DataTable dtItemTotalGSTSales = new DataTable();
                dtItemTotalGSTSales.Rows.Clear();
                adpGst.Fill(dtItemTotalGSTSales);
                if (dtItemTotalGSTSales.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dtItemTotalGSTSales.Rows[0]["GstAmt"].ToString()))
                    {
                        TotGst = Convert.ToDouble(dtItemTotalGSTSales.Rows[0]["GstAmt"].ToString());

                        //For Reporting Purpose
                        //TotGst = 11425.00;
                    }
                }
                //Refundable Amount:
                DataTable dtRefundable = new DataTable();
                SqlCommand cmdRefundableAmt = new SqlCommand("Select (case when SUM(Net_Amt) is null then 0 else SUM(Net_Amt) end) as ReturnAmount from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate", con);
                cmdRefundableAmt.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmdRefundableAmt.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);
                SqlDataAdapter adpRefundableAmt = new SqlDataAdapter(cmdRefundableAmt);
                dtRefundable.Rows.Clear();
                adpRefundableAmt.Fill(dtRefundable);
                if (dtRefundable.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dtRefundable.Rows[0]["ReturnAmount"].ToString()))
                    {
                        TotRefundedAmt = Convert.ToDouble(dtRefundable.Rows[0]["ReturnAmount"].ToString());
                    }
                }
                //Total Bill No on That Date:
                SqlCommand cmdBillno = new SqlCommand("select count(*) as BillNo from salmas_table where smas_rtno=0 and smas_Cancel=0 and smas_billdate>=@FromDate and smas_billdate<=@ToDate", con);
                cmdBillno.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmdBillno.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);
                SqlDataAdapter adpbillno = new SqlDataAdapter(cmdBillno);
                DataTable dtbillno = new DataTable();
                dtbillno.Rows.Clear();
                adpbillno.Fill(dtbillno);
                if (dtbillno.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dtbillno.Rows[0]["BillNo"].ToString()))
                    {
                        Totnoofreceipt = Convert.ToDouble(dtbillno.Rows[0]["BillNo"].ToString());
                    }
                }
                //Total Sales Profit:
                SqlCommand cmdSalesProfit = new SqlCommand(@"Select SUM((Profit/nt_qty)*(nt_qty-rnt_qty)) as TotalProfit from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate", con);
                cmdSalesProfit.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmdSalesProfit.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);
                DataTable dtsalesprofit = new DataTable();
                dtsalesprofit.Rows.Clear();
                SqlDataAdapter adpsalesprofit = new SqlDataAdapter(cmdSalesProfit);
                adpsalesprofit.Fill(dtsalesprofit);
                if (dtsalesprofit.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dtsalesprofit.Rows[0]["TotalProfit"].ToString()))
                    {
                        TotsalProdit = Convert.ToDouble(dtsalesprofit.Rows[0]["TotalProfit"].ToString());
                    }
                }
                //Total Product Cost
                SqlCommand cmdtotProCost = new SqlCommand("select convert(numeric(18,2),sum(((Net_Amt/nt_qty)-(Profit/nt_qty))*(nt_qty-rnt_qty))) As TotalProductCost from stktrn_table where strn_type=1 and strn_rtno=0 and strn_cancel=0 and strn_date>=@FromDate and strn_date<=@Todate", con);
                cmdtotProCost.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmdtotProCost.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);
                SqlDataAdapter apdtotProCost = new SqlDataAdapter(cmdtotProCost);
                DataTable dtTotProCost = new DataTable();
                dtTotProCost.Rows.Clear();
                apdtotProCost.Fill(dtTotProCost);
                if (dtTotProCost.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dtTotProCost.Rows[0]["TotalProductCost"].ToString()))
                    {
                        TotProCost = Convert.ToDouble(dtTotProCost.Rows[0]["TotalProductCost"].ToString());
                    }
                }


                double totGrosSales = 0.00;

                //Total Gross Sales
                SqlCommand cmdtotGross = new SqlCommand(@"select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as GrossSales from 
(Select (case when SUM(Amount) is null then 0 else SUM(Amount) end) as Disc from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate ) as Disc1,
(Select (case when SUM(Amount) is null then 0 else SUM(Amount) end) as RDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate) as Disc2", con);
                cmdtotGross.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmdtotGross.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);
                SqlDataAdapter apdtotGross = new SqlDataAdapter(cmdtotGross);
                DataTable dtTotGross = new DataTable();
                dtTotGross.Rows.Clear();
                apdtotGross.Fill(dtTotGross);
                if (dtTotGross.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dtTotGross.Rows[0]["GrossSales"].ToString()))
                    {
                        totGrosSales = Convert.ToDouble(dtTotGross.Rows[0]["GrossSales"].ToString()) - TotGst;

                        // For Reporting Purpose
                        //totGrosSales = 163208.50;
                    }
                }


                double totNetSales = 0.00;

                //Total Net Sales
                SqlCommand cmdtotNet = new SqlCommand(@"select convert(numeric(18,2), (Disc1.Disc-Disc2.RDisc)) as NetSales from 
(Select (case when SUM(net_amt) is null then 0 else SUM(net_amt) end) as Disc from stktrn_table where strn_type=1 and strn_rtno=0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate ) as Disc1,
(Select (case when SUM(net_amt) is null then 0 else SUM(net_amt) end) as RDisc from stktrn_table where strn_type=2 and strn_rtno<>0 and Strn_Cancel=0 and strn_date between @FromDate and @ToDate) as Disc2", con);
                cmdtotNet.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmdtotNet.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);
                SqlDataAdapter apdtotNet = new SqlDataAdapter(cmdtotNet);
                DataTable dtTotNet = new DataTable();
                dtTotNet.Rows.Clear();
                apdtotNet.Fill(dtTotNet);
                if (dtTotNet.Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dtTotNet.Rows[0]["NetSales"].ToString()))
                    {
                        totNetSales = Convert.ToDouble(dtTotNet.Rows[0]["NetSales"].ToString());

                        // For Reporting Purpose
                        //totNetSales = 174635.00;
                    }
                }
                // totGrosSales = totSubTotal - (totDiscount + TotGst);
                //totGrosSales = totSubTotal;
                DataTable DTTOTALPROFIT = new DataTable();
                if (DTTOTALPROFIT.Columns.Count == 0)
                {
                    DTTOTALPROFIT.Columns.Add("Columns1");
                    DTTOTALPROFIT.Columns.Add("Columns2");
                }
                // gridItems.ColumnHeadersVisible = false;
                DTTOTALPROFIT.Rows.Add("Total No Of Receipt", Totnoofreceipt.ToString());
                //DTTOTALPROFIT.Rows.Add("1 Total Sub-Total", totSubTotal.ToString("0.00"));
                DTTOTALPROFIT.Rows.Add("1 Total Refunded Amount", TotRefundedAmt);
                DTTOTALPROFIT.Rows.Add("2 Total Discount", totDiscount.ToString("0.00"));
                DTTOTALPROFIT.Rows.Add("3 Total Gst ", TotGst.ToString("0.00"));
                DTTOTALPROFIT.Rows.Add("4 Total Gross Sales", (totGrosSales + totDiscount).ToString("0.00"));
                DTTOTALPROFIT.Rows.Add("5 Total Nett Sales ", totNetSales.ToString("0.00"));
                DTTOTALPROFIT.Rows.Add("6 Total Product Cost", string.Format("{0:0.00}", ((totGrosSales - (TotsalProdit)) < 0) ? 0 : (totGrosSales - (TotsalProdit))));//SELLING PRICE - PROFIT = TOTAL PRODUCT COST

                double totSalesProfit1 = 0.00;
                //munies
                double totsalprft1 = 0.00;
                //double totsalprft2 = 0.00;
                totsalprft1 = totGrosSales - (((totGrosSales - (TotsalProdit)) < 0) ? 0 : (totGrosSales - (TotsalProdit)));
                //totsalprft1 =  totsalprft1 * 100; 
                //totsalprft2 = (totsalprft1 * 7) / 100;
                //totsalprft1 = totsalprft1 - totsalprft2;
                //DTTOTALPROFIT.Rows.Add("8 Total Sales Profit ", totsalprft1.ToString("0.00"));
                DTTOTALPROFIT.Rows.Add("7 Total Sales Profit ", totsalprft1.ToString("0.00"));
                //munies

                /// DTTOTALPROFIT.Rows.Add("8 Total Sales Profit ", TotsalProdit.ToString("0.00"));


                //totSalesProfit1 = ((TotsalProdit / totGrosSales) * 100);
                totSalesProfit1 = ((TotsalProdit / totGrosSales));
                totSalesProfit1 = totSalesProfit1 * 100;
                DTTOTALPROFIT.Rows.Add("8 Profit %  (7/4 * 100%)", totSalesProfit1.ToString() == "NaN" ? "0.00" : totSalesProfit1.ToString("0.00"));

                //// gridItems.ColumnHeadersVisible = false;
                //DTTOTALPROFIT.Rows.Add("Total No Of Receipt", Totnoofreceipt.ToString());
                //DTTOTALPROFIT.Rows.Add("1 Total Sub-Total", totSubTotal.ToString("0.00"));
                //DTTOTALPROFIT.Rows.Add("2 Total Refunded Amount", TotRefundedAmt);
                //DTTOTALPROFIT.Rows.Add("3 Total Discount", totDiscount.ToString("0.00"));
                //DTTOTALPROFIT.Rows.Add("4 Total Gst (0.00%)", TotGst.ToString("0.00"));
                //DTTOTALPROFIT.Rows.Add("5 Total Gross Sales", totGrosSales.ToString("0.00"));
                //DTTOTALPROFIT.Rows.Add("6 Total Nett Sales (5-4)", (totGrosSales - TotGst).ToString("0.00"));
                //DTTOTALPROFIT.Rows.Add("7 Total Product Cost", TotProCost.ToString("0.00"));//SELLING PRICE - PROFIT = TOTAL PRODUCT COST

                //double totSalesProfit1 = 0.00;
                //DTTOTALPROFIT.Rows.Add("8 Total Sales Profit (6-7)", TotsalProdit.ToString("0.00"));
                //totSalesProfit1 = ((TotsalProdit / totGrosSales) * 100);
                //DTTOTALPROFIT.Rows.Add("9 Profit %  (8/5 * 100%)", totSalesProfit1.ToString() == "NaN" ? "0.00" : totSalesProfit1.ToString("0.00"));

                gridItemsManager.DataSource = DTTOTALPROFIT.DefaultView;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 150;
                gridItemsManager.ColumnHeadersVisible = false;
                tPrintingType = "";
                tReportTitle = "TOTAL SALES REPORT";
                funPrintHeaderPart();
                charPerLine = _Class.clsVariables.tempGCharactersPerLine;// dtPrint.Rows[i]["Property"].ToString();
                topLine1 = tReportTitle;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "/" + dpFrom.SelectedDate.Value.Month + "/" + dpFrom.SelectedDate.Value.Year + " - " + dpTo.SelectedDate.Value.Day + "/" + dpTo.SelectedDate.Value.Month + "/" + dpTo.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

                string tempStr = null;
                //if (dtPrint.Rows[i5]["Describ"].ToString() == "Print Qunatity and Rate")
                //{
                string tQtyHeading = "";
                tQtyHeading = "Name";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 10));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += "    Amount";
                mainStr += tQtyHeading;
                mainStr += "\n";
                //for (int i4 = 0; i4 < dtPrint.Rows.Count - 1; i4++)
                //{
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i4]["Property"].ToString();
                //    }

                //    // print lint below logo
                //    if (dtPrint.Rows[i4]["Describ"].ToString() == "Print Line Below Header")
                //    {
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //    }
                //}
                for (int mn = 0; mn < DTTOTALPROFIT.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;
                    //for (int z = 0; z < 4; z++)
                    //{
                    //    if (dtItemProfit.Rows[mn][z].ToString().Trim() == "")
                    //    {
                    //        isChk = true;
                    //        break;
                    //    }
                    //}
                    if (isChk == false)
                    {
                        for (int i = 0; i <= 1; i++)
                        {
                            tempStr = DTTOTALPROFIT.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 10);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 10; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 11)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            if (i == 2)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            if (i == 3)
                            {
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnItemSalesReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                tPrintingType = "";
                gridItemsManager.ColumnHeadersVisible = true;
                gridItemsManager.DataSource = null;
                dt_selecttable.Rows.Clear();
                dt_griddiaplay.Rows.Clear();
                mainStr = "";
                listDisplay.Items.Clear();

                string tCmd_SelectQuery = "";

                tCmd_SelectQuery = @"select Item_table.Item_name as ItemName, SUM(stktrn_table.nt_qty-rnt_Qty ) as Qty,convert(numeric(18,2), avg(stktrn_table.Rate)) as Rate,convert(numeric(18,2), SUM((Amount/nt_Qty)*(stktrn_table.nt_qty-rnt_Qty))) as Amount from Item_table,stktrn_table where stktrn_table.strn_Cancel=0 and stktrn_table.strn_rtno=0 and stktrn_table.strn_type=1 and Item_table.Item_no=stktrn_table.item_no and stktrn_table.strn_date between @tFromdate and @tToDate group by Item_table.Item_name";
                SqlCommand cmd_selectquery = new SqlCommand(tCmd_SelectQuery, con);
                cmd_selectquery.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
                cmd_selectquery.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);

                SqlDataAdapter adp_select = new SqlDataAdapter(cmd_selectquery);

                adp_select.Fill(dt_selecttable);
                if (dt_selecttable.Rows.Count > 0)
                {


                    double dtTotal = 0.0;
                    dtTotal = dt_selecttable.AsEnumerable().Sum(x => Convert.ToDouble(x["Amount"]));
                    string Tot = string.Format("{0:0.00}", Convert.ToDouble(dtTotal));
                    dt_selecttable.Rows.Add("", "", "", "");
                    dt_selecttable.Rows.Add("Toal Amount", "", "", Tot);

                    //dt_selecttable.Rows.Add("", "", "", "");
                    //dt_selecttable.Rows.Add("Total", tTotQty, string.Format("{0:0.00}", tTotRate), string.Format("{0:0.00}", tTotProfit));
                    gridItemsManager.DataSource = dt_selecttable.DefaultView;
                    gridItemsManager.Columns[0].Width = 210;
                    gridItemsManager.Columns[1].Width = 60;
                    gridItemsManager.Columns[2].Width = 60;
                    gridItemsManager.Columns[3].Width = 60;
                    this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                    this.gridItemsManager.Columns[3].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

                }

                funPrintHeaderPart();
                charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                topLine1 = "ITEMS SALES REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "/" + dpFrom.SelectedDate.Value.Month + "/" + dpFrom.SelectedDate.Value.Year + "-" + dpTo.SelectedDate.Value.Day + "/" + dpTo.SelectedDate.Value.Month + "/" + dpTo.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                //topLine1 = "Report Counter : " + cmbCounterName.Text;
                //if (topLine1.Length <= double.Parse(charPerLine))
                //{
                //    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                //    if (findCenterPosition % 2 == 0)
                //    {
                //        for (int j = 0; j < (findCenterPosition / 2); j++)
                //        {
                //            mainStr += " ";
                //        }
                //        mainStr += topLine1;
                //        for (int j = 0; j < (findCenterPosition / 2); j++)
                //        {
                //            mainStr += " ";
                //        }
                //    }
                //    else
                //    {
                //        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                //        {
                //            mainStr += " ";
                //        }
                //        mainStr += topLine1;
                //        for (int j = 0; j < (findCenterPosition / 2); j++)
                //        {
                //            mainStr += " ";
                //        }
                //    }
                //    mainStr += "\n";
                //}

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                //// ds.Tables.Clear();
                //// double location = 0.00;
                string tempStr = null;
                //for (int i1 = 0; i1 < dtPrint.Rows.Count - 1; i1++)
                //{
                //    if (dtPrint.Rows[i1]["Describ"].ToString() == "Characters Per Line*")
                //    {
                //        charPerLine = dtPrint.Rows[i1]["Property"].ToString();
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 22));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += "  Qty  ";
                tQtyHeading += "U/Rate ";
                tQtyHeading += " Amount";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}

                for (int mn = 0; mn < dt_selecttable.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;
                    //for (int z = 0; z < 4; z++)
                    //{
                    //    if (dt_selecttable.Rows[mn][z].ToString().Trim() == "")
                    //    {
                    //        isChk = true;
                    //        break;
                    //    }
                    //}
                    if (isChk == false)
                    {
                        for (int i = 0; i < 4; i++)
                        {
                            tempStr = dt_selecttable.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 22);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)double.Parse(charPerLine)) < tempStr.Length) ? (int)(double.Parse(charPerLine)) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                        else
                                        {
                                            mainStr += temp1.Substring(0, (int)findCenterPosition);
                                        }
                                    }
                                    else
                                    {
                                        //Without Space Prev Code
                                        mainStr += temp.ToString();
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.Length), ((tempStr.Length - temp.Length) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                        else
                                        {
                                            mainStr += temp1.Substring(0, (int)findCenterPosition);
                                        }
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadRight(7, ' ');
                                }
                            }
                            if (i == 2)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 3)
                            {
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }

        }

        private void btnGroupWiseReport_Click(object sender, RoutedEventArgs e)
        {

            try
            {
                mainStr = "";
                tPrintingType = "";
                SqlCommand cmd1 = new SqlCommand("sp_GroupNameOnly", con);
                cmd1.CommandType = CommandType.StoredProcedure;
                //cmd1.Parameters.AddWithValue("@tFromDate", currentDate);
                //cmd1.Parameters.AddWithValue("@tToDate", currentDate);
                cmd1.Parameters.AddWithValue("@tFromDate", dpFrom.SelectedDate.Value);
                cmd1.Parameters.AddWithValue("@tToDate", dpTo.SelectedDate.Value);
                SqlDataAdapter adp1 = new SqlDataAdapter(cmd1);
                DataTable dt1 = new DataTable();
                dt1.Rows.Clear();
                adp1.Fill(dt1);



                //  SqlCommand cmd_selectgroup = new SqlCommand("Select Item_Grouptable.Item_groupname as GroupName,SUM(stktrn_table.nt_qty)  as Qty,CONVERT(numeric(18,2),avg((stktrn_table.nt_qty*stktrn_table.Rate))/avg(stktrn_table.nt_qty)) as Rate,convert(Numeric(18,2),(SUM(stktrn_table.nt_qty) * (avg((stktrn_table.nt_qty*stktrn_table.Rate))/avg(stktrn_table.nt_qty)))) as Amount from stktrn_table,Item_table,Item_Grouptable  Where Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and Stktrn_table.strn_cancel<>1 and stktrn_table.strn_type='1' and stktrn_table.strn_date between (SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table  where Id=(Select MAX(EndOfDayId) from NumberTable)) and (SELECT CONVERT(date,DATEADD(day,1,endofday),103) FROM EndOFday_Table  where Id=(Select MAX(EndOfDayId) from NumberTable))  group by Item_Grouptable.Item_groupname", con);

                string tCmd_SelectGroup = "";

                {
                    tCmd_SelectGroup = "Select Item_Grouptable.Item_groupname as GroupName,SUM(stktrn_table.nt_qty- stktrn_table.rnt_qty)  as Qty,CONVERT(numeric(18,2),avg(((stktrn_table.nt_qty- stktrn_table.rnt_qty)*stktrn_table.Rate))/avg(stktrn_table.nt_qty- stktrn_table.rnt_qty)) as Rate,convert(Numeric(18,2),SUM((Amount/nt_Qty)*(stktrn_table.nt_qty-rnt_Qty))) as Amount from stktrn_table,Item_table,Item_Grouptable  Where Item_table.Item_no=stktrn_table.item_no and Item_table.item_Groupno=Item_Grouptable.Item_groupno and stktrn_table.strn_type='1' and stktrn_table.nt_qty<>stktrn_table.rnt_qty and stktrn_table.strn_Cancel=0  and stktrn_table.strn_rtno=0 and stktrn_table.strn_date  between @FromDate and @tEnd  group by Item_Grouptable.Item_groupname";
                }
                SqlCommand cmd_selectgroup = new SqlCommand(tCmd_SelectGroup, con);
                //cmd_selectgroup.Parameters.AddWithValue("@FromDate", currentDate);
                //cmd_selectgroup.Parameters.AddWithValue("@tEnd", currentDate);
                cmd_selectgroup.Parameters.AddWithValue("@FromDate", dpFrom.SelectedDate.Value);
                cmd_selectgroup.Parameters.AddWithValue("@tEnd", dpTo.SelectedDate.Value);
                //cmd_selectgroup.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);

                SqlDataAdapter apd_selectgruop = new SqlDataAdapter(cmd_selectgroup);
                DataTable dt_selegroup = new DataTable();
                if (dtGroupReport.Columns.Count > 0)
                {
                    dtGroupReport.Columns.Clear();
                    dtGroupReport.Columns.Add("GroupName", typeof(string));
                    dtGroupReport.Columns.Add("Qty", typeof(string));
                    dtGroupReport.Columns.Add("Rate", typeof(string));
                    dtGroupReport.Columns.Add("Amount", typeof(string));
                }
                dtGroupReport.Rows.Clear();
                apd_selectgruop.Fill(dtGroupReport);


                double tTotQty = 0, tTotProfit = 0;
                for (int i = 0; i < dtGroupReport.Rows.Count; i++)
                {
                    if (dtGroupReport.Rows[i]["Qty"].ToString().Trim() != "")
                    {
                        tTotQty += (dtGroupReport.Rows[i]["Qty"].ToString() == "") ? 0.00 : double.Parse(dtGroupReport.Rows[i]["Qty"].ToString());

                    }
                    if (dtGroupReport.Rows[i]["Amount"].ToString().Trim() != "")
                    {
                        tTotProfit += (dtGroupReport.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtGroupReport.Rows[i]["Amount"].ToString());
                    }
                }
                dtGroupReport.Rows.Add("", "", "", "");

                //dtGroupReport.Rows.Add("Total", tTotQty, "", string.Format("{0:0.00}", tTotProfit));
                //  gridItems.DataSource = dtgropProfit.DefaultView;  


                string tCmd = "";

                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table where  smas_Cancel<>1 and smas_billdate between @FromDate and @tEnd )";
                }
                DataTable dtDiscountAmt = new DataTable();
                dtDiscountAmt.Rows.Clear();
                SqlCommand cmdDiscount = new SqlCommand(tCmd, con);
                //   cmdDiscount.Parameters.AddWithValue("@tDate",dpFrom.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@FromDate", dpFrom.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@tEnd", dpTo.SelectedDate.Value);
                SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                adpDiscount.Fill(dtDiscountAmt);


                gridItemsManager.DataSource = dtGroupReport.DefaultView;
                gridItemsManager.Columns[0].Width = 210;
                gridItemsManager.Columns[1].Width = 60;
                gridItemsManager.Columns[2].Width = 60;
                gridItemsManager.Columns[3].Width = 60;
                this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                this.gridItemsManager.Columns[3].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

                funPrintHeaderPart();

                charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                topLine1 = "GROUP SALES REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                //dtPrint.Rows[i4]["Property"].ToString();
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                // ds.Tables.Clear();
                // double location = 0.00;
                string tempStr = null;

                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 22));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += "  Qty  ";
                tQtyHeading += "U/Rate ";
                tQtyHeading += " Amount";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                //dtPrint.Rows[i4]["Property"].ToString();
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}

                for (int mn = 0; mn < dtGroupReport.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;
                    if (isChk == false)
                    {
                        for (int i = 0; i < 4; i++)
                        {
                            tempStr = dtGroupReport.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 22);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 18; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadRight(7, ' ');
                                }
                            }
                            if (i == 2)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 3)
                            {
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }


                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                //dtPrint.Rows[i4]["Property"].ToString();
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnCurrentStockReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";
                tPrintingType = "";
                gridItemsManager.DataSource = null;
                DataTable dtSPur = new DataTable();
                if (dtSPur.Columns.Count == 0)
                {
                    dtSPur.Columns.Add("ItemName");
                    dtSPur.Columns.Add("PurQty");
                    dtSPur.Columns.Add("SalesQty");
                    dtSPur.Columns.Add("TotQty");
                }
                dtSPur.Rows.Clear();
                //total Sales->Qty
                //SqlCommand cmdSales = new SqlCommand("select distinct a.Item_no As ItemNo,a.item_name As ItemName,SQ.SalQty As SalesQty from item_table a,(select distinct item_no,sum(nt_qty)  SalQty from stktrn_table where strn_type=1 group by item_no )  SQ where  a.Item_no=sq.item_no  ", con);
                SqlCommand cmdSales = new SqlCommand("select item_table.item_no As ItemNo,Item_table.Item_name As ItemName,SUM(stktrn_table.nt_qty-rnt_Qty) As SalesQty from stktrn_table,item_table where stktrn_table.item_no=Item_table.Item_no and stktrn_table.strn_type=1  and stktrn_table.strn_date>=@FromDate and stktrn_table.strn_date<=@ToDate  group by Item_table.Item_no,Item_table.Item_name", con);
                cmdSales.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmdSales.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);

                SqlDataAdapter adpSales = new SqlDataAdapter(cmdSales);
                DataTable dtSales = new DataTable();
                dtSales.Rows.Clear();
                adpSales.Fill(dtSales);

                //Pur->Qty
                //SqlCommand cmdPur = new SqlCommand("select distinct a.Item_no As ItemNo,a.item_name As ItemName,Pb.Pqty As PurQty from item_table a,(select distinct item_no,sum(nt_qty) Pqty from stktrn_table where strn_type=3 or strn_rtno=1 group by item_no ) Pb where a.Item_no=pb.item_no ", con);
                SqlCommand cmdPur = new SqlCommand("select item_table.item_no As ItemNo,Item_table.Item_name As ItemName,SUM(stktrn_table.nt_qty) As PurQty from stktrn_table,item_table where stktrn_table.item_no=Item_table.Item_no and (stktrn_table.strn_type=3 or strn_rtno=1) and stktrn_table.strn_date>=@FromDate and stktrn_table.strn_date<=@ToDate  group by Item_table.Item_no,Item_table.Item_name", con);
                cmdPur.Parameters.AddWithValue("@FromDate", Convert.ToDateTime(dpFrom.Text).Year + "/" + Convert.ToDateTime(dpFrom.Text).Month + "/" + Convert.ToDateTime(dpFrom.Text).Day);
                cmdPur.Parameters.AddWithValue("@ToDate", Convert.ToDateTime(dpTo.Text).Year + "/" + Convert.ToDateTime(dpTo.Text).Month + "/" + Convert.ToDateTime(dpTo.Text).Day);
                SqlDataAdapter adpPur = new SqlDataAdapter(cmdPur);
                DataTable dtPur = new DataTable();
                dtPur.Rows.Clear();
                adpPur.Fill(dtPur);
                if (dtPur.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSales.Rows.Count; i++)
                    {
                        dtSPur.Rows.Add(dtSales.Rows[i]["ItemName"].ToString(), 0, dtSales.Rows[i]["SalesQty"].ToString(), 0.00);
                    }
                    for (int j = 0; j < dtSales.Rows.Count; j++)
                    {
                        for (int l = 0; l < dtPur.Rows.Count; l++)
                        {
                            if (dtSales.Rows[j]["ItemName"].ToString() == dtPur.Rows[l]["ItemName"].ToString())
                            {
                                double TotPur = 0.00; double TotSales = 0.00;
                                TotPur = Convert.ToDouble(dtPur.Rows[l]["PurQty"].ToString());
                                TotSales = Convert.ToDouble(dtSales.Rows[j]["SalesQty"].ToString());
                                dtSPur.Rows.Add(dtSales.Rows[j]["ItemName"].ToString(), dtPur.Rows[l]["PurQty"].ToString(), dtSales.Rows[j]["SalesQty"].ToString(), ((TotSales) > 0 ? TotPur - TotSales : TotPur));
                                dtPur.Rows.RemoveAt(l);
                                dtPur.AcceptChanges();
                                // break;
                            }
                        }
                    }
                    for (int k = 0; k < dtPur.Rows.Count; k++)
                    {
                        dtSPur.Rows.Add(dtPur.Rows[k]["ItemName"].ToString(), dtPur.Rows[k]["PurQty"].ToString(), 0, dtPur.Rows[k]["PurQty"].ToString());
                    }
                    double TStockvalues = 0.00, totPurQty = 0.00;
                    double TSalesStockvalues = 0.00;
                    for (int h = 0; h < dtSPur.Rows.Count; h++)
                    {
                        TStockvalues += Convert.ToDouble(dtSPur.Rows[h]["TotQty"].ToString());
                        TSalesStockvalues += Convert.ToDouble(dtSPur.Rows[h]["SalesQty"].ToString());
                        totPurQty += Convert.ToDouble(dtSPur.Rows[h]["PurQty"].ToString());
                    }

                    dtSPur.Rows.Add("", "", "", "");
                    dtSPur.Rows.Add("Total :", totPurQty, TSalesStockvalues, TStockvalues);


                }
                else
                {
                    for (int i = 0; i < dtSales.Rows.Count; i++)
                    {
                        dtSPur.Rows.Add(dtSales.Rows[i]["ItemName"].ToString(), 0, dtSales.Rows[i]["SalesQty"].ToString(), 0.00);
                    }
                    // gridItemsManager.DataSource = dtSales.DefaultView;
                }
                gridItemsManager.DataSource = dtSPur.DefaultView;
                gridItemsManager.ColumnHeadersVisible = true;
                gridItemsManager.Columns[0].Width = 210;
                gridItemsManager.Columns[1].Width = 60;
                gridItemsManager.Columns[2].Width = 60;
                gridItemsManager.Columns[3].Width = 60;

                funPrintHeaderPart();
                charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                topLine1 = "CURRENT STOCK REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "/" + dpFrom.SelectedDate.Value.Month + "/" + dpFrom.SelectedDate.Value.Year + "-" + dpTo.SelectedDate.Value.Day + "/" + dpTo.SelectedDate.Value.Month + "/" + dpTo.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

                string tempStr = null;

                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 22));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += " PurQty";
                tQtyHeading += " SalQty";
                tQtyHeading += " TotQty";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}

                for (int mn = 0; mn < dtSPur.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;
                    for (int z = 0; z < 4; z++)
                    {
                        if (dtSPur.Rows[mn][z].ToString().Trim() == "")
                        {
                            isChk = true;
                            break;
                        }
                    }
                    if (isChk == false)
                    {
                        for (int i = 0; i < 4; i++)
                        {
                            tempStr = dtSPur.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 22);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)double.Parse(charPerLine)) < tempStr.Length) ? (int)(double.Parse(charPerLine)) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                        else
                                        {
                                            mainStr += temp1.Substring(0, (int)findCenterPosition);
                                        }
                                    }
                                    else
                                    {
                                        //Without Space Prev Code
                                        mainStr += temp.ToString();
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.Length), ((tempStr.Length - temp.Length) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                        else
                                        {
                                            mainStr += temp1.Substring(0, (int)findCenterPosition);
                                        }
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 2)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 3)
                            {
                                if (tempStr.Length <= 8)
                                {
                                    mainStr += tempStr.PadLeft(8, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }


            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnMixedSettlementReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";
                tPrintingType = "";
                DataTable dtMixed = new DataTable();
                dtMixed.Rows.Clear();
                string tQuery = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tQuery = "Select salmas_table.smas_billno as BillNo,(case when  Ledger_table.ledger_name='Cash A/c' then 'Cash Sales' else Ledger_table.ledger_name end) as Sales,CONVERT(numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table,Ledger_table where Ledger_table.Ledger_no=SalRecv_Led and SalRecv_table.SalRecv_Salno=salmas_table.smas_billno and smas_Cancel=0 and smas_billdate=@tBillDate and smas_rtno=0 and SalRecv_table.SalRecv_Salno in (Select result.SalRecv_Salno from (Select SalRecv_Salno,SalRecv_Led,SUM(SalRecv_Amt) as Amt from SalRecv_table group by SalRecv_Salno,SalRecv_Led) as result GROUP by result.SalRecv_Salno having count(*)>1) group by salmas_table.smas_billno,Ledger_table.ledger_name  order by smas_billno";
                }
                else
                {
                    tQuery = "Select salmas_table.smas_billno as BillNo,(case when  Ledger_table.ledger_name='Cash A/c' then 'Cash Sales' else Ledger_table.ledger_name end) as Sales,CONVERT(numeric(18,2),SUM(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table,Ledger_table where Ledger_table.Ledger_no=SalRecv_Led and SalRecv_table.SalRecv_Salno=salmas_table.smas_billno and smas_Cancel=0 and Ctr_no=@tCounter and smas_billdate=@tBillDate and smas_rtno=0 and SalRecv_table.SalRecv_Salno in (Select result.SalRecv_Salno from (Select SalRecv_Salno,SalRecv_Led,SUM(SalRecv_Amt) as Amt from SalRecv_table group by SalRecv_Salno,SalRecv_Led) as result GROUP by result.SalRecv_Salno having count(*)>1) group by salmas_table.smas_billno,Ledger_table.ledger_name  order by smas_billno";
                }
                SqlCommand cmd = new SqlCommand(tQuery, con);
                cmd.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                cmd.Parameters.AddWithValue("@tBillDate", dpBillDate.SelectedDate.Value.Year + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Day);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtMixed);

                DataTable dtMixedPrint = new DataTable();
                dtMixedPrint.Rows.Clear();
                if (dtMixedPrint.Columns.Count == 0)
                {
                    dtMixedPrint.Columns.Add("Particulars", typeof(string));
                    dtMixedPrint.Columns.Add("Amount", typeof(string));
                }
                for (int mn = 0; mn < dtMixed.Rows.Count; mn++)
                {
                    DataRow[] dtMixedRow = dtMixedPrint.Select("Particulars='BillNo :" + Convert.ToString(dtMixed.Rows[mn]["BillNo"]) + "'");
                    if (dtMixedRow.Length == 0)
                    {
                        dtMixedPrint.Rows.Add("", "");
                        dtMixedPrint.Rows.Add("BillNo :" + Convert.ToString(dtMixed.Rows[mn]["BillNo"]), "");
                        dtMixedPrint.Rows.Add(Convert.ToString(dtMixed.Rows[mn]["Sales"]), Convert.ToString(dtMixed.Rows[mn]["Amount"]));
                    }
                    else
                    {
                        dtMixedPrint.Rows.Add(Convert.ToString(dtMixed.Rows[mn]["Sales"]), Convert.ToString(dtMixed.Rows[mn]["Amount"]));
                    }
                }
                gridItemsManager.DataSource = null;
                gridItemsManager.DataSource = dtMixedPrint;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 150;
                gridItemsManager.ColumnHeadersVisible = true;
                funPrintHeaderPart();

                topLine1 = "MIXED SETTLEMENT BILL REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}




                topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                ds.Tables.Clear();
                //  mainStrSub = "";


                string tempStr = null;
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 8));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += " Amount";
                // tQtyHeading += "U/Rate ";
                //tQtyHeading += "   Profit";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                for (int mn = 0; mn < dtMixedPrint.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;

                    if (isChk == false)
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            tempStr = dtMixedPrint.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 8);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 8; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 4)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        double CashReport_Load(string frdate, string todate, string cntr)
        {
            double TotalAmt = 0.00;
            try
            {
                mainStr = "";
                tPrintingType = "";
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null; dtCash.Rows.Clear();
                gridItemsManager.ColumnHeadersVisible = true;

                //Return Item Values
                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();
                //SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=@tCounter and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno, party_no", con);
                //cmdVoid.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                string tCmdVoid = "";
                if (cntr == "All Counter")
                {
                    tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where  Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate between @FrDate and @ToDate group by smas_rtno, party_no";
                }
                else
                {
                    tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate between @FrDate and @ToDate group by smas_rtno, party_no";
                    //tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno, party_no";
                }
                SqlCommand cmdVoid = new SqlCommand(tCmdVoid, con);
                cmdVoid.Parameters.AddWithValue("@tCounter", cntr);
                //cmdVoid.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@FrDate", dpFrom.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@ToDate", dpTo.SelectedDate.Value);

                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);
                double tCashReturnValue = 0.00;
                double tNETSReturnValue = 0.00;

                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    if (dtVoid.Rows[i]["party_no"].ToString() == "2")
                    {
                        tCashReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());

                    }
                    else if (dtVoid.Rows[i]["party_no"].ToString() == "14")
                    {
                        tNETSReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());

                    }
                }

                string tCmd = "";
                if (cntr == "All Counter")
                {
                    tCmd = "select smas_billno as BillNo,LEFT(CONVERT(VARCHAR, smas_billdate, 6),10)+' '+LEFT(CONVERT(VARCHAR, smas_billtime, 108),10) as DateTime,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where  smas_rtno=0  and smas_Cancel<>1 and smas_billdate between @FDate and @TDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime,salmas_table.smas_billdate ,SalRecv_Amt";
                }
                else
                {
                    // tCmd = "select smas_billno as BillNo,CONVERT(time,smas_billtime,108) as Time,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_rtno=0  and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt";
                    tCmd = "select smas_billno as BillNo,LEFT(CONVERT(VARCHAR, smas_billdate, 6),10)+' '+LEFT(CONVERT(VARCHAR, smas_billtime, 108),10) as DateTime,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_rtno=0  and smas_Cancel<>1 and  (CONVERT(VARCHAR, smas_billdate, 111) between CONVERT(VARCHAR, @FDate, 111) and CONVERT(VARCHAR, @TDate, 111)) and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,salmas_table.smas_billdate,SalRecv_Amt";
                }
                SqlCommand cmd = new SqlCommand(tCmd, con);
                //cmd.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);

                cmd.Parameters.AddWithValue("@FDate", dpFrom.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@TDate", dpTo.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tCounter", cntr);
                //dtCNHReport.Rows.Add("CASH Report", "", "");
                //dtCNHReport.Rows.Add("", "", "");
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtCNHReport);
                gridItemsManager.DataSource = dtCNHReport.DefaultView;
                double tTotal = 0.00;

                for (int i = 0; i < dtCNHReport.Rows.Count; i++)
                {
                    tTotal += (dtCNHReport.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCNHReport.Rows[i]["Amount"].ToString());
                }
                dtCNHReport.Rows.Add("", "", "");
                dtCNHReport.Rows.Add("Total ", "", string.Format("{0:0.00}", tTotal));
                TotalAmt = tTotal;
                if (tCashReturnValue > 0)
                {
                    //  dtCash.Rows.Add("", "", "");
                    dtCNHReport.Rows.Add("Return Item Amount(-)", "", string.Format("{0:0.00}", tCashReturnValue));
                    dtCNHReport.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal - tCashReturnValue)));
                    TotalAmt = tTotal - tCashReturnValue;
                }

                if (cntr == "All Counter")
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where smas_Cancel<>1 and smas_billdate between @FrDate and @ToDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                }
                else
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_Cancel<>1 and smas_billdate between @FrDate and @ToDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                }
                DataTable dtDiscountAmt = new DataTable();
                dtDiscountAmt.Rows.Clear();
                SqlCommand cmdDiscount = new SqlCommand(tCmd, con);
                //cmdDiscount.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@FrDate", dpFrom.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@ToDate", dpTo.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@tCounter", cntr);
                SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                adpDiscount.Fill(dtDiscountAmt);
                //double tDiscountAmt = 0.00;


                //        break;
                //    }
                //}
                //listDisplay.Items.Add(mainStr);
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");

            }
            return TotalAmt;
        }
        private double NetsReport_load(string FrDate, string ToDate, string cntr, double TotalAmt1)
        {
            double TotalAmt = 0.00;
            try
            {
                tPrintingType = "";
                mainStr = "";
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                gridItemsManager.ColumnHeadersVisible = true;

                dtNETS.Rows.Clear();


                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();

                string tCmdVoid = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where  Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate between @FrDate and @ToDate group by smas_rtno, party_no";
                }
                else
                {
                    tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate between @FrDate and @ToDate group by smas_rtno, party_no";
                }
                SqlCommand cmdVoid = new SqlCommand(tCmdVoid, con);
                cmdVoid.Parameters.AddWithValue("@tCounter", cntr);
                cmdVoid.Parameters.AddWithValue("@FrDate", dpFrom.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@ToDate", dpTo.SelectedDate.Value);
                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);
                double tCashReturnValue = 0.00;
                double tNETSReturnValue = 0.00;
                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    if (dtVoid.Rows[i]["party_no"].ToString() == "2")
                    {
                        tCashReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                    else if (dtVoid.Rows[i]["party_no"].ToString() == "14")
                    {
                        tNETSReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                }

                string tCmd = "";
                if (cntr == "All Counter")
                {
                    tCmd = "select smas_billno as BillNo,LEFT(CONVERT(VARCHAR, smas_billdate, 6),10)+' '+LEFT(CONVERT(VARCHAR, smas_billtime, 108),10) as DateTime,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where smas_rtno=0 and smas_Cancel<>1 and smas_billdate between @FrDate and @ToDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,SalRecv_Amt,salmas_table.smas_billtime,salmas_table.smas_billdate ";
                }
                else
                {
                    tCmd = "select smas_billno as BillNo,LEFT(CONVERT(VARCHAR, smas_billdate, 6),10)+' '+LEFT(CONVERT(VARCHAR, smas_billtime, 108),10) as DateTime,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_rtno=0 and smas_Cancel<>1 and smas_billdate between @FrDate and @ToDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,SalRecv_Amt,salmas_table.smas_billtime,salmas_table.smas_billdate ";
                }
                SqlCommand cmd = new SqlCommand(tCmd, con);
                cmd.Parameters.AddWithValue("@FrDate", dpFrom.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@ToDate", dpTo.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tCounter", cntr);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtCNHReport);
                gridItemsManager.DataSource = dtCNHReport.DefaultView;
                double tTotal = 0.00;
                for (int i = 0; i < dtCNHReport.Rows.Count; i++)
                {
                    tTotal += (dtCNHReport.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCNHReport.Rows[i]["Amount"].ToString());
                    //tTotal += (dtNETS.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtNETS.Rows[i]["Amount"].ToString());
                }
                dtCNHReport.Rows.Add("", "", "");
                if (TotalAmt1 == 0)
                {
                    tTotal = tTotal - (2 * TotalAmt1);
                    dtCNHReport.Rows.Add("Total", "", string.Format("{0:0.00}", tTotal));
                    TotalAmt = tTotal;
                }
                else if (tCashReturnValue == 0)
                {
                    tTotal = tTotal - (2 * TotalAmt1);
                    dtCNHReport.Rows.Add("Total", "", string.Format("{0:0.00}", tTotal));
                    TotalAmt = tTotal;
                }
                else
                {
                    tTotal = tTotal - ((3 * TotalAmt1) + (3 * tCashReturnValue));
                    dtCNHReport.Rows.Add("Total", "", string.Format("{0:0.00}", tTotal));
                    TotalAmt = tTotal;
                }
                if (tNETSReturnValue > 0)
                {
                    //  dtCash.Rows.Add("", "", "");
                    dtCNHReport.Rows.Add("Return Item Amount", "", string.Format("{0:0.00}", tNETSReturnValue));
                    dtCNHReport.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal - tNETSReturnValue)));
                    TotalAmt = tTotal - tNETSReturnValue;
                }

                if (cmbCounterName.Text == "All Counter")
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where  smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                }
                else
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                }
                DataTable dtDiscountAmt = new DataTable();
                dtDiscountAmt.Rows.Clear();
                SqlCommand cmdDiscount = new SqlCommand(tCmd, con);
                cmdDiscount.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                adpDiscount.Fill(dtDiscountAmt);
                //double tDiscountAmt = 0.00;

                gridItemsManager.Columns[0].Width = 120;
                gridItemsManager.Columns[1].Width = 150;
                gridItemsManager.Columns[2].Width = 120;
                this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;


            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }

            return TotalAmt;
        }
        private double HouseAccountReport_Load(double TotalAmt, double TotalAmt1, string cntr)
        {
            try
            {
                tPrintingType = "";
                mainStr = "";
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                gridItemsManager.ColumnHeadersVisible = true;

                dtNETS.Rows.Clear();


                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();

                string tCmdVoid = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where  Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate between @FrDate and @ToDate group by smas_rtno, party_no";
                }
                else
                {
                    tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate between @FrDate and @ToDate group by smas_rtno, party_no";
                }
                SqlCommand cmdVoid = new SqlCommand(tCmdVoid, con);
                cmdVoid.Parameters.AddWithValue("@tCounter", cntr);
                cmdVoid.Parameters.AddWithValue("@FrDate", dpFrom.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@ToDate", dpTo.SelectedDate.Value);
                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);
                double tCashReturnValue = 0.00;
                double tNETSReturnValue = 0.00;
                double RAmt1 = 0.00;
                double RAmt2 = 0.00;
                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    if (dtVoid.Rows[i]["party_no"].ToString() != "2")
                    {
                        RAmt1 += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                    else if (dtVoid.Rows[i]["party_no"].ToString() != "14")
                    {
                        RAmt2 += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                    else
                    {
                        tCashReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());
                    }
                }

                string tCmd = "";
                if (cntr == "All Counter")
                {
                    tCmd = "select smas_billno as BillNo,LEFT(CONVERT(VARCHAR, smas_billdate, 6),10)+' '+LEFT(CONVERT(VARCHAR, smas_billtime, 108),10) as DateTime,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where smas_rtno=0 and smas_Cancel<>1 and smas_billdate between @FrDate and @ToDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led not in(5,14) group by salmas_table.smas_billno,SalRecv_Amt,salmas_table.smas_billtime,salmas_table.smas_billdate ";
                }
                else
                {
                    tCmd = "select smas_billno as BillNo,LEFT(CONVERT(VARCHAR, smas_billdate, 6),10)+' '+LEFT(CONVERT(VARCHAR, smas_billtime, 108),10) as DateTime,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_rtno=0 and smas_Cancel<>1 and smas_billdate between @FrDate and @ToDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led not in(5,14) group by salmas_table.smas_billno,SalRecv_Amt,salmas_table.smas_billtime,salmas_table.smas_billdate ";
                }
                SqlCommand cmd = new SqlCommand(tCmd, con);
                cmd.Parameters.AddWithValue("@FrDate", dpFrom.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@ToDate", dpTo.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tCounter", cntr);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtCNHReport);
                gridItemsManager.DataSource = dtCNHReport.DefaultView;
                double tTotal = 0.00;
                for (int i = 0; i < dtCNHReport.Rows.Count; i++)
                {
                    tTotal += (dtCNHReport.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtCNHReport.Rows[i]["Amount"].ToString());
                    //tTotal += (dtNETS.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtNETS.Rows[i]["Amount"].ToString());
                }
                dtCNHReport.Rows.Add("", "", "");
                if (TotalAmt1 == 0)
                {
                    tTotal = tTotal - (2 * TotalAmt + 2 * TotalAmt1);
                    dtCNHReport.Rows.Add("Total", "", string.Format("{0:0.00}", tTotal));
                    TotalAmt = tTotal;
                }
                else if (tCashReturnValue == 0)
                {
                    tTotal = tTotal - (3 * TotalAmt + 2 * TotalAmt1 + 3 * RAmt1 + 3 * RAmt2);
                    dtCNHReport.Rows.Add("Total", "", string.Format("{0:0.00}", tTotal));
                    TotalAmt = tTotal;
                }
                else
                {
                    tTotal = tTotal - ((3 * TotalAmt1) + (3 * tCashReturnValue));
                    dtCNHReport.Rows.Add("Total", "", string.Format("{0:0.00}", tTotal));
                    TotalAmt = tTotal;
                }

                if (tNETSReturnValue > 0)
                {
                    //  dtCash.Rows.Add("", "", "");
                    dtCNHReport.Rows.Add("Return Item Amount", "", string.Format("{0:0.00}", tNETSReturnValue));
                    dtCNHReport.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal - tNETSReturnValue)));
                    TotalAmt = tTotal - tNETSReturnValue;
                }

                if (cmbCounterName.Text == "All Counter")
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where  smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                }
                else
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=14 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                }
                DataTable dtDiscountAmt = new DataTable();
                dtDiscountAmt.Rows.Clear();
                SqlCommand cmdDiscount = new SqlCommand(tCmd, con);
                cmdDiscount.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                adpDiscount.Fill(dtDiscountAmt);
                //double tDiscountAmt = 0.00;

                gridItemsManager.Columns[0].Width = 150;
                gridItemsManager.Columns[1].Width = 120;
                gridItemsManager.Columns[2].Width = 120;
                this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;


            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
            return TotalAmt;
        }

        private void PrintData(string title)
        {
            gridItemsManager.Columns[0].Width = 120;
            gridItemsManager.Columns[1].Width = 150;
            gridItemsManager.Columns[2].Width = 120;
            this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

            gridItemsManager.ColumnHeadersVisible = true;
            funPrintHeaderPart();
            charPerLine = _Class.clsVariables.tempGCharactersPerLine;
            topLine1 = title;
            if (topLine1.Length <= double.Parse(charPerLine))
            {
                findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                if (findCenterPosition % 2 == 0)
                {
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                else
                {
                    for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                mainStr += "\n";
            }

            topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
            if (topLine1.Length <= double.Parse(charPerLine))
            {
                findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                if (findCenterPosition % 2 == 0)
                {
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                else
                {
                    for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                mainStr += "\n";
            }

            topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "-" + dpFrom.SelectedDate.Value.Month + "-" + dpFrom.SelectedDate.Value.Year + " - " + dpTo.SelectedDate.Value.Day + "-" + dpTo.SelectedDate.Value.Month + "-" + dpTo.SelectedDate.Value.Year;
            if (topLine1.Length <= double.Parse(charPerLine))
            {
                findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                if (findCenterPosition % 2 == 0)
                {
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                else
                {
                    for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                mainStr += "\n";
            }

            topLine1 = "Report Counter : " + ComboCounter.Text;
            if (topLine1.Length <= double.Parse(charPerLine))
            {
                findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                if (findCenterPosition % 2 == 0)
                {
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                else
                {
                    for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += topLine1;
                    for (int j = 0; j < (findCenterPosition / 2); j++)
                    {
                        mainStr += " ";
                    }
                }
                mainStr += "\n";
            }

            lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
            //dtPrint.Rows[i4]["Property"].ToString();
            if (lineBelowLogo == "No Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += " ";
                }
                mainStr += "\n";
            }
            if (lineBelowLogo == "Single Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "-";
                }
                mainStr += "\n";
            }
            else if (lineBelowLogo == "Double Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "=";
                }
                mainStr += "\n";
            }
            string tempStr = null;
            string tQtyHeading = "";
            tQtyHeading = "BillNo";
            double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 27));
            for (int j = 0; j < chkCount; j++)
            {
                tQtyHeading += " ";
            }
            tQtyHeading += "  DateTime    ";
            tQtyHeading += "      Amount";
            mainStr += tQtyHeading;
            mainStr += "\n";
            lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
            if (lineBelowLogo == "No Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += " ";
                }
                mainStr += "\n";
            }
            if (lineBelowLogo == "Single Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "-";
                }
                mainStr += "\n";
            }
            else if (lineBelowLogo == "Double Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "=";
                }
                mainStr += "\n";
            }

            for (int mn = 0; mn < dtCNHReport.Rows.Count; mn++)
            {
                bool isChk = false;

                if (isChk == false)
                {
                    for (int i = 0; i < 3; i++)
                    {
                        tempStr = dtCNHReport.Rows[mn][i].ToString();
                        findCenterPosition = (double.Parse(charPerLine) - 30);
                        if (i == 0)
                        {
                            if (tempStr.Length <= (int)findCenterPosition)
                            {
                                mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                            }
                            else
                            {
                                string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                int chkSpace = temp.LastIndexOf(" ");
                                int loc = (temp.Length - temp.LastIndexOf(" "));
                                if (chkSpace != -1)
                                {
                                    mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                    for (int j = 0; j < loc + 20; j++)
                                    {
                                        mainStr += " ";
                                    }
                                    mainStr += "\n";
                                    string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                    if (temp1.Length <= (int)findCenterPosition)
                                    {
                                        mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                    }
                                }
                                else
                                {
                                    mainStr += temp.ToString();
                                }

                            }
                        }

                        if (i == 1)
                        {
                            if (tempStr.Length < 19)
                            {
                                mainStr += tempStr.PadRight(19, ' ');
                            }
                        }

                        if (i == 2)
                        {
                            if (tempStr.Length <= 10)
                            {
                                mainStr += tempStr.PadLeft(10, ' ');
                            }
                        }
                    }
                    mainStr += "\n";
                }
            }

            lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
            if (lineBelowLogo == "No Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += " ";
                }
                mainStr += "\n";
            }
            if (lineBelowLogo == "Single Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "-";
                }
                mainStr += "\n";
            }
            else if (lineBelowLogo == "Double Line")
            {
                for (int j = 0; j < double.Parse(charPerLine); j++)
                {
                    mainStr += "=";
                }
                mainStr += "\n";

            }

        }

        private void btnCNHReport_Click(object sender, RoutedEventArgs e)
        {
            double TotalAmt = 0.00, TotalAmt1 = 0.00;
            string frdate, todate, cntr;
            frdate = dpFrom.SelectedDate.Value.ToString();
            todate = dpTo.SelectedDate.Value.ToString();
            cntr = ComboCounter.Text.Trim();
            try
            {
                if (ComboCash.Text.Trim() == "Cash")
                {
                    //MessageBox.Show("You Selected " + ComboCash.Text.Trim());
                    dtCNHReport.Rows.Clear();
                    TotalAmt = CashReport_Load(frdate, todate, cntr);
                    PrintData("CASH REPORT");
                }
                else if (ComboCash.Text.Trim() == "Nets")
                {
                    // MessageBox.Show("You Selected " + ComboCash.Text.Trim());
                    dtCNHReport.Rows.Clear();
                    TotalAmt1 = NetsReport_load(frdate, todate, cntr, 0.00);
                    PrintData("NETS REPORT");
                }
                else if (ComboCash.Text.Trim() == "House Account")
                {
                    dtCNHReport.Rows.Clear();
                    TotalAmt = HouseAccountReport_Load(0.00, 0.00, cntr);
                    PrintData("HOUSE ACCOUNT REPORT");
                }
                else if (ComboCash.Text.Trim() == "ALL")
                {
                    dtCNHReport.Rows.Clear();
                    dtCNHReport.Rows.Add("", "", "");
                    dtCNHReport.Rows.Add("FOR CASH", "", "");
                    TotalAmt = CashReport_Load(frdate, todate, cntr);
                    dtCNHReport.Rows.Add("", "", "");
                    dtCNHReport.Rows.Add("FOR NETS", "", "");
                    TotalAmt1 = NetsReport_load(frdate, todate, cntr, TotalAmt);
                    dtCNHReport.Rows.Add("", "", "");
                    dtCNHReport.Rows.Add("FOR H/A", "", "");
                    double TotalAmt2 = HouseAccountReport_Load(TotalAmt, TotalAmt1, cntr);
                    dtCNHReport.Rows.Add("", "", "");
                    dtCNHReport.Rows.Add("Grand Total", "", string.Format("{0:0.00}", (TotalAmt + TotalAmt1 + TotalAmt2)));
                    PrintData("CASH NETS H/A REPORT");

                }


            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }


        private void btnHouseAccountDetail_Click(object sender, RoutedEventArgs e)
        {

            try
            {

                mainStr = "";
                tPrinterType = "";
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null;
                dtPayment.Rows.Clear();
                tTotal1 = 0.0;
                tTotal2 = 0.0;
                tTotal3 = 0.0;
                gridItemsManager.ColumnHeadersVisible = true;

                tIndividualReportType = "House Account Detail";

                DataTable dtNew = new DataTable();
                dtNew.Rows.Clear();
                SqlCommand cmd = new SqlCommand("select Ledger_Name as Card_Name from Ledger_table where Ledger_name not in('Direct','Cash Sales','Purchase A/c','Sales A/c','Cash A/c','Rounded A/c','Labour Charges A/c','Cash Purchase','Profit And Loss Account','14.5% Sales A/c','5% Sales A/c','14.5% Sales Collection','5% Sales Collection','NETS') order by Ledger_name", con);
                cmd.Parameters.AddWithValue("@tFrom", dpFrom.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tTo", dpTo.SelectedDate.Value);
                dr = cmd.ExecuteReader();
                dtNew.Load(dr);
                int i = 0;
                //string tLoadLetter = "";
                pnlCreditCardList.Children.Clear();

                for (int mn = 0; mn < dtNew.Rows.Count; mn++)
                {
                    i += 1;
                    funCardDetailLoad(dtNew.Rows[mn]["Card_Name"].ToString());
                }

                dtPayment.Rows.Add("", "", "");
                //dtPayment.Rows.Add("Total ", "", "", string.Format("{0:0.00}", tTotal1));
                dtPayment.Rows.Add("Total ", string.Format("{0:0.00}", tTotal2), string.Format("{0:0.00}", tTotal3), string.Format("{0:0.00}", tTotal1));

                //funIndividualReportPrint();

                gridItemsManager.DataSource = null;
                gridItemsManager.DataSource = dtPayment;
                gridItemsManager.Columns[0].Width = 90;
                gridItemsManager.Columns[1].Width = 90;
                gridItemsManager.Columns[2].Width = 90;
                gridItemsManager.Columns[3].Width = 90;

                this.gridItemsManager.Columns[1].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;
                this.gridItemsManager.Columns[3].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;


                gridItemsManager.ColumnHeadersVisible = true;
                funPrintHeaderPart();

                topLine1 = "HOUSE ACCOUNT REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "/" + dpFrom.SelectedDate.Value.Month + "/" + dpFrom.SelectedDate.Value.Year + " - " + dpTo.SelectedDate.Value.Day + "/" + dpTo.SelectedDate.Value.Month + "/" + dpTo.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                ds.Tables.Clear();
                //  mainStrSub = "";


                string tempStr = null;
                string tQtyHeading = "";
                tQtyHeading = "Name   ";
                //  mainStr += tQtyHeading;
                //double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 8));
                //for (int j = 0; j < chkCount; j++)
                //{
                //    tQtyHeading += " ";
                //}
                tQtyHeading += " Sales Amt   ";
                tQtyHeading += " Paid Amt   ";
                tQtyHeading += " Balance";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}                
                for (int mn = 0; mn < dtPayment.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;

                    if (isChk == false)
                    {
                        for (int j = 0; j < 4; j++)
                        {
                            tempStr = dtPayment.Rows[mn][j].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 35);
                            if (j == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //MessageBox.Show(mainStr.ToString());
                                        for (int k = 0; k < loc + 8; k++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (j == 1)
                            {
                                if (tempStr.Length < 13)
                                {
                                    mainStr += tempStr.PadLeft(13, ' ');
                                }
                            }
                            if (j == 2)
                            {
                                if (tempStr.Length < 13)
                                {
                                    mainStr += tempStr.PadLeft(13, ' ');
                                }
                            }
                            if (j == 3)
                            {
                                if (tempStr.Length < 9)
                                {
                                    mainStr += tempStr.PadLeft(9, ' ');
                                }
                            }
                            if (j == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }

                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }


            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }


        private void btnCommissionDetailAll_Click(object sender, RoutedEventArgs e)
        {
            if (_Class.clsVariables.tViewReport == true)
            {
                pnlProfitReport.Visibility = Visibility.Hidden;
                Uccommission.Visibility = Visibility.Visible;
                string strUser = "";
                DataTable dtChkUser = new DataTable();
                dtChkUser.Clear();

                string tUserName = _Class.clsVariables.tUserName;
                string tCounterName = _Class.clsVariables.tCounterName;
                SqlCommand cmdChkuser = new SqlCommand("select User_no,User_name,Ctr_no,User_Type from user_table where User_name = '" + tUserName + "'", con);
                //cmdChkuser.Parameters.AddWithValue("@tCountername", _Class.clsVariables.tUserName);
                SqlDataAdapter adpChkUser = new SqlDataAdapter(cmdChkuser);
                adpChkUser.Fill(dtChkUser);
                if (dtChkUser.Rows.Count > 0)
                {
                    strUser = dtChkUser.Rows[0]["User_Type"].ToString();
                }

                if (strUser != "0")
                {
                    Uccommission.cmbCounterUserName.SelectedItem = tUserName;
                    Uccommission.cmbCounterUserName.IsEnabled = false;
                    Uccommission.lblUser.Content = "User Name";
                }
                else
                {
                    Uccommission.cmbCounterUserName.Text = "All User";
                    Uccommission.cmbCounterUserName.IsEnabled = true;
                    Uccommission.lblUser.Content = "Select User";
                }
            }
            else
            {
                MyMessageBox.ShowBox("You are not having permission to view this report", "Warning");
            }

        }

        private void btnGroupCommissionAll_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";
                tPrintingType = "";
                dtGroupCommission.Rows.Clear();
                dtItemCommission.Rows.Clear();
                string tQuery = "";
                if (_Class.clsVariables.tViewReport == true)
                {
                    tQuery = "Select User_no, User_name, Ctr_no from User_table";
                }
                else
                {
                    tQuery = "Select User_no, User_name, Ctr_no from User_table where User_no=@tUserNo and Ctr_no=(Select Ctr_no from counter_table where ctr_name=@tCounter)";
                }
                DataTable dtCommission = new DataTable();
                dtCommission.Rows.Clear();
                DataTable dtUser = new DataTable();
                dtUser.Rows.Clear();
                SqlCommand cmd = new SqlCommand(tQuery, con);
                cmd.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounterName);
                cmd.Parameters.AddWithValue("@tUserNo", _Class.clsVariables.tUserNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtUser);
                for (int mn = 0; mn < dtUser.Rows.Count; mn++)
                {
                    funCommission(Convert.ToString(dtUser.Rows[mn]["User_no"]), Convert.ToString(dtUser.Rows[mn]["User_name"]), Convert.ToString(dtUser.Rows[mn]["Ctr_no"]), "GROUP", dpFrom, dpTo);
                }
                gridItemsManager.DataSource = dtGroupCommission;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 150;
                gridItemsManager.ColumnHeadersVisible = true;
                funPrintHeaderPart();

                topLine1 = "GROUPWISE COMMISSION REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}




                topLine1 = "Report Date : " + dpFrom.SelectedDate.Value.Day + "/" + dpFrom.SelectedDate.Value.Month + "/" + dpFrom.SelectedDate.Value.Year + " - " + dpTo.SelectedDate.Value.Day + "/" + dpTo.SelectedDate.Value.Month + "/" + dpTo.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                if (_Class.clsVariables.tViewReport == true)
                {
                    topLine1 = "Report Counter : All Counter";
                }
                else
                {
                    topLine1 = "Report Counter : " + _Class.clsVariables.tCounterName;
                }
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                ds.Tables.Clear();
                //  mainStrSub = "";


                string tempStr = null;
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 8));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += " Amount";
                // tQtyHeading += "U/Rate ";
                //tQtyHeading += "   Profit";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                for (int mn = 0; mn < dtGroupCommission.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;

                    if (isChk == false)
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            tempStr = dtGroupCommission.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 8);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 8; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 4)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }

        }

        private void btnGroupCommissionMain_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";
                tPrintingType = "";
                dtGroupCommission.Rows.Clear();
                dtItemCommission.Rows.Clear();
                string tQuery = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tQuery = "Select User_no, User_name, Ctr_no from User_table";
                }
                else
                {
                    tQuery = "Select User_no, User_name, Ctr_no from User_table where Ctr_no=(Select Ctr_no from counter_table where ctr_name=@tCounter)";
                }
                DataTable dtCommission = new DataTable();
                dtCommission.Rows.Clear();
                DataTable dtUser = new DataTable();
                dtUser.Rows.Clear();
                SqlCommand cmd = new SqlCommand(tQuery, con);
                cmd.Parameters.AddWithValue("@tCounter", Convert.ToString(cmbCounterName.SelectedItem));
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtUser);
                for (int mn = 0; mn < dtUser.Rows.Count; mn++)
                {
                    funCommission(Convert.ToString(dtUser.Rows[mn]["User_no"]), Convert.ToString(dtUser.Rows[mn]["User_name"]), Convert.ToString(dtUser.Rows[mn]["Ctr_no"]), "GROUP", dpBillDate, dpBillDate);
                }
                gridItemsManager.DataSource = dtGroupCommission;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 150;
                gridItemsManager.ColumnHeadersVisible = true;
                funPrintHeaderPart();

                topLine1 = "GROUPWISE COMMISSION REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}




                topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                ds.Tables.Clear();
                //  mainStrSub = "";


                string tempStr = null;
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 8));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += " Amount";
                // tQtyHeading += "U/Rate ";
                //tQtyHeading += "   Profit";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                for (int mn = 0; mn < dtGroupCommission.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;

                    if (isChk == false)
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            tempStr = dtGroupCommission.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 8);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 8; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 4)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void btnCommissionDetailMain_Click(object sender, RoutedEventArgs e)
        {
            // pnlGroupCommissionReport.Visibility = Visibility.Visible;
            try
            {
                mainStr = "";
                tPrintingType = "";
                dtGroupCommission.Rows.Clear();
                dtItemCommission.Rows.Clear();
                string tQuery = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tQuery = "Select User_no, User_name, Ctr_no from User_table";
                }
                else
                {
                    tQuery = "Select User_no, User_name, Ctr_no from User_table where Ctr_no=(Select Ctr_no from counter_table where ctr_name=@tCounter)";
                }
                DataTable dtCommission = new DataTable();
                dtCommission.Rows.Clear();
                DataTable dtUser = new DataTable();
                dtUser.Rows.Clear();
                SqlCommand cmd = new SqlCommand(tQuery, con);
                cmd.Parameters.AddWithValue("@tCounter", Convert.ToString(cmbCounterName.SelectedItem));
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtUser);
                for (int mn = 0; mn < dtUser.Rows.Count; mn++)
                {
                    funCommission(Convert.ToString(dtUser.Rows[mn]["User_no"]), Convert.ToString(dtUser.Rows[mn]["User_name"]), Convert.ToString(dtUser.Rows[mn]["Ctr_no"]), "ITEM", dpBillDate, dpBillDate);
                }
                gridItemsManager.DataSource = dtGroupCommission;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 150;
                gridItemsManager.ColumnHeadersVisible = true;
                funPrintHeaderPart();

                topLine1 = "ITEMWISE COMMISSION REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}




                topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                ds.Tables.Clear();
                //  mainStrSub = "";


                string tempStr = null;
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 8));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += " Amount";
                // tQtyHeading += "U/Rate ";
                //tQtyHeading += "   Profit";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                for (int mn = 0; mn < dtGroupCommission.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;

                    if (isChk == false)
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            tempStr = dtGroupCommission.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 8);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 8; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 4)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        DataTable dtGroupCommission = new DataTable();
        DataTable dtItemCommission = new DataTable();
        public void funCommission(string tUserNo, string tUserName, string tCtrNo, string tAction, DatePicker dtpFrom1, DatePicker dtpTo1)
        {
            try
            {
                //Distict Groupname getting code
                DataTable dtCommissionGroup = new DataTable();
                dtCommissionGroup.Rows.Clear();
                SqlCommand cmdGroupName = new SqlCommand(@"Select distinct(Item_groupName) as Item_GroupName from 
(Select item_no,CONVERT(numeric(18,2),sum(Commi)) as Commission from salmas_table, stktrn_table where salmas_table.smas_no=stktrn_table.strn_no and smas_Cancel=0 and smas_rtno=0 and salmas_table.UserNo=@tUserNo  and Smas_billDate between @tFromDate and @tToDate group by item_no having SUM(Commi)>0) as Result1,
(Select Item_no,Item_name,Item_Grouptable.Item_groupname from Item_table,Item_Grouptable where Item_table.item_Groupno=Item_Grouptable.Item_groupno) as Result2
where Result1.Item_no=Result2.Item_no", con);
                cmdGroupName.Parameters.AddWithValue("@tUserNo", tUserNo);
                cmdGroupName.Parameters.AddWithValue("@tFromDate", Convert.ToDateTime(dtpFrom1.SelectedDate.Value.Year + "/" + dtpFrom1.SelectedDate.Value.Month + "/" + dtpFrom1.SelectedDate.Value.Day));
                cmdGroupName.Parameters.AddWithValue("@tToDate", Convert.ToDateTime(dtpTo1.SelectedDate.Value.Year + "/" + dtpTo1.SelectedDate.Value.Month + "/" + dtpTo1.SelectedDate.Value.Day));
                SqlDataAdapter adpGroupName = new SqlDataAdapter(cmdGroupName);
                adpGroupName.Fill(dtCommissionGroup);




                DataTable dtCommissionAll = new DataTable();
                dtCommissionAll.Rows.Clear();
                SqlCommand cmd = new SqlCommand(@"Select Result1.Item_no,commission,Item_name,Item_groupName from 
(Select item_no,CONVERT(numeric(18,2),sum(Commi)) as Commission from salmas_table, stktrn_table where salmas_table.smas_no=stktrn_table.strn_no and smas_Cancel=0 and smas_rtno=0 and salmas_table.UserNo=@tUserNo and Smas_billDate between @tFromDate and @tToDate group by item_no having SUM(Commi)>0) as Result1,
(Select Item_no,Item_name,Item_Grouptable.Item_groupname from Item_table,Item_Grouptable where Item_table.item_Groupno=Item_Grouptable.Item_groupno) as Result2
where Result1.Item_no=Result2.Item_no", con);
                cmd.Parameters.AddWithValue("@tUserNo", tUserNo);
                cmd.Parameters.AddWithValue("@tFromDate", Convert.ToDateTime(dtpFrom1.SelectedDate.Value.Year + "/" + dtpFrom1.SelectedDate.Value.Month + "/" + dtpFrom1.SelectedDate.Value.Day));
                cmd.Parameters.AddWithValue("@tToDate", Convert.ToDateTime(dtpTo1.SelectedDate.Value.Year + "/" + dtpTo1.SelectedDate.Value.Month + "/" + dtpTo1.SelectedDate.Value.Day));
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtCommissionAll);
                string tItemGroupName = "";
                double tCommissionAmt = 0, tTotCommissionAmt = 0;
                if (dtCommissionAll.Rows.Count > 0)
                {

                    if (tAction == "GROUP")
                    {
                        for (int mn = 0; mn < dtCommissionGroup.Rows.Count; mn++)
                        {
                            if (mn == 0)
                            {
                                dtGroupCommission.Rows.Add(Convert.ToString(tUserName), "");
                            }
                            tItemGroupName = Convert.ToString(dtCommissionGroup.Rows[mn]["Item_groupName"].ToString());
                            tItemGroupName = (tItemGroupName.IndexOf("'") == -1) ? tItemGroupName : tItemGroupName.Replace("'", "''");

                            DataRow[] dtCommissionAllRow = dtCommissionAll.Select("Item_groupName='" + tItemGroupName + "'");
                            tCommissionAmt = 0;
                            for (int k = 0; k < dtCommissionAllRow.Length; k++)
                            {
                                tCommissionAmt += string.IsNullOrEmpty(Convert.ToString(dtCommissionAllRow[k]["Commission"])) ? 0.00 : Convert.ToDouble(Convert.ToString(dtCommissionAllRow[k]["Commission"]));

                            }
                            tTotCommissionAmt += tCommissionAmt;
                            dtGroupCommission.Rows.Add(Convert.ToString(dtCommissionGroup.Rows[mn]["Item_groupName"].ToString()), string.Format("{0:0.00}", tCommissionAmt));
                            if (mn == (dtCommissionGroup.Rows.Count - 1))
                            {
                                dtGroupCommission.Rows.Add("Total :", string.Format("{0:0.00}", tTotCommissionAmt));
                                dtGroupCommission.Rows.Add("", "");
                            }
                        }
                    }
                    if (tAction == "ITEM")
                    {
                        for (int mn = 0; mn < dtCommissionGroup.Rows.Count; mn++)
                        {
                            if (mn == 0)
                            {
                                dtGroupCommission.Rows.Add(Convert.ToString(tUserName), "");
                            }
                            tItemGroupName = Convert.ToString(dtCommissionGroup.Rows[mn]["Item_groupName"].ToString());
                            tItemGroupName = (tItemGroupName.IndexOf("'") == -1) ? tItemGroupName : tItemGroupName.Replace("'", "''");

                            DataRow[] dtCommissionAllRow = dtCommissionAll.Select("Item_groupName='" + tItemGroupName + "'");
                            tCommissionAmt = 0;
                            dtGroupCommission.Rows.Add("", "");
                            dtGroupCommission.Rows.Add(Convert.ToString(dtCommissionGroup.Rows[mn]["Item_groupName"].ToString()), "");
                            for (int k = 0; k < dtCommissionAllRow.Length; k++)
                            {
                                tCommissionAmt = string.IsNullOrEmpty(Convert.ToString(dtCommissionAllRow[k]["Commission"])) ? 0.00 : Convert.ToDouble(Convert.ToString(dtCommissionAllRow[k]["Commission"]));
                                tTotCommissionAmt += tCommissionAmt;
                                dtGroupCommission.Rows.Add(Convert.ToString(dtCommissionAllRow[k]["Item_name"].ToString()), string.Format("{0:0.00}", tCommissionAmt));
                            }

                            if (mn == (dtCommissionGroup.Rows.Count - 1))
                            {
                                dtGroupCommission.Rows.Add("Total :", string.Format("{0:0.00}", tTotCommissionAmt));
                                dtGroupCommission.Rows.Add("", "");
                            }
                        }
                    }

                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        private void Uccommission_uccommission_click()
        {
            try
            {
                mainStr = "";
                tPrintingType = "";
                dtGroupCommission.Rows.Clear();
                dtItemCommission.Rows.Clear();
                string tQuery = "";

                if (Uccommission.cmbCounterUserName.Text == "All User")
                {
                    tQuery = "Select User_no, User_name, Ctr_no from User_table";
                }
                else
                {
                    //tQuery = "Select User_no, User_name, Ctr_no from User_table where Ctr_no=(Select Ctr_no from counter_table where ctr_name=@tCounter)";
                    tQuery = "select User_no,User_name,Ctr_no from user_table where User_name=@Tusername";
                }
                DataTable dtAllCommission = new DataTable();
                dtAllCommission.Rows.Clear();
                DataTable dtAllUser = new DataTable();
                dtAllUser.Rows.Clear();
                SqlCommand cmd = new SqlCommand(tQuery, con);
                cmd.Parameters.AddWithValue("@Tusername", Uccommission.cmbCounterUserName.SelectedItem);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtAllUser);
                for (int mn = 0; mn < dtAllUser.Rows.Count; mn++)
                {
                    funCommission1(Convert.ToString(dtAllUser.Rows[mn]["User_no"]), Convert.ToString(dtAllUser.Rows[mn]["User_name"]), Convert.ToString(dtAllUser.Rows[mn]["Ctr_no"]), "ITEM");
                }

                //gridItemsManager.Rows.Clear();
                gridItemsManager.DataSource = dtGroupCommission;

                gridItemsManager.DataSource = dtGroupCommission;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 150;
                gridItemsManager.ColumnHeadersVisible = true;
                funPrintHeaderPart();

                topLine1 = "ITEMWISE COMMISSION REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}


                topLine1 = "Report Date : " + Uccommission.dpFromCommission.SelectedDate.Value.Day + "/" + Uccommission.dpFromCommission.SelectedDate.Value.Month + "/" + Uccommission.dpFromCommission.SelectedDate.Value.Year + " - " + Uccommission.dpToCommission.SelectedDate.Value.Day + "/" + Uccommission.dpToCommission.SelectedDate.Value.Month + "/" + Uccommission.dpToCommission.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                topLine1 = "Report Counter : " + _Class.clsVariables.tCounterName;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                ds.Tables.Clear();
                //  mainStrSub = "";


                string tempStr = null;
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 8));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += " Amount";
                // tQtyHeading += "U/Rate ";
                //tQtyHeading += "   Profit";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                for (int mn = 0; mn < dtGroupCommission.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;

                    if (isChk == false)
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            tempStr = dtGroupCommission.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 8);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 8; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 4)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        private void Uccommission_ucgroupcommission_click()
        {
            try
            {
                mainStr = "";
                tPrintingType = "";
                dtGroupCommission.Rows.Clear();
                dtItemCommission.Rows.Clear();
                string tQuery = "";
                if (Uccommission.cmbCounterUserName.Text == "All User")
                {
                    tQuery = "Select User_no, User_name, Ctr_no from User_table";
                }
                else
                {
                    //tQuery = "Select User_no, User_name, Ctr_no from User_table where Ctr_no=(Select Ctr_no from counter_table where ctr_name=@tCounter)";
                    tQuery = "select User_no,User_name,Ctr_no from user_table where User_name=@Tusername";
                }
                DataTable dtCommission = new DataTable();
                dtCommission.Rows.Clear();
                DataTable dtUser = new DataTable();
                dtUser.Rows.Clear();
                SqlCommand cmd = new SqlCommand(tQuery, con);
                cmd.Parameters.AddWithValue("@Tusername", Convert.ToString(Uccommission.cmbCounterUserName.SelectedItem));
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtUser);
                for (int mn = 0; mn < dtUser.Rows.Count; mn++)
                {
                    funCommission1(Convert.ToString(dtUser.Rows[mn]["User_no"]), Convert.ToString(dtUser.Rows[mn]["User_name"]), Convert.ToString(dtUser.Rows[mn]["Ctr_no"]), "GROUP");
                }
                //gridItemsManager.Rows.Clear();
                gridItemsManager.DataSource = dtGroupCommission;
                gridItemsManager.Columns[0].Width = 300;
                gridItemsManager.Columns[1].Width = 150;
                gridItemsManager.ColumnHeadersVisible = true;
                funPrintHeaderPart();

                topLine1 = "GROUPWISE COMMISSION REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }


                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }

                //}


                topLine1 = "Report Date : " + Uccommission.dpFromCommission.SelectedDate.Value.Day + "/" + Uccommission.dpFromCommission.SelectedDate.Value.Month + "/" + Uccommission.dpFromCommission.SelectedDate.Value.Year + " - " + Uccommission.dpToCommission.SelectedDate.Value.Day + "/" + Uccommission.dpToCommission.SelectedDate.Value.Month + "/" + Uccommission.dpToCommission.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                topLine1 = "Report Counter : " + _Class.clsVariables.tCounterName;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }
                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                ds.Tables.Clear();
                //  mainStrSub = "";


                string tempStr = null;
                string tQtyHeading = "";
                tQtyHeading = "Particulars";
                //  mainStr += tQtyHeading;
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 8));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += " Amount";
                // tQtyHeading += "U/Rate ";
                //tQtyHeading += "   Profit";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                //        break;
                //    }
                //}
                for (int mn = 0; mn < dtGroupCommission.Rows.Count; mn++)
                //foreach (DataRow row in dgsales.Rows)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;

                    if (isChk == false)
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            tempStr = dtGroupCommission.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 8);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 8; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 8)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                // mainStr += tempStr.PadRight(7, ' ');
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 4)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }

        public void funCommission1(string tUserNo, string tUserName, string tCtrNo, string tAction)
        {
            try
            {
                //Distict Groupname getting code
                DataTable dtCommissionGroup = new DataTable();
                dtCommissionGroup.Rows.Clear();
                SqlCommand cmdGroupName = new SqlCommand(@"Select distinct(Item_groupName) as Item_GroupName from 
(Select item_no,CONVERT(numeric(18,2),sum(Commi)) as Commission from salmas_table, stktrn_table where salmas_table.smas_no=stktrn_table.strn_no and smas_Cancel=0 and smas_rtno=0 and salmas_table.UserNo=@tUserNo  and Smas_billDate between @tFromDate and @tToDate group by item_no having SUM(Commi)>0) as Result1,
(Select Item_no,Item_name,Item_Grouptable.Item_groupname from Item_table,Item_Grouptable where Item_table.item_Groupno=Item_Grouptable.Item_groupno) as Result2
where Result1.Item_no=Result2.Item_no", con);
                cmdGroupName.Parameters.AddWithValue("@tUserNo", tUserNo);
                cmdGroupName.Parameters.AddWithValue("@tFromDate", Convert.ToDateTime(Uccommission.dpFromCommission.SelectedDate.Value.Year + "/" + Uccommission.dpFromCommission.SelectedDate.Value.Month + "/" + Uccommission.dpFromCommission.SelectedDate.Value.Day));
                cmdGroupName.Parameters.AddWithValue("@tToDate", Convert.ToDateTime(Uccommission.dpToCommission.SelectedDate.Value.Year + "/" + Uccommission.dpToCommission.SelectedDate.Value.Month + "/" + Uccommission.dpToCommission.SelectedDate.Value.Day));
                SqlDataAdapter adpGroupName = new SqlDataAdapter(cmdGroupName);
                adpGroupName.Fill(dtCommissionGroup);




                DataTable dtCommissionAll = new DataTable();
                dtCommissionAll.Rows.Clear();
                SqlCommand cmd = new SqlCommand(@"Select Result1.Item_no,commission,Item_name,Item_groupName from 
(Select item_no,CONVERT(numeric(18,2),sum(Commi)) as Commission from salmas_table, stktrn_table where salmas_table.smas_no=stktrn_table.strn_no and smas_Cancel=0 and smas_rtno=0 and salmas_table.UserNo=@tUserNo and Smas_billDate between @tFromDate and @tToDate group by item_no having SUM(Commi)>0) as Result1,
(Select Item_no,Item_name,Item_Grouptable.Item_groupname from Item_table,Item_Grouptable where Item_table.item_Groupno=Item_Grouptable.Item_groupno) as Result2
where Result1.Item_no=Result2.Item_no", con);
                cmd.Parameters.AddWithValue("@tUserNo", tUserNo);
                cmd.Parameters.AddWithValue("@tFromDate", Convert.ToDateTime(Uccommission.dpFromCommission.SelectedDate.Value.Year + "/" + Uccommission.dpFromCommission.SelectedDate.Value.Month + "/" + Uccommission.dpFromCommission.SelectedDate.Value.Day));
                cmd.Parameters.AddWithValue("@tToDate", Convert.ToDateTime(Uccommission.dpToCommission.SelectedDate.Value.Year + "/" + Uccommission.dpToCommission.SelectedDate.Value.Month + "/" + Uccommission.dpToCommission.SelectedDate.Value.Day));
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtCommissionAll);
                string tItemGroupName = "";
                double tCommissionAmt = 0, tTotCommissionAmt = 0;
                if (dtCommissionAll.Rows.Count > 0)
                {

                    if (tAction == "GROUP")
                    {
                        for (int mn = 0; mn < dtCommissionGroup.Rows.Count; mn++)
                        {
                            if (mn == 0)
                            {
                                dtGroupCommission.Rows.Add(Convert.ToString(tUserName), "");
                            }
                            tItemGroupName = Convert.ToString(dtCommissionGroup.Rows[mn]["Item_groupName"].ToString());
                            tItemGroupName = (tItemGroupName.IndexOf("'") == -1) ? tItemGroupName : tItemGroupName.Replace("'", "''");

                            DataRow[] dtCommissionAllRow = dtCommissionAll.Select("Item_groupName='" + tItemGroupName + "'");
                            tCommissionAmt = 0;
                            for (int k = 0; k < dtCommissionAllRow.Length; k++)
                            {
                                tCommissionAmt += string.IsNullOrEmpty(Convert.ToString(dtCommissionAllRow[k]["Commission"])) ? 0.00 : Convert.ToDouble(Convert.ToString(dtCommissionAllRow[k]["Commission"]));

                            }
                            tTotCommissionAmt += tCommissionAmt;
                            dtGroupCommission.Rows.Add(Convert.ToString(dtCommissionGroup.Rows[mn]["Item_groupName"].ToString()), string.Format("{0:0.00}", tCommissionAmt));
                            if (mn == (dtCommissionGroup.Rows.Count - 1))
                            {
                                dtGroupCommission.Rows.Add("Total :", string.Format("{0:0.00}", tTotCommissionAmt));
                                dtGroupCommission.Rows.Add("", "");
                            }
                        }
                    }
                    if (tAction == "ITEM")
                    {
                        for (int mn = 0; mn < dtCommissionGroup.Rows.Count; mn++)
                        {
                            if (mn == 0)
                            {
                                dtGroupCommission.Rows.Add(Convert.ToString(tUserName), "");
                            }
                            tItemGroupName = Convert.ToString(dtCommissionGroup.Rows[mn]["Item_groupName"].ToString());
                            tItemGroupName = (tItemGroupName.IndexOf("'") == -1) ? tItemGroupName : tItemGroupName.Replace("'", "''");

                            DataRow[] dtCommissionAllRow = dtCommissionAll.Select("Item_groupName='" + tItemGroupName + "'");
                            tCommissionAmt = 0;
                            dtGroupCommission.Rows.Add("", "");
                            dtGroupCommission.Rows.Add(Convert.ToString(dtCommissionGroup.Rows[mn]["Item_groupName"].ToString()), "");
                            for (int k = 0; k < dtCommissionAllRow.Length; k++)
                            {
                                tCommissionAmt = string.IsNullOrEmpty(Convert.ToString(dtCommissionAllRow[k]["Commission"])) ? 0.00 : Convert.ToDouble(Convert.ToString(dtCommissionAllRow[k]["Commission"]));
                                tTotCommissionAmt += tCommissionAmt;
                                dtGroupCommission.Rows.Add(Convert.ToString(dtCommissionAllRow[k]["Item_name"].ToString()), string.Format("{0:0.00}", tCommissionAmt));
                            }

                            if (mn == (dtCommissionGroup.Rows.Count - 1))
                            {
                                dtGroupCommission.Rows.Add("Total :", string.Format("{0:0.00}", tTotCommissionAmt));
                                dtGroupCommission.Rows.Add("", "");
                            }
                        }
                    }

                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.Message, "Warning");
            }
        }
        DataTable dtSalesmen = new DataTable();
        private void btnSalesmenReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                mainStr = "";
                tPrintingType = "";
                listDisplay.Items.Clear();
                gridItemsManager.DataSource = null; dtSalesmen.Rows.Clear();
                gridItemsManager.ColumnHeadersVisible = true;

                //Return Item Values
                DataTable dtVoid = new DataTable();
                dtVoid.Rows.Clear();
                //SqlCommand cmdVoid = new SqlCommand("select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=@tCounter and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=(Select CONVERT(date,dateadd(day,1,endofday),103) from endofday_table where Id=(Select MAX(EndOfDayId) from NumberTable)) group by smas_rtno, party_no", con);
                //cmdVoid.Parameters.AddWithValue("@tCounter", _Class.clsVariables.tCounter);
                string tCmdVoid = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where  Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno, party_no";
                }
                else
                {
                    tCmdVoid = "select party_no, smas_rtno,convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno, party_no";
                    //tCmdVoid = "select party_no, convert(numeric(18,2),SUM(smas_NetAmount)) as Amount from salmas_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and Smas_Cancel<>1 and smas_rtno<>0 and Smas_billdate=@tDate group by smas_rtno, party_no";
                }
                SqlCommand cmdVoid = new SqlCommand(tCmdVoid, con);
                cmdVoid.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                // cmdVoid.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdVoid.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);

                SqlDataAdapter adpVoid = new SqlDataAdapter(cmdVoid);
                adpVoid.Fill(dtVoid);
                double tCashReturnValue = 0.00;
                double tNETSReturnValue = 0.00;
                for (int i = 0; i < dtVoid.Rows.Count; i++)
                {
                    if (dtVoid.Rows[i]["party_no"].ToString() == "2")
                    {
                        tCashReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());

                    }
                    else if (dtVoid.Rows[i]["party_no"].ToString() == "14")
                    {
                        tNETSReturnValue += (dtVoid.Rows[i]["Amount"].ToString().Trim() == "") ? 0 : double.Parse(dtVoid.Rows[i]["Amount"].ToString());

                    }
                }

                string tCmd = "";
                if (cmbCounterName.Text == "All Counter")
                {
                    //tCmd = "select distinct salmas_table.smas_billno as BillNo,Ledger_table.Ledger_name as Salesmen,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from SalRecv_table,salmas_table,stktrn_table,Ledger_table where salmas_table.smas_name='salesmen' and smas_rtno=0  and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and stktrn_table.strn_no=salmas_table.smas_no and Ledger_table.Ledger_no=stktrn_table.StrnParty_no and SalRecv_table.SalRecv_Led=6 group by salmas_table.smas_billno ,SalRecv_Amt ,salmas_table.smas_name,stktrn_table.StrnParty_no,Ledger_table.Ledger_name";
                    tCmd = "select salmas_table.smas_billno as BillNo,Ledger_table.Ledger_name as Salesmen,CONVERT(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from Ledger_table,salmas_table,Salrecv_table where salmas_table.smas_name='salesmen' and smas_rtno=0  and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and Salrecv_table.SalRecv_Led='6' and salmas_table.party_no = Ledger_table.Ledger_no group by salmas_table.smas_billno,Ledger_table.Ledger_name order by salmas_table.smas_billno";
                }
                else
                {
                    //tCmd = "select distinct salmas_table.smas_billno as BillNo,Ledger_table.Ledger_name as Salesmen,convert(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from SalRecv_table,salmas_table,stktrn_table,Ledger_table where stktrn_table.ctr_no =(Select ctr_no from Counter_table where ctr_name=@tCounter) and salmas_table.smas_name='salesmen' and smas_rtno=0  and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and stktrn_table.strn_no=salmas_table.smas_no and Ledger_table.Ledger_no=stktrn_table.StrnParty_no and SalRecv_table.SalRecv_Led=6 group by salmas_table.smas_billno ,SalRecv_Amt ,salmas_table.smas_name,stktrn_table.StrnParty_no,Ledger_table.Ledger_name";
                    tCmd = "select salmas_table.smas_billno  as BillNo,Ledger_table.Ledger_name as Salesmen,CONVERT(numeric(18,2),Sum(SalRecv_table.SalRecv_Amt)) as Amount from Ledger_table,salmas_table,SalRecv_table where salmas_table.ctr_no =(Select ctr_no from Counter_table where ctr_name=@tcounter) and salmas_table.smas_name='salesmen' and smas_rtno=0  and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and Salrecv_table.SalRecv_Led='6' and salmas_table.party_no = Ledger_table.Ledger_no group by salmas_table.smas_billno,Ledger_table.Ledger_name order by salmas_table.smas_billno";
                }
                SqlCommand cmd = new SqlCommand(tCmd, con);
                cmd.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmd.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(dtSalesmen);
                gridItemsManager.DataSource = dtSalesmen.DefaultView;
                double tTotal = 0.00;
                for (int i = 0; i < dtSalesmen.Rows.Count; i++)
                {
                    tTotal += (dtSalesmen.Rows[i]["Amount"].ToString() == "") ? 0.00 : double.Parse(dtSalesmen.Rows[i]["Amount"].ToString());
                }
                dtSalesmen.Rows.Add("", "", "");
                dtSalesmen.Rows.Add("Total ", "", string.Format("{0:0.00}", tTotal));

                if (tCashReturnValue > 0)
                {
                    //  dtCash.Rows.Add("", "", "");
                    dtSalesmen.Rows.Add("Return Item Amount(-)", "", string.Format("{0:0.00}", tCashReturnValue));
                    dtSalesmen.Rows.Add("Total Amount", "", string.Format("{0:0.00}", (tTotal - tCashReturnValue)));
                }

                if (cmbCounterName.Text == "All Counter")
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where  smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                }
                else
                {
                    tCmd = "Select sum(Amount) as DiscountAmt from DiscountDetail_table  where Bill_no in (select smas_billno as BillNo from salmas_table,SalRecv_table where ctr_no=(Select ctr_no from Counter_table where ctr_name=@tCounter) and smas_Cancel<>1 and smas_billdate=@tDate and salmas_table.smas_billno=SalRecv_table.SalRecv_Salno and SalRecv_table.SalRecv_Led=5 group by salmas_table.smas_billno,salmas_table.smas_billtime ,SalRecv_Amt)";
                }
                DataTable dtDiscountAmt = new DataTable();
                dtDiscountAmt.Rows.Clear();
                SqlCommand cmdDiscount = new SqlCommand(tCmd, con);
                cmdDiscount.Parameters.AddWithValue("@tDate", dpBillDate.SelectedDate.Value);
                cmdDiscount.Parameters.AddWithValue("@tCounter", cmbCounterName.Text);
                SqlDataAdapter adpDiscount = new SqlDataAdapter(cmdDiscount);
                adpDiscount.Fill(dtDiscountAmt);
                double tDiscountAmt = 0.00;

                gridItemsManager.Columns[0].Width = 150;
                gridItemsManager.Columns[1].Width = 120;
                gridItemsManager.Columns[2].Width = 120;
                this.gridItemsManager.Columns[2].DefaultCellStyle.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleRight;

                funPrintHeaderPart();
                charPerLine = _Class.clsVariables.tempGCharactersPerLine;
                topLine1 = "SALESMEN REPORT";
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = DateTime.Now.ToString("dd/MM/yyyy") + " - " + DateTime.Now.ToShortTimeString();
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Date : " + dpBillDate.SelectedDate.Value.Day + "/" + dpBillDate.SelectedDate.Value.Month + "/" + dpBillDate.SelectedDate.Value.Year;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                topLine1 = "Report Counter : " + cmbCounterName.Text;
                if (topLine1.Length <= double.Parse(charPerLine))
                {
                    findCenterPosition = (double.Parse(charPerLine) - topLine1.Length);
                    if (findCenterPosition % 2 == 0)
                    {
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    else
                    {
                        for (int j = 0; j < ((findCenterPosition / 2) + 1); j++)
                        {
                            mainStr += " ";
                        }
                        mainStr += topLine1;
                        for (int j = 0; j < (findCenterPosition / 2); j++)
                        {
                            mainStr += " ";
                        }
                    }
                    mainStr += "\n";
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                //dtPrint.Rows[i4]["Property"].ToString();
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

                string tempStr = null;

                string tQtyHeading = "";
                tQtyHeading = "BillNo";
                double chkCount = (double.Parse(charPerLine) - (tQtyHeading.Length + 18));
                for (int j = 0; j < chkCount; j++)
                {
                    tQtyHeading += " ";
                }
                tQtyHeading += " Salesmen ";
                tQtyHeading += "   Amount";
                mainStr += tQtyHeading;
                mainStr += "\n";

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }
                for (int mn = 0; mn < dtSalesmen.Rows.Count; mn++)
                {
                    // object[] array = dgsales.Rows[mn].;
                    bool isChk = false;

                    if (isChk == false)
                    {
                        for (int i = 0; i < 3; i++)
                        {
                            tempStr = dtSalesmen.Rows[mn][i].ToString();
                            //  MessageBox.Show(tempStr.Length.ToString());
                            findCenterPosition = (double.Parse(charPerLine) - 20);
                            if (i == 0)
                            {
                                if (tempStr.Length <= (int)findCenterPosition)
                                {
                                    mainStr += tempStr.PadRight((int)findCenterPosition, ' ');
                                }
                                else
                                {
                                    string temp = tempStr.Substring(0, (((int)findCenterPosition) < tempStr.Length) ? (int)(findCenterPosition) : tempStr.Length);
                                    //    MessageBox.Show(temp);
                                    int chkSpace = temp.LastIndexOf(" ");
                                    int loc = (temp.Length - temp.LastIndexOf(" "));
                                    //   MessageBox.Show(temp.LastIndexOf(" ").ToString());
                                    if (chkSpace != -1)
                                    {
                                        mainStr += temp.Substring(0, temp.LastIndexOf(" "));
                                        //   MessageBox.Show(mainStr.ToString());
                                        for (int j = 0; j < loc + 20; j++)
                                        {
                                            mainStr += " ";
                                        }
                                        mainStr += "\n";
                                        string temp1 = tempStr.Substring((temp.LastIndexOf(" ") + 1), ((tempStr.Length - temp.LastIndexOf(" ")) - 1));
                                        // mainStr += temp1;
                                        if (temp1.Length <= (int)findCenterPosition)
                                        {
                                            mainStr += temp1.PadRight((int)findCenterPosition, ' ');
                                        }
                                    }
                                    else
                                    {
                                        mainStr += temp.ToString();
                                    }

                                }
                            }

                            if (i == 1)
                            {
                                if (tempStr.Length < 11)
                                {
                                    mainStr += tempStr.PadRight(10, ' ');
                                }
                            }
                            if (i == 10)
                            {
                                if (tempStr.Length <= 7)
                                {
                                    mainStr += tempStr.PadLeft(7, ' ');
                                }
                            }
                            if (i == 2)
                            {
                                if (tempStr.Length <= 10)
                                {
                                    mainStr += tempStr.PadLeft(10, ' ');
                                }
                            }
                            // tPrintText += tempStr;
                        }
                        mainStr += "\n";
                    }
                }

                lineBelowLogo = _Class.clsVariables.tempGPrintLineBelowHeader;
                //dtPrint.Rows[i4]["Property"].ToString();
                if (lineBelowLogo == "No Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += " ";
                    }
                    mainStr += "\n";
                }
                if (lineBelowLogo == "Single Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "-";
                    }
                    mainStr += "\n";
                }
                else if (lineBelowLogo == "Double Line")
                {
                    for (int j = 0; j < double.Parse(charPerLine); j++)
                    {
                        mainStr += "=";
                    }
                    mainStr += "\n";
                }

            }
            catch (Exception ex)
            {
                MyMessageBox.ShowBox(ex.ToString(), "Warning");
            }
        }
    }
}


